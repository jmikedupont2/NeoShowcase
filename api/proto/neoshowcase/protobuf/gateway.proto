syntax = "proto3";
package neoshowcase.protobuf;
option go_package = "github.com/traPtitech/neoshowcase/pkg/infrastructure/grpc/pb";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "neoshowcase/protobuf/null.proto";

message User {
  string id = 1;
  string name = 2;
  bool admin = 3;
  string avatar_url = 4;
}

message GetUsersResponse {
  repeated User users = 1;
}

message UserKey {
  string id = 1;
  string user_id = 2;
  string public_key = 3;
}

message GetUserKeysResponse {
  repeated UserKey keys = 1;
}

message CreateUserKeyRequest {
  string public_key = 1;
}

message DeleteUserKeyRequest {
  string key_id = 1;
}

message Repository {
  enum AuthMethod {
    BASIC = 0;
    SSH = 1;
  }
  string id = 1;
  string name = 2;
  string url = 3;
  AuthMethod auth_method = 4;
  repeated string owner_ids = 5;
}

message CreateRepositoryAuthBasic {
  string username = 1;
  string password = 2;
}

message CreateRepositoryAuthSSH {
  string ssh_key = 1;
}

message CreateRepositoryAuth {
  oneof auth {
    google.protobuf.Empty none = 1;
    CreateRepositoryAuthBasic basic = 2;
    CreateRepositoryAuthSSH ssh = 3;
  }
}

message CreateRepositoryRequest {
  string name = 1;
  string url = 2;
  CreateRepositoryAuth auth = 3;
}

message UpdateRepositoryRequest {
  string id = 1;
  string name = 2;
  string url = 3;
  CreateRepositoryAuth auth = 4;
  repeated string owner_ids = 5;
}

message RepositoryIdRequest {
  string repository_id = 1;
}

enum DeployType {
  RUNTIME = 0;
  STATIC = 1;
}

message RuntimeConfig {
  bool use_mariadb = 1;
  bool use_mongodb = 2;
  string entrypoint = 3;
  string command = 4;
}

message BuildConfigRuntimeBuildpack {
  RuntimeConfig runtime_config = 1;
  string context = 2;
}

message BuildConfigRuntimeCmd {
  RuntimeConfig runtime_config = 1;
  string base_image = 2;
  string build_cmd = 3;
  bool build_cmd_shell = 4;
}

message BuildConfigRuntimeDockerfile {
  RuntimeConfig runtime_config = 1;
  string dockerfile_name = 2;
  string context = 3;
}

message BuildConfigStaticCmd {
  string base_image = 1;
  string build_cmd = 2;
  bool build_cmd_shell = 3;
  string artifact_path = 4;
}

message BuildConfigStaticDockerfile {
  string dockerfile_name = 1;
  string context = 2;
  string artifact_path = 3;
}

message ApplicationConfig {
  oneof build_config {
    BuildConfigRuntimeBuildpack runtime_buildpack = 1;
    BuildConfigRuntimeCmd runtime_cmd = 2;
    BuildConfigRuntimeDockerfile runtime_dockerfile = 3;
    BuildConfigStaticCmd static_cmd = 4;
    BuildConfigStaticDockerfile static_dockerfile = 5;
  }
}

enum AuthenticationType {
  OFF = 0;
  SOFT = 1;
  HARD = 2;
}

message Website {
  string id = 1;
  string fqdn = 2;
  string path_prefix = 3;
  bool strip_prefix = 4;
  bool https = 5;
  bool h2c = 6;
  int32 http_port = 7;
  AuthenticationType authentication = 8;
}

message CreateWebsiteRequest {
  string fqdn = 1;
  string path_prefix = 2;
  bool strip_prefix = 3;
  bool https = 4;
  bool h2c = 5;
  int32 http_port = 6;
  AuthenticationType authentication = 7;
}

message DeleteWebsiteRequest {
  string id = 1;
}

enum PortPublicationProtocol {
  TCP = 0;
  UDP = 1;
}

message PortPublication {
  int32 internet_port = 1;
  int32 application_port = 2;
  PortPublicationProtocol protocol = 3;
}

message Application {
  enum ContainerState {
    MISSING = 0;
    STARTING = 1;
    RUNNING = 2;
    EXITED = 3;
    ERRORED = 4;
    UNKNOWN = 5;
  }
  string id = 1;
  string name = 2;
  string repository_id = 3;
  string ref_name = 4;
  DeployType deploy_type = 5;
  bool running = 6;
  ContainerState container = 7;
  string current_commit = 8;
  string want_commit = 9;
  google.protobuf.Timestamp created_at = 10;
  google.protobuf.Timestamp updated_at = 11;
  ApplicationConfig config = 12;
  repeated Website websites = 13;
  repeated PortPublication port_publications = 14;
  repeated string owner_ids = 15;
}

message CreateApplicationRequest {
  string name = 1;
  string repository_id = 2;
  string ref_name = 3;
  ApplicationConfig config = 4;
  repeated CreateWebsiteRequest websites = 5;
  repeated PortPublication port_publications = 6;
  bool start_on_create = 7;
}

message UpdateApplicationRequest {
  string id = 1;
  string name = 2;
  string ref_name = 3;
  ApplicationConfig config = 4;
  repeated CreateWebsiteRequest new_websites = 5;
  repeated DeleteWebsiteRequest delete_websites = 6;
  repeated PortPublication port_publications = 7;
  repeated string owner_ids = 8;
}

message AvailableDomain {
  string domain = 1;
  repeated string exclude_domains = 2;
  bool auth_available = 3;
}

message AvailableDomains {
  repeated AvailableDomain domains = 1;
}

message AvailablePort {
  int32 start_port = 1;
  int32 end_port = 2;
  PortPublicationProtocol protocol = 3;
}

message AvailablePorts {
  repeated AvailablePort available_ports = 1;
}

message ApplicationEnvVar {
  string key = 1;
  string value = 2;
  bool system = 3;
}

message ApplicationEnvVars {
  repeated ApplicationEnvVar variables = 1;
}

message Artifact {
  string id = 1;
  int64 size = 2;
  google.protobuf.Timestamp created_at = 3;
  neoshowcase.protobuf.NullTimestamp deleted_at = 4;
}

message ArtifactContent {
  string filename = 1;
  bytes content = 2;
}

message GetOutputRequest {
  string application_id = 1;
  // Leave empty to default to now
  google.protobuf.Timestamp before = 2;
}

message ApplicationOutput {
  google.protobuf.Timestamp time = 1;
  string log = 2;
}

message GetOutputResponse {
  repeated ApplicationOutput outputs = 1;
}

message GetOutputStreamRequest {
  string application_id = 1;
  google.protobuf.Timestamp after = 2;
}

message Build {
  enum BuildStatus {
    QUEUED = 0;
    BUILDING = 1;
    SUCCEEDED = 2;
    FAILED = 3;
    CANCELLED = 4;
    SKIPPED = 5;
  }
  string id = 1;
  string commit = 2;
  BuildStatus status = 3;
  google.protobuf.Timestamp queued_at = 4;
  neoshowcase.protobuf.NullTimestamp started_at = 5;
  neoshowcase.protobuf.NullTimestamp updated_at = 6;
  neoshowcase.protobuf.NullTimestamp finished_at = 7;
  bool retriable = 8;
  Artifact artifact = 9;
}

message BuildLog {
  bytes log = 1;
}

message GetRepositoriesResponse {
  repeated Repository repositories = 1;
}

message GetApplicationsResponse {
  repeated Application applications = 1;
}

message GetSystemPublicKeyResponse {
  string public_key = 1;
}

message ApplicationIdRequest {
  string id = 1;
}

message BuildIdRequest {
  string build_id = 1;
}

message ArtifactIdRequest {
  string artifact_id = 1;
}

message GetBuildsResponse {
  repeated Build builds = 1;
}

message SetApplicationEnvVarRequest {
  string application_id = 1;
  string key = 2;
  string value = 3;
}

message RetryCommitBuildRequest {
  string application_id = 1;
  string commit = 2;
}

service APIService {
  // General / System

  // GetSystemPublicKey システムのSSH公開鍵を取得します リポジトリごとにSSH秘密鍵を設定しないデフォルトSSH認証で使用します
  rpc GetSystemPublicKey(google.protobuf.Empty) returns (GetSystemPublicKeyResponse);
  // GetAvailableDomains 使用可能なドメイン一覧を取得します
  rpc GetAvailableDomains(google.protobuf.Empty) returns (AvailableDomains);
  // GetAvailablePorts 使用可能なポート一覧を取得します
  rpc GetAvailablePorts(google.protobuf.Empty) returns (AvailablePorts);

  // User

  // GetMe 自身の情報を取得します プロキシ認証のため常に成功します
  rpc GetMe(google.protobuf.Empty) returns (User);
  // GetUsers 全てのユーザーの情報を取得します
  rpc GetUsers(google.protobuf.Empty) returns (GetUsersResponse);
  // CreateUserKey アプリコンテナSSH用の公開鍵を登録します
  rpc CreateUserKey(CreateUserKeyRequest) returns (UserKey);
  // GetUserKeys 登録した公開鍵一覧を取得します
  rpc GetUserKeys(google.protobuf.Empty) returns (GetUserKeysResponse);
  // DeleteUserKey 登録した公開鍵を削除します
  rpc DeleteUserKey(DeleteUserKeyRequest) returns (google.protobuf.Empty);

  // Repository CRUD

  // CreateRepository リポジトリを登録します
  rpc CreateRepository(CreateRepositoryRequest) returns (Repository);
  // GetRepositories リポジトリ一覧を取得します
  rpc GetRepositories(google.protobuf.Empty) returns (GetRepositoriesResponse);
  // GetRepository リポジトリを取得します
  rpc GetRepository(RepositoryIdRequest) returns (Repository);
  // UpdateRepository リポジトリ情報を更新します
  rpc UpdateRepository(UpdateRepositoryRequest) returns (google.protobuf.Empty);
  // RefreshRepository 自動更新間隔を待たず、手動でリモートリポジトリの最新情報に追従させます
  rpc RefreshRepository(RepositoryIdRequest) returns (google.protobuf.Empty);
  // DeleteRepository リポジトリを削除します 関連する全てのアプリケーションの削除が必要です
  rpc DeleteRepository(RepositoryIdRequest) returns (google.protobuf.Empty);

  // Application CRUD

  // CreateApplication アプリを作成します
  rpc CreateApplication(CreateApplicationRequest) returns (Application);
  // GetApplications アプリ一覧を取得します
  rpc GetApplications(google.protobuf.Empty) returns (GetApplicationsResponse);
  // GetApplication アプリを取得します
  rpc GetApplication(ApplicationIdRequest) returns (Application);
  // UpdateApplication アプリ情報を更新します
  rpc UpdateApplication(UpdateApplicationRequest) returns (google.protobuf.Empty);
  // DeleteApplication アプリを削除します 先にアプリのシャットダウンが必要です
  rpc DeleteApplication(ApplicationIdRequest) returns (google.protobuf.Empty);

  // Application info / config

  // GetEnvVars アプリの環境変数を取得します
  rpc GetEnvVars(ApplicationIdRequest) returns (ApplicationEnvVars);
  // SetEnvVar アプリの環境変数をセットします システムによって設定された環境変数は上書きできません
  rpc SetEnvVar(SetApplicationEnvVarRequest) returns (google.protobuf.Empty);
  // GetOutput アプリの出力を取得します
  rpc GetOutput(GetOutputRequest) returns (GetOutputResponse);
  // GetOutputStream アプリの出力をストリーム形式で取得します
  rpc GetOutputStream(GetOutputStreamRequest) returns (stream ApplicationOutput);
  // StartApplication アプリを起動します 起動中の場合は再起動します
  rpc StartApplication(ApplicationIdRequest) returns (google.protobuf.Empty);
  // StopApplication アプリをシャットダウンします
  rpc StopApplication(ApplicationIdRequest) returns (google.protobuf.Empty);

  // Application builds

  // GetBuilds アプリのビルド一覧を取得します
  rpc GetBuilds(ApplicationIdRequest) returns (GetBuildsResponse);
  // GetBuild アプリのビルド情報を取得します
  rpc GetBuild(BuildIdRequest) returns (Build);
  // RetryCommitBuild アプリの該当コミットのビルドをやり直します
  rpc RetryCommitBuild(RetryCommitBuildRequest) returns (google.protobuf.Empty);
  // CancelBuild 該当ビルドが進行中の場合キャンセルします
  rpc CancelBuild(BuildIdRequest) returns (google.protobuf.Empty);
  // GetBuildLog 終了したビルドのログを取得します
  rpc GetBuildLog(BuildIdRequest) returns (BuildLog);
  // GetBuildLogStream ビルド中のログをストリーム形式で取得します
  rpc GetBuildLogStream(BuildIdRequest) returns (stream BuildLog);
  // GetBuildArtifact 静的サイトアプリの場合ビルド成果物（静的ファイルのtar）を取得します
  rpc GetBuildArtifact(ArtifactIdRequest) returns (ArtifactContent);
}
