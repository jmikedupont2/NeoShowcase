syntax = "proto3";
package neoshowcase.protobuf;
option go_package = "github.com/traPtitech/neoshowcase/pkg/interface/grpc/pb";

import "google/protobuf/empty.proto";
import "neoshowcase/protobuf/null.proto";

message User {
  string id = 1;
  string name = 2;
  bool admin = 3;
}

message Repository {
  string id = 1;
  string name = 2;
  string url = 3;
  string auth_method = 4;
}

message CreateRepositoryAuthBasic {
  string username = 1;
  string password = 2;
}

message CreateRepositoryAuthSSH {
  string ssh_key = 1;
}

message CreateRepositoryRequest {
  string name = 1;
  string url = 2;
  oneof auth {
    google.protobuf.Empty none = 3;
    CreateRepositoryAuthBasic basic = 4;
    CreateRepositoryAuthSSH ssh = 5;
  }
}

enum BuildType {
  RUNTIME = 0;
  STATIC = 1;
}

enum ApplicationState {
  IDLE = 0;
  DEPLOYING = 1;
  RUNNING = 2;
  ERRORED = 3;
}

enum AuthenticationType {
  OFF = 0;
  SOFT = 1;
  HARD = 2;
}

message ApplicationConfig {
  bool use_mariadb = 1;
  bool use_mongodb = 2;
  string base_image = 3;
  string dockerfile_name = 4;
  string artifact_path = 5;
  string build_cmd = 6;
  string entrypoint_cmd = 7;
  AuthenticationType authentication = 8;
}

message UpdateApplicationConfigRequest {
  string base_image = 1;
  string dockerfile_name = 2;
  string artifact_path = 3;
  string build_cmd = 4;
  string entrypoint_cmd = 5;
  AuthenticationType authentication = 6;
}

message Website {
  string id = 1;
  string fqdn = 2;
  string path_prefix = 3;
  bool strip_prefix = 4;
  bool https = 5;
  int32 http_port = 6;
}

message CreateWebsiteRequest {
  string fqdn = 1;
  string path_prefix = 2;
  bool strip_prefix = 3;
  bool https = 4;
  int32 http_port = 5;
}

message DeleteWebsiteRequest {
  string id = 1;
}

message Application {
  string id = 1;
  string name = 2;
  string repository_id = 3;
  string branch_name = 4;
  BuildType build_type = 5;
  ApplicationState state = 6;
  string current_commit = 7;
  string want_commit = 8;
  ApplicationConfig config = 9;
  repeated Website websites = 10;
  repeated string owner_ids = 11;
}

message AvailableDomain {
  string domain = 1;
  bool available = 2;
}

message AvailableDomains {
  repeated AvailableDomain domains = 1;
}

message ApplicationEnvVar {
  string key = 1;
  string value = 2;
  bool system = 3;
}

message ApplicationEnvVars {
  repeated ApplicationEnvVar variables = 1;
}

message ApplicationBuildArtifact {
  string url = 1;
}

message ApplicationOutput {
  string output = 1;
}

message Build {
  enum BuildStatus {
    BUILDING = 0;
    SUCCEEDED = 1;
    FAILED = 2;
    CANCELLED = 3;
    QUEUED = 4;
    SKIPPED = 5;
  }
  string id = 1;
  string commit = 2;
  BuildStatus status = 3;
  neoshowcase.protobuf.NullTimestamp started_at = 4;
  neoshowcase.protobuf.NullTimestamp updated_at = 5;
  neoshowcase.protobuf.NullTimestamp finished_at = 6;
  bool retriable = 7;
}

message BuildLog {
  string output = 1;
}

message GetRepositoriesResponse {
  repeated Repository repositories = 1;
}

message GetApplicationsResponse {
  repeated Application applications = 1;
}

message GetSystemPublicKeyResponse {
  string public_key = 1;
}

message CreateApplicationRequest {
  string name = 1;
  string repository_id = 2;
  string branch_name = 3;
  BuildType build_type = 4;
  ApplicationConfig config = 5;
  repeated CreateWebsiteRequest websites = 6;
  bool start_on_create = 7;
}

message UpdateApplicationRequest {
  string id = 1;
  string name = 2;
  string branch_name = 3;
  UpdateApplicationConfigRequest config = 4;
  repeated CreateWebsiteRequest new_websites = 5;
  repeated DeleteWebsiteRequest delete_websites = 6;
  repeated string owner_ids = 7;
}

message ApplicationIdRequest {
  string id = 1;
}

message GetApplicationBuildsResponse {
  repeated Build builds = 1;
}

message GetApplicationBuildRequest {
  string build_id = 1;
}

message GetApplicationBuildLogRequest {
  string build_id = 1;
}

message SetApplicationEnvVarRequest {
  string application_id = 1;
  string key = 2;
  string value = 3;
}

message CancelBuildRequest {
  string build_id = 1;
}

message RetryCommitBuildRequest {
  string application_id = 1;
  string commit = 2;
}

service ApplicationService {
  rpc GetMe(google.protobuf.Empty) returns (User);
  rpc GetRepositories(google.protobuf.Empty) returns (GetRepositoriesResponse);
  rpc CreateRepository(CreateRepositoryRequest) returns (Repository);
  rpc GetApplications(google.protobuf.Empty) returns (GetApplicationsResponse);
  rpc GetSystemPublicKey(google.protobuf.Empty) returns (GetSystemPublicKeyResponse);
  rpc GetAvailableDomains(google.protobuf.Empty) returns (AvailableDomains);
  rpc AddAvailableDomain(AvailableDomain) returns (google.protobuf.Empty);
  rpc CreateApplication(CreateApplicationRequest) returns (Application);
  rpc GetApplication(ApplicationIdRequest) returns (Application);
  rpc UpdateApplication(UpdateApplicationRequest) returns (google.protobuf.Empty);
  rpc DeleteApplication(ApplicationIdRequest) returns (google.protobuf.Empty);
  rpc GetApplicationBuilds(ApplicationIdRequest) returns (GetApplicationBuildsResponse);
  rpc GetApplicationBuild(GetApplicationBuildRequest) returns (Build);
  rpc GetApplicationBuildLog(GetApplicationBuildLogRequest) returns (BuildLog);
  rpc GetApplicationBuildArtifact(ApplicationIdRequest) returns (ApplicationBuildArtifact);
  rpc GetApplicationEnvVars(ApplicationIdRequest) returns (ApplicationEnvVars);
  rpc SetApplicationEnvVar(SetApplicationEnvVarRequest) returns (google.protobuf.Empty);
  rpc GetApplicationOutput(ApplicationIdRequest) returns (ApplicationOutput);
  rpc CancelBuild(CancelBuildRequest) returns (google.protobuf.Empty);
  rpc RetryCommitBuild(RetryCommitBuildRequest) returns (google.protobuf.Empty);
  rpc StartApplication(ApplicationIdRequest) returns (google.protobuf.Empty);
  rpc StopApplication(ApplicationIdRequest) returns (google.protobuf.Empty);
}
