// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neoshowcase/protobuf/apiserver.proto

package pbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pb "github.com/traPtitech/neoshowcase/pkg/interface/grpc/pb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "neoshowcase.protobuf.ApplicationService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ApplicationServiceGetMeProcedure is the fully-qualified name of the ApplicationService's GetMe
	// RPC.
	ApplicationServiceGetMeProcedure = "/neoshowcase.protobuf.ApplicationService/GetMe"
	// ApplicationServiceGetRepositoriesProcedure is the fully-qualified name of the
	// ApplicationService's GetRepositories RPC.
	ApplicationServiceGetRepositoriesProcedure = "/neoshowcase.protobuf.ApplicationService/GetRepositories"
	// ApplicationServiceCreateRepositoryProcedure is the fully-qualified name of the
	// ApplicationService's CreateRepository RPC.
	ApplicationServiceCreateRepositoryProcedure = "/neoshowcase.protobuf.ApplicationService/CreateRepository"
	// ApplicationServiceGetApplicationsProcedure is the fully-qualified name of the
	// ApplicationService's GetApplications RPC.
	ApplicationServiceGetApplicationsProcedure = "/neoshowcase.protobuf.ApplicationService/GetApplications"
	// ApplicationServiceGetSystemPublicKeyProcedure is the fully-qualified name of the
	// ApplicationService's GetSystemPublicKey RPC.
	ApplicationServiceGetSystemPublicKeyProcedure = "/neoshowcase.protobuf.ApplicationService/GetSystemPublicKey"
	// ApplicationServiceGetAvailableDomainsProcedure is the fully-qualified name of the
	// ApplicationService's GetAvailableDomains RPC.
	ApplicationServiceGetAvailableDomainsProcedure = "/neoshowcase.protobuf.ApplicationService/GetAvailableDomains"
	// ApplicationServiceAddAvailableDomainProcedure is the fully-qualified name of the
	// ApplicationService's AddAvailableDomain RPC.
	ApplicationServiceAddAvailableDomainProcedure = "/neoshowcase.protobuf.ApplicationService/AddAvailableDomain"
	// ApplicationServiceCreateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's CreateApplication RPC.
	ApplicationServiceCreateApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/CreateApplication"
	// ApplicationServiceGetApplicationProcedure is the fully-qualified name of the ApplicationService's
	// GetApplication RPC.
	ApplicationServiceGetApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/GetApplication"
	// ApplicationServiceUpdateApplicationProcedure is the fully-qualified name of the
	// ApplicationService's UpdateApplication RPC.
	ApplicationServiceUpdateApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/UpdateApplication"
	// ApplicationServiceDeleteApplicationProcedure is the fully-qualified name of the
	// ApplicationService's DeleteApplication RPC.
	ApplicationServiceDeleteApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/DeleteApplication"
	// ApplicationServiceGetBuildsProcedure is the fully-qualified name of the ApplicationService's
	// GetBuilds RPC.
	ApplicationServiceGetBuildsProcedure = "/neoshowcase.protobuf.ApplicationService/GetBuilds"
	// ApplicationServiceGetBuildProcedure is the fully-qualified name of the ApplicationService's
	// GetBuild RPC.
	ApplicationServiceGetBuildProcedure = "/neoshowcase.protobuf.ApplicationService/GetBuild"
	// ApplicationServiceGetBuildLogStreamProcedure is the fully-qualified name of the
	// ApplicationService's GetBuildLogStream RPC.
	ApplicationServiceGetBuildLogStreamProcedure = "/neoshowcase.protobuf.ApplicationService/GetBuildLogStream"
	// ApplicationServiceGetBuildLogProcedure is the fully-qualified name of the ApplicationService's
	// GetBuildLog RPC.
	ApplicationServiceGetBuildLogProcedure = "/neoshowcase.protobuf.ApplicationService/GetBuildLog"
	// ApplicationServiceGetBuildArtifactProcedure is the fully-qualified name of the
	// ApplicationService's GetBuildArtifact RPC.
	ApplicationServiceGetBuildArtifactProcedure = "/neoshowcase.protobuf.ApplicationService/GetBuildArtifact"
	// ApplicationServiceGetEnvVarsProcedure is the fully-qualified name of the ApplicationService's
	// GetEnvVars RPC.
	ApplicationServiceGetEnvVarsProcedure = "/neoshowcase.protobuf.ApplicationService/GetEnvVars"
	// ApplicationServiceSetEnvVarProcedure is the fully-qualified name of the ApplicationService's
	// SetEnvVar RPC.
	ApplicationServiceSetEnvVarProcedure = "/neoshowcase.protobuf.ApplicationService/SetEnvVar"
	// ApplicationServiceGetApplicationOutputProcedure is the fully-qualified name of the
	// ApplicationService's GetApplicationOutput RPC.
	ApplicationServiceGetApplicationOutputProcedure = "/neoshowcase.protobuf.ApplicationService/GetApplicationOutput"
	// ApplicationServiceCancelBuildProcedure is the fully-qualified name of the ApplicationService's
	// CancelBuild RPC.
	ApplicationServiceCancelBuildProcedure = "/neoshowcase.protobuf.ApplicationService/CancelBuild"
	// ApplicationServiceRetryCommitBuildProcedure is the fully-qualified name of the
	// ApplicationService's RetryCommitBuild RPC.
	ApplicationServiceRetryCommitBuildProcedure = "/neoshowcase.protobuf.ApplicationService/RetryCommitBuild"
	// ApplicationServiceStartApplicationProcedure is the fully-qualified name of the
	// ApplicationService's StartApplication RPC.
	ApplicationServiceStartApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/StartApplication"
	// ApplicationServiceStopApplicationProcedure is the fully-qualified name of the
	// ApplicationService's StopApplication RPC.
	ApplicationServiceStopApplicationProcedure = "/neoshowcase.protobuf.ApplicationService/StopApplication"
)

// ApplicationServiceClient is a client for the neoshowcase.protobuf.ApplicationService service.
type ApplicationServiceClient interface {
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error)
	GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error)
	GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.ServerStreamForClient[pb.BuildLog], error)
	GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error)
	GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error)
	GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error)
	CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApplicationServiceClient constructs a client for the neoshowcase.protobuf.ApplicationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &applicationServiceClient{
		getMe: connect_go.NewClient[emptypb.Empty, pb.User](
			httpClient,
			baseURL+ApplicationServiceGetMeProcedure,
			opts...,
		),
		getRepositories: connect_go.NewClient[emptypb.Empty, pb.GetRepositoriesResponse](
			httpClient,
			baseURL+ApplicationServiceGetRepositoriesProcedure,
			opts...,
		),
		createRepository: connect_go.NewClient[pb.CreateRepositoryRequest, pb.Repository](
			httpClient,
			baseURL+ApplicationServiceCreateRepositoryProcedure,
			opts...,
		),
		getApplications: connect_go.NewClient[emptypb.Empty, pb.GetApplicationsResponse](
			httpClient,
			baseURL+ApplicationServiceGetApplicationsProcedure,
			opts...,
		),
		getSystemPublicKey: connect_go.NewClient[emptypb.Empty, pb.GetSystemPublicKeyResponse](
			httpClient,
			baseURL+ApplicationServiceGetSystemPublicKeyProcedure,
			opts...,
		),
		getAvailableDomains: connect_go.NewClient[emptypb.Empty, pb.AvailableDomains](
			httpClient,
			baseURL+ApplicationServiceGetAvailableDomainsProcedure,
			opts...,
		),
		addAvailableDomain: connect_go.NewClient[pb.AvailableDomain, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceAddAvailableDomainProcedure,
			opts...,
		),
		createApplication: connect_go.NewClient[pb.CreateApplicationRequest, pb.Application](
			httpClient,
			baseURL+ApplicationServiceCreateApplicationProcedure,
			opts...,
		),
		getApplication: connect_go.NewClient[pb.ApplicationIdRequest, pb.Application](
			httpClient,
			baseURL+ApplicationServiceGetApplicationProcedure,
			opts...,
		),
		updateApplication: connect_go.NewClient[pb.UpdateApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceUpdateApplicationProcedure,
			opts...,
		),
		deleteApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceDeleteApplicationProcedure,
			opts...,
		),
		getBuilds: connect_go.NewClient[pb.ApplicationIdRequest, pb.GetBuildsResponse](
			httpClient,
			baseURL+ApplicationServiceGetBuildsProcedure,
			opts...,
		),
		getBuild: connect_go.NewClient[pb.BuildIdRequest, pb.Build](
			httpClient,
			baseURL+ApplicationServiceGetBuildProcedure,
			opts...,
		),
		getBuildLogStream: connect_go.NewClient[pb.BuildIdRequest, pb.BuildLog](
			httpClient,
			baseURL+ApplicationServiceGetBuildLogStreamProcedure,
			opts...,
		),
		getBuildLog: connect_go.NewClient[pb.BuildIdRequest, pb.BuildLog](
			httpClient,
			baseURL+ApplicationServiceGetBuildLogProcedure,
			opts...,
		),
		getBuildArtifact: connect_go.NewClient[pb.ArtifactIdRequest, pb.ArtifactContent](
			httpClient,
			baseURL+ApplicationServiceGetBuildArtifactProcedure,
			opts...,
		),
		getEnvVars: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationEnvVars](
			httpClient,
			baseURL+ApplicationServiceGetEnvVarsProcedure,
			opts...,
		),
		setEnvVar: connect_go.NewClient[pb.SetApplicationEnvVarRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceSetEnvVarProcedure,
			opts...,
		),
		getApplicationOutput: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationOutput](
			httpClient,
			baseURL+ApplicationServiceGetApplicationOutputProcedure,
			opts...,
		),
		cancelBuild: connect_go.NewClient[pb.BuildIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceCancelBuildProcedure,
			opts...,
		),
		retryCommitBuild: connect_go.NewClient[pb.RetryCommitBuildRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceRetryCommitBuildProcedure,
			opts...,
		),
		startApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceStartApplicationProcedure,
			opts...,
		),
		stopApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+ApplicationServiceStopApplicationProcedure,
			opts...,
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	getMe                *connect_go.Client[emptypb.Empty, pb.User]
	getRepositories      *connect_go.Client[emptypb.Empty, pb.GetRepositoriesResponse]
	createRepository     *connect_go.Client[pb.CreateRepositoryRequest, pb.Repository]
	getApplications      *connect_go.Client[emptypb.Empty, pb.GetApplicationsResponse]
	getSystemPublicKey   *connect_go.Client[emptypb.Empty, pb.GetSystemPublicKeyResponse]
	getAvailableDomains  *connect_go.Client[emptypb.Empty, pb.AvailableDomains]
	addAvailableDomain   *connect_go.Client[pb.AvailableDomain, emptypb.Empty]
	createApplication    *connect_go.Client[pb.CreateApplicationRequest, pb.Application]
	getApplication       *connect_go.Client[pb.ApplicationIdRequest, pb.Application]
	updateApplication    *connect_go.Client[pb.UpdateApplicationRequest, emptypb.Empty]
	deleteApplication    *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	getBuilds            *connect_go.Client[pb.ApplicationIdRequest, pb.GetBuildsResponse]
	getBuild             *connect_go.Client[pb.BuildIdRequest, pb.Build]
	getBuildLogStream    *connect_go.Client[pb.BuildIdRequest, pb.BuildLog]
	getBuildLog          *connect_go.Client[pb.BuildIdRequest, pb.BuildLog]
	getBuildArtifact     *connect_go.Client[pb.ArtifactIdRequest, pb.ArtifactContent]
	getEnvVars           *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationEnvVars]
	setEnvVar            *connect_go.Client[pb.SetApplicationEnvVarRequest, emptypb.Empty]
	getApplicationOutput *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationOutput]
	cancelBuild          *connect_go.Client[pb.BuildIdRequest, emptypb.Empty]
	retryCommitBuild     *connect_go.Client[pb.RetryCommitBuildRequest, emptypb.Empty]
	startApplication     *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	stopApplication      *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
}

// GetMe calls neoshowcase.protobuf.ApplicationService.GetMe.
func (c *applicationServiceClient) GetMe(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetRepositories calls neoshowcase.protobuf.ApplicationService.GetRepositories.
func (c *applicationServiceClient) GetRepositories(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// CreateRepository calls neoshowcase.protobuf.ApplicationService.CreateRepository.
func (c *applicationServiceClient) CreateRepository(ctx context.Context, req *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return c.createRepository.CallUnary(ctx, req)
}

// GetApplications calls neoshowcase.protobuf.ApplicationService.GetApplications.
func (c *applicationServiceClient) GetApplications(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return c.getApplications.CallUnary(ctx, req)
}

// GetSystemPublicKey calls neoshowcase.protobuf.ApplicationService.GetSystemPublicKey.
func (c *applicationServiceClient) GetSystemPublicKey(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return c.getSystemPublicKey.CallUnary(ctx, req)
}

// GetAvailableDomains calls neoshowcase.protobuf.ApplicationService.GetAvailableDomains.
func (c *applicationServiceClient) GetAvailableDomains(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return c.getAvailableDomains.CallUnary(ctx, req)
}

// AddAvailableDomain calls neoshowcase.protobuf.ApplicationService.AddAvailableDomain.
func (c *applicationServiceClient) AddAvailableDomain(ctx context.Context, req *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addAvailableDomain.CallUnary(ctx, req)
}

// CreateApplication calls neoshowcase.protobuf.ApplicationService.CreateApplication.
func (c *applicationServiceClient) CreateApplication(ctx context.Context, req *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls neoshowcase.protobuf.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls neoshowcase.protobuf.ApplicationService.UpdateApplication.
func (c *applicationServiceClient) UpdateApplication(ctx context.Context, req *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls neoshowcase.protobuf.ApplicationService.DeleteApplication.
func (c *applicationServiceClient) DeleteApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// GetBuilds calls neoshowcase.protobuf.ApplicationService.GetBuilds.
func (c *applicationServiceClient) GetBuilds(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error) {
	return c.getBuilds.CallUnary(ctx, req)
}

// GetBuild calls neoshowcase.protobuf.ApplicationService.GetBuild.
func (c *applicationServiceClient) GetBuild(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error) {
	return c.getBuild.CallUnary(ctx, req)
}

// GetBuildLogStream calls neoshowcase.protobuf.ApplicationService.GetBuildLogStream.
func (c *applicationServiceClient) GetBuildLogStream(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.ServerStreamForClient[pb.BuildLog], error) {
	return c.getBuildLogStream.CallServerStream(ctx, req)
}

// GetBuildLog calls neoshowcase.protobuf.ApplicationService.GetBuildLog.
func (c *applicationServiceClient) GetBuildLog(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return c.getBuildLog.CallUnary(ctx, req)
}

// GetBuildArtifact calls neoshowcase.protobuf.ApplicationService.GetBuildArtifact.
func (c *applicationServiceClient) GetBuildArtifact(ctx context.Context, req *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error) {
	return c.getBuildArtifact.CallUnary(ctx, req)
}

// GetEnvVars calls neoshowcase.protobuf.ApplicationService.GetEnvVars.
func (c *applicationServiceClient) GetEnvVars(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return c.getEnvVars.CallUnary(ctx, req)
}

// SetEnvVar calls neoshowcase.protobuf.ApplicationService.SetEnvVar.
func (c *applicationServiceClient) SetEnvVar(ctx context.Context, req *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setEnvVar.CallUnary(ctx, req)
}

// GetApplicationOutput calls neoshowcase.protobuf.ApplicationService.GetApplicationOutput.
func (c *applicationServiceClient) GetApplicationOutput(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error) {
	return c.getApplicationOutput.CallUnary(ctx, req)
}

// CancelBuild calls neoshowcase.protobuf.ApplicationService.CancelBuild.
func (c *applicationServiceClient) CancelBuild(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.cancelBuild.CallUnary(ctx, req)
}

// RetryCommitBuild calls neoshowcase.protobuf.ApplicationService.RetryCommitBuild.
func (c *applicationServiceClient) RetryCommitBuild(ctx context.Context, req *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.retryCommitBuild.CallUnary(ctx, req)
}

// StartApplication calls neoshowcase.protobuf.ApplicationService.StartApplication.
func (c *applicationServiceClient) StartApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.startApplication.CallUnary(ctx, req)
}

// StopApplication calls neoshowcase.protobuf.ApplicationService.StopApplication.
func (c *applicationServiceClient) StopApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.stopApplication.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the neoshowcase.protobuf.ApplicationService
// service.
type ApplicationServiceHandler interface {
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error)
	GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error)
	GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest], *connect_go.ServerStream[pb.BuildLog]) error
	GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error)
	GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error)
	GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error)
	CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(ApplicationServiceGetMeProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetMeProcedure,
		svc.GetMe,
		opts...,
	))
	mux.Handle(ApplicationServiceGetRepositoriesProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetRepositoriesProcedure,
		svc.GetRepositories,
		opts...,
	))
	mux.Handle(ApplicationServiceCreateRepositoryProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceCreateRepositoryProcedure,
		svc.CreateRepository,
		opts...,
	))
	mux.Handle(ApplicationServiceGetApplicationsProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetApplicationsProcedure,
		svc.GetApplications,
		opts...,
	))
	mux.Handle(ApplicationServiceGetSystemPublicKeyProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetSystemPublicKeyProcedure,
		svc.GetSystemPublicKey,
		opts...,
	))
	mux.Handle(ApplicationServiceGetAvailableDomainsProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetAvailableDomainsProcedure,
		svc.GetAvailableDomains,
		opts...,
	))
	mux.Handle(ApplicationServiceAddAvailableDomainProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceAddAvailableDomainProcedure,
		svc.AddAvailableDomain,
		opts...,
	))
	mux.Handle(ApplicationServiceCreateApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceCreateApplicationProcedure,
		svc.CreateApplication,
		opts...,
	))
	mux.Handle(ApplicationServiceGetApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetApplicationProcedure,
		svc.GetApplication,
		opts...,
	))
	mux.Handle(ApplicationServiceUpdateApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceUpdateApplicationProcedure,
		svc.UpdateApplication,
		opts...,
	))
	mux.Handle(ApplicationServiceDeleteApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		opts...,
	))
	mux.Handle(ApplicationServiceGetBuildsProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetBuildsProcedure,
		svc.GetBuilds,
		opts...,
	))
	mux.Handle(ApplicationServiceGetBuildProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetBuildProcedure,
		svc.GetBuild,
		opts...,
	))
	mux.Handle(ApplicationServiceGetBuildLogStreamProcedure, connect_go.NewServerStreamHandler(
		ApplicationServiceGetBuildLogStreamProcedure,
		svc.GetBuildLogStream,
		opts...,
	))
	mux.Handle(ApplicationServiceGetBuildLogProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetBuildLogProcedure,
		svc.GetBuildLog,
		opts...,
	))
	mux.Handle(ApplicationServiceGetBuildArtifactProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetBuildArtifactProcedure,
		svc.GetBuildArtifact,
		opts...,
	))
	mux.Handle(ApplicationServiceGetEnvVarsProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetEnvVarsProcedure,
		svc.GetEnvVars,
		opts...,
	))
	mux.Handle(ApplicationServiceSetEnvVarProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceSetEnvVarProcedure,
		svc.SetEnvVar,
		opts...,
	))
	mux.Handle(ApplicationServiceGetApplicationOutputProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceGetApplicationOutputProcedure,
		svc.GetApplicationOutput,
		opts...,
	))
	mux.Handle(ApplicationServiceCancelBuildProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceCancelBuildProcedure,
		svc.CancelBuild,
		opts...,
	))
	mux.Handle(ApplicationServiceRetryCommitBuildProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceRetryCommitBuildProcedure,
		svc.RetryCommitBuild,
		opts...,
	))
	mux.Handle(ApplicationServiceStartApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceStartApplicationProcedure,
		svc.StartApplication,
		opts...,
	))
	mux.Handle(ApplicationServiceStopApplicationProcedure, connect_go.NewUnaryHandler(
		ApplicationServiceStopApplicationProcedure,
		svc.StopApplication,
		opts...,
	))
	return "/neoshowcase.protobuf.ApplicationService/", mux
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetMe is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetRepositories is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CreateRepository is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetSystemPublicKey is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetAvailableDomains is not implemented"))
}

func (UnimplementedApplicationServiceHandler) AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.AddAvailableDomain is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CreateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.UpdateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.DeleteApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetBuilds is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest], *connect_go.ServerStream[pb.BuildLog]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetBuildLogStream is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetBuildLog is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetBuildArtifact is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetEnvVars is not implemented"))
}

func (UnimplementedApplicationServiceHandler) SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.SetEnvVar is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationOutput is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CancelBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.RetryCommitBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.StartApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.StopApplication is not implemented"))
}
