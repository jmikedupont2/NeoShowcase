// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neoshowcase/protobuf/apiserver.proto

package pbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pb "github.com/traPtitech/neoshowcase/pkg/interface/grpc/pb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ApplicationServiceName is the fully-qualified name of the ApplicationService service.
	ApplicationServiceName = "neoshowcase.protobuf.ApplicationService"
)

// ApplicationServiceClient is a client for the neoshowcase.protobuf.ApplicationService service.
type ApplicationServiceClient interface {
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetApplicationBuildsResponse], error)
	GetApplicationBuild(context.Context, *connect_go.Request[pb.GetApplicationBuildRequest]) (*connect_go.Response[pb.Build], error)
	GetApplicationBuildLog(context.Context, *connect_go.Request[pb.GetApplicationBuildLogRequest]) (*connect_go.Response[pb.BuildLog], error)
	GetApplicationBuildArtifact(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationBuildArtifact], error)
	GetApplicationEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	SetApplicationEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error)
	CancelBuild(context.Context, *connect_go.Request[pb.CancelBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApplicationServiceClient constructs a client for the neoshowcase.protobuf.ApplicationService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewApplicationServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ApplicationServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &applicationServiceClient{
		getMe: connect_go.NewClient[emptypb.Empty, pb.User](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetMe",
			opts...,
		),
		getRepositories: connect_go.NewClient[emptypb.Empty, pb.GetRepositoriesResponse](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetRepositories",
			opts...,
		),
		createRepository: connect_go.NewClient[pb.CreateRepositoryRequest, pb.Repository](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/CreateRepository",
			opts...,
		),
		getApplications: connect_go.NewClient[emptypb.Empty, pb.GetApplicationsResponse](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplications",
			opts...,
		),
		getSystemPublicKey: connect_go.NewClient[emptypb.Empty, pb.GetSystemPublicKeyResponse](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetSystemPublicKey",
			opts...,
		),
		getAvailableDomains: connect_go.NewClient[emptypb.Empty, pb.AvailableDomains](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetAvailableDomains",
			opts...,
		),
		addAvailableDomain: connect_go.NewClient[pb.AvailableDomain, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/AddAvailableDomain",
			opts...,
		),
		createApplication: connect_go.NewClient[pb.CreateApplicationRequest, pb.Application](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/CreateApplication",
			opts...,
		),
		getApplication: connect_go.NewClient[pb.ApplicationIdRequest, pb.Application](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplication",
			opts...,
		),
		updateApplication: connect_go.NewClient[pb.UpdateApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/UpdateApplication",
			opts...,
		),
		deleteApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/DeleteApplication",
			opts...,
		),
		getApplicationBuilds: connect_go.NewClient[pb.ApplicationIdRequest, pb.GetApplicationBuildsResponse](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationBuilds",
			opts...,
		),
		getApplicationBuild: connect_go.NewClient[pb.GetApplicationBuildRequest, pb.Build](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationBuild",
			opts...,
		),
		getApplicationBuildLog: connect_go.NewClient[pb.GetApplicationBuildLogRequest, pb.BuildLog](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationBuildLog",
			opts...,
		),
		getApplicationBuildArtifact: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationBuildArtifact](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationBuildArtifact",
			opts...,
		),
		getApplicationEnvVars: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationEnvVars](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationEnvVars",
			opts...,
		),
		setApplicationEnvVar: connect_go.NewClient[pb.SetApplicationEnvVarRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/SetApplicationEnvVar",
			opts...,
		),
		getApplicationOutput: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationOutput](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/GetApplicationOutput",
			opts...,
		),
		cancelBuild: connect_go.NewClient[pb.CancelBuildRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/CancelBuild",
			opts...,
		),
		retryCommitBuild: connect_go.NewClient[pb.RetryCommitBuildRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/RetryCommitBuild",
			opts...,
		),
		startApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/StartApplication",
			opts...,
		),
		stopApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+"/neoshowcase.protobuf.ApplicationService/StopApplication",
			opts...,
		),
	}
}

// applicationServiceClient implements ApplicationServiceClient.
type applicationServiceClient struct {
	getMe                       *connect_go.Client[emptypb.Empty, pb.User]
	getRepositories             *connect_go.Client[emptypb.Empty, pb.GetRepositoriesResponse]
	createRepository            *connect_go.Client[pb.CreateRepositoryRequest, pb.Repository]
	getApplications             *connect_go.Client[emptypb.Empty, pb.GetApplicationsResponse]
	getSystemPublicKey          *connect_go.Client[emptypb.Empty, pb.GetSystemPublicKeyResponse]
	getAvailableDomains         *connect_go.Client[emptypb.Empty, pb.AvailableDomains]
	addAvailableDomain          *connect_go.Client[pb.AvailableDomain, emptypb.Empty]
	createApplication           *connect_go.Client[pb.CreateApplicationRequest, pb.Application]
	getApplication              *connect_go.Client[pb.ApplicationIdRequest, pb.Application]
	updateApplication           *connect_go.Client[pb.UpdateApplicationRequest, emptypb.Empty]
	deleteApplication           *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	getApplicationBuilds        *connect_go.Client[pb.ApplicationIdRequest, pb.GetApplicationBuildsResponse]
	getApplicationBuild         *connect_go.Client[pb.GetApplicationBuildRequest, pb.Build]
	getApplicationBuildLog      *connect_go.Client[pb.GetApplicationBuildLogRequest, pb.BuildLog]
	getApplicationBuildArtifact *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationBuildArtifact]
	getApplicationEnvVars       *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationEnvVars]
	setApplicationEnvVar        *connect_go.Client[pb.SetApplicationEnvVarRequest, emptypb.Empty]
	getApplicationOutput        *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationOutput]
	cancelBuild                 *connect_go.Client[pb.CancelBuildRequest, emptypb.Empty]
	retryCommitBuild            *connect_go.Client[pb.RetryCommitBuildRequest, emptypb.Empty]
	startApplication            *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	stopApplication             *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
}

// GetMe calls neoshowcase.protobuf.ApplicationService.GetMe.
func (c *applicationServiceClient) GetMe(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return c.getMe.CallUnary(ctx, req)
}

// GetRepositories calls neoshowcase.protobuf.ApplicationService.GetRepositories.
func (c *applicationServiceClient) GetRepositories(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// CreateRepository calls neoshowcase.protobuf.ApplicationService.CreateRepository.
func (c *applicationServiceClient) CreateRepository(ctx context.Context, req *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return c.createRepository.CallUnary(ctx, req)
}

// GetApplications calls neoshowcase.protobuf.ApplicationService.GetApplications.
func (c *applicationServiceClient) GetApplications(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return c.getApplications.CallUnary(ctx, req)
}

// GetSystemPublicKey calls neoshowcase.protobuf.ApplicationService.GetSystemPublicKey.
func (c *applicationServiceClient) GetSystemPublicKey(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return c.getSystemPublicKey.CallUnary(ctx, req)
}

// GetAvailableDomains calls neoshowcase.protobuf.ApplicationService.GetAvailableDomains.
func (c *applicationServiceClient) GetAvailableDomains(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return c.getAvailableDomains.CallUnary(ctx, req)
}

// AddAvailableDomain calls neoshowcase.protobuf.ApplicationService.AddAvailableDomain.
func (c *applicationServiceClient) AddAvailableDomain(ctx context.Context, req *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addAvailableDomain.CallUnary(ctx, req)
}

// CreateApplication calls neoshowcase.protobuf.ApplicationService.CreateApplication.
func (c *applicationServiceClient) CreateApplication(ctx context.Context, req *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplication calls neoshowcase.protobuf.ApplicationService.GetApplication.
func (c *applicationServiceClient) GetApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls neoshowcase.protobuf.ApplicationService.UpdateApplication.
func (c *applicationServiceClient) UpdateApplication(ctx context.Context, req *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls neoshowcase.protobuf.ApplicationService.DeleteApplication.
func (c *applicationServiceClient) DeleteApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// GetApplicationBuilds calls neoshowcase.protobuf.ApplicationService.GetApplicationBuilds.
func (c *applicationServiceClient) GetApplicationBuilds(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetApplicationBuildsResponse], error) {
	return c.getApplicationBuilds.CallUnary(ctx, req)
}

// GetApplicationBuild calls neoshowcase.protobuf.ApplicationService.GetApplicationBuild.
func (c *applicationServiceClient) GetApplicationBuild(ctx context.Context, req *connect_go.Request[pb.GetApplicationBuildRequest]) (*connect_go.Response[pb.Build], error) {
	return c.getApplicationBuild.CallUnary(ctx, req)
}

// GetApplicationBuildLog calls neoshowcase.protobuf.ApplicationService.GetApplicationBuildLog.
func (c *applicationServiceClient) GetApplicationBuildLog(ctx context.Context, req *connect_go.Request[pb.GetApplicationBuildLogRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return c.getApplicationBuildLog.CallUnary(ctx, req)
}

// GetApplicationBuildArtifact calls
// neoshowcase.protobuf.ApplicationService.GetApplicationBuildArtifact.
func (c *applicationServiceClient) GetApplicationBuildArtifact(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationBuildArtifact], error) {
	return c.getApplicationBuildArtifact.CallUnary(ctx, req)
}

// GetApplicationEnvVars calls neoshowcase.protobuf.ApplicationService.GetApplicationEnvVars.
func (c *applicationServiceClient) GetApplicationEnvVars(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return c.getApplicationEnvVars.CallUnary(ctx, req)
}

// SetApplicationEnvVar calls neoshowcase.protobuf.ApplicationService.SetApplicationEnvVar.
func (c *applicationServiceClient) SetApplicationEnvVar(ctx context.Context, req *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setApplicationEnvVar.CallUnary(ctx, req)
}

// GetApplicationOutput calls neoshowcase.protobuf.ApplicationService.GetApplicationOutput.
func (c *applicationServiceClient) GetApplicationOutput(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error) {
	return c.getApplicationOutput.CallUnary(ctx, req)
}

// CancelBuild calls neoshowcase.protobuf.ApplicationService.CancelBuild.
func (c *applicationServiceClient) CancelBuild(ctx context.Context, req *connect_go.Request[pb.CancelBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.cancelBuild.CallUnary(ctx, req)
}

// RetryCommitBuild calls neoshowcase.protobuf.ApplicationService.RetryCommitBuild.
func (c *applicationServiceClient) RetryCommitBuild(ctx context.Context, req *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.retryCommitBuild.CallUnary(ctx, req)
}

// StartApplication calls neoshowcase.protobuf.ApplicationService.StartApplication.
func (c *applicationServiceClient) StartApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.startApplication.CallUnary(ctx, req)
}

// StopApplication calls neoshowcase.protobuf.ApplicationService.StopApplication.
func (c *applicationServiceClient) StopApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.stopApplication.CallUnary(ctx, req)
}

// ApplicationServiceHandler is an implementation of the neoshowcase.protobuf.ApplicationService
// service.
type ApplicationServiceHandler interface {
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetApplicationBuildsResponse], error)
	GetApplicationBuild(context.Context, *connect_go.Request[pb.GetApplicationBuildRequest]) (*connect_go.Response[pb.Build], error)
	GetApplicationBuildLog(context.Context, *connect_go.Request[pb.GetApplicationBuildLogRequest]) (*connect_go.Response[pb.BuildLog], error)
	GetApplicationBuildArtifact(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationBuildArtifact], error)
	GetApplicationEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	SetApplicationEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error)
	CancelBuild(context.Context, *connect_go.Request[pb.CancelBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
}

// NewApplicationServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewApplicationServiceHandler(svc ApplicationServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetMe", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetMe",
		svc.GetMe,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetRepositories", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetRepositories",
		svc.GetRepositories,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/CreateRepository", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/CreateRepository",
		svc.CreateRepository,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplications", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplications",
		svc.GetApplications,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetSystemPublicKey", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetSystemPublicKey",
		svc.GetSystemPublicKey,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetAvailableDomains", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetAvailableDomains",
		svc.GetAvailableDomains,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/AddAvailableDomain", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/AddAvailableDomain",
		svc.AddAvailableDomain,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/CreateApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/CreateApplication",
		svc.CreateApplication,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplication",
		svc.GetApplication,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/UpdateApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/UpdateApplication",
		svc.UpdateApplication,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/DeleteApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/DeleteApplication",
		svc.DeleteApplication,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationBuilds", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationBuilds",
		svc.GetApplicationBuilds,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationBuild", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationBuild",
		svc.GetApplicationBuild,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationBuildLog", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationBuildLog",
		svc.GetApplicationBuildLog,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationBuildArtifact", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationBuildArtifact",
		svc.GetApplicationBuildArtifact,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationEnvVars", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationEnvVars",
		svc.GetApplicationEnvVars,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/SetApplicationEnvVar", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/SetApplicationEnvVar",
		svc.SetApplicationEnvVar,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/GetApplicationOutput", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/GetApplicationOutput",
		svc.GetApplicationOutput,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/CancelBuild", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/CancelBuild",
		svc.CancelBuild,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/RetryCommitBuild", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/RetryCommitBuild",
		svc.RetryCommitBuild,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/StartApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/StartApplication",
		svc.StartApplication,
		opts...,
	))
	mux.Handle("/neoshowcase.protobuf.ApplicationService/StopApplication", connect_go.NewUnaryHandler(
		"/neoshowcase.protobuf.ApplicationService/StopApplication",
		svc.StopApplication,
		opts...,
	))
	return "/neoshowcase.protobuf.ApplicationService/", mux
}

// UnimplementedApplicationServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedApplicationServiceHandler struct{}

func (UnimplementedApplicationServiceHandler) GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetMe is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetRepositories is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CreateRepository is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplications is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetSystemPublicKey is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetAvailableDomains is not implemented"))
}

func (UnimplementedApplicationServiceHandler) AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.AddAvailableDomain is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CreateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.UpdateApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.DeleteApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetApplicationBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationBuilds is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationBuild(context.Context, *connect_go.Request[pb.GetApplicationBuildRequest]) (*connect_go.Response[pb.Build], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationBuildLog(context.Context, *connect_go.Request[pb.GetApplicationBuildLogRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationBuildLog is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationBuildArtifact(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationBuildArtifact], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationBuildArtifact is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationEnvVars is not implemented"))
}

func (UnimplementedApplicationServiceHandler) SetApplicationEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.SetApplicationEnvVar is not implemented"))
}

func (UnimplementedApplicationServiceHandler) GetApplicationOutput(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationOutput], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.GetApplicationOutput is not implemented"))
}

func (UnimplementedApplicationServiceHandler) CancelBuild(context.Context, *connect_go.Request[pb.CancelBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.CancelBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.RetryCommitBuild is not implemented"))
}

func (UnimplementedApplicationServiceHandler) StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.StartApplication is not implemented"))
}

func (UnimplementedApplicationServiceHandler) StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.ApplicationService.StopApplication is not implemented"))
}
