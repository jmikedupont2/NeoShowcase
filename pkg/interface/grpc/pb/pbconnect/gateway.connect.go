// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: neoshowcase/protobuf/gateway.proto

package pbconnect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	pb "github.com/traPtitech/neoshowcase/pkg/interface/grpc/pb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// APIServiceName is the fully-qualified name of the APIService service.
	APIServiceName = "neoshowcase.protobuf.APIService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// APIServiceGetSystemPublicKeyProcedure is the fully-qualified name of the APIService's
	// GetSystemPublicKey RPC.
	APIServiceGetSystemPublicKeyProcedure = "/neoshowcase.protobuf.APIService/GetSystemPublicKey"
	// APIServiceGetAvailableDomainsProcedure is the fully-qualified name of the APIService's
	// GetAvailableDomains RPC.
	APIServiceGetAvailableDomainsProcedure = "/neoshowcase.protobuf.APIService/GetAvailableDomains"
	// APIServiceAddAvailableDomainProcedure is the fully-qualified name of the APIService's
	// AddAvailableDomain RPC.
	APIServiceAddAvailableDomainProcedure = "/neoshowcase.protobuf.APIService/AddAvailableDomain"
	// APIServiceGetMeProcedure is the fully-qualified name of the APIService's GetMe RPC.
	APIServiceGetMeProcedure = "/neoshowcase.protobuf.APIService/GetMe"
	// APIServiceCreateUserKeyProcedure is the fully-qualified name of the APIService's CreateUserKey
	// RPC.
	APIServiceCreateUserKeyProcedure = "/neoshowcase.protobuf.APIService/CreateUserKey"
	// APIServiceGetUserKeysProcedure is the fully-qualified name of the APIService's GetUserKeys RPC.
	APIServiceGetUserKeysProcedure = "/neoshowcase.protobuf.APIService/GetUserKeys"
	// APIServiceDeleteUserKeyProcedure is the fully-qualified name of the APIService's DeleteUserKey
	// RPC.
	APIServiceDeleteUserKeyProcedure = "/neoshowcase.protobuf.APIService/DeleteUserKey"
	// APIServiceCreateRepositoryProcedure is the fully-qualified name of the APIService's
	// CreateRepository RPC.
	APIServiceCreateRepositoryProcedure = "/neoshowcase.protobuf.APIService/CreateRepository"
	// APIServiceGetRepositoriesProcedure is the fully-qualified name of the APIService's
	// GetRepositories RPC.
	APIServiceGetRepositoriesProcedure = "/neoshowcase.protobuf.APIService/GetRepositories"
	// APIServiceGetRepositoryProcedure is the fully-qualified name of the APIService's GetRepository
	// RPC.
	APIServiceGetRepositoryProcedure = "/neoshowcase.protobuf.APIService/GetRepository"
	// APIServiceUpdateRepositoryProcedure is the fully-qualified name of the APIService's
	// UpdateRepository RPC.
	APIServiceUpdateRepositoryProcedure = "/neoshowcase.protobuf.APIService/UpdateRepository"
	// APIServiceRefreshRepositoryProcedure is the fully-qualified name of the APIService's
	// RefreshRepository RPC.
	APIServiceRefreshRepositoryProcedure = "/neoshowcase.protobuf.APIService/RefreshRepository"
	// APIServiceDeleteRepositoryProcedure is the fully-qualified name of the APIService's
	// DeleteRepository RPC.
	APIServiceDeleteRepositoryProcedure = "/neoshowcase.protobuf.APIService/DeleteRepository"
	// APIServiceCreateApplicationProcedure is the fully-qualified name of the APIService's
	// CreateApplication RPC.
	APIServiceCreateApplicationProcedure = "/neoshowcase.protobuf.APIService/CreateApplication"
	// APIServiceGetApplicationsProcedure is the fully-qualified name of the APIService's
	// GetApplications RPC.
	APIServiceGetApplicationsProcedure = "/neoshowcase.protobuf.APIService/GetApplications"
	// APIServiceGetApplicationProcedure is the fully-qualified name of the APIService's GetApplication
	// RPC.
	APIServiceGetApplicationProcedure = "/neoshowcase.protobuf.APIService/GetApplication"
	// APIServiceUpdateApplicationProcedure is the fully-qualified name of the APIService's
	// UpdateApplication RPC.
	APIServiceUpdateApplicationProcedure = "/neoshowcase.protobuf.APIService/UpdateApplication"
	// APIServiceDeleteApplicationProcedure is the fully-qualified name of the APIService's
	// DeleteApplication RPC.
	APIServiceDeleteApplicationProcedure = "/neoshowcase.protobuf.APIService/DeleteApplication"
	// APIServiceGetEnvVarsProcedure is the fully-qualified name of the APIService's GetEnvVars RPC.
	APIServiceGetEnvVarsProcedure = "/neoshowcase.protobuf.APIService/GetEnvVars"
	// APIServiceSetEnvVarProcedure is the fully-qualified name of the APIService's SetEnvVar RPC.
	APIServiceSetEnvVarProcedure = "/neoshowcase.protobuf.APIService/SetEnvVar"
	// APIServiceGetOutputProcedure is the fully-qualified name of the APIService's GetOutput RPC.
	APIServiceGetOutputProcedure = "/neoshowcase.protobuf.APIService/GetOutput"
	// APIServiceGetOutputStreamProcedure is the fully-qualified name of the APIService's
	// GetOutputStream RPC.
	APIServiceGetOutputStreamProcedure = "/neoshowcase.protobuf.APIService/GetOutputStream"
	// APIServiceStartApplicationProcedure is the fully-qualified name of the APIService's
	// StartApplication RPC.
	APIServiceStartApplicationProcedure = "/neoshowcase.protobuf.APIService/StartApplication"
	// APIServiceStopApplicationProcedure is the fully-qualified name of the APIService's
	// StopApplication RPC.
	APIServiceStopApplicationProcedure = "/neoshowcase.protobuf.APIService/StopApplication"
	// APIServiceGetBuildsProcedure is the fully-qualified name of the APIService's GetBuilds RPC.
	APIServiceGetBuildsProcedure = "/neoshowcase.protobuf.APIService/GetBuilds"
	// APIServiceGetBuildProcedure is the fully-qualified name of the APIService's GetBuild RPC.
	APIServiceGetBuildProcedure = "/neoshowcase.protobuf.APIService/GetBuild"
	// APIServiceRetryCommitBuildProcedure is the fully-qualified name of the APIService's
	// RetryCommitBuild RPC.
	APIServiceRetryCommitBuildProcedure = "/neoshowcase.protobuf.APIService/RetryCommitBuild"
	// APIServiceCancelBuildProcedure is the fully-qualified name of the APIService's CancelBuild RPC.
	APIServiceCancelBuildProcedure = "/neoshowcase.protobuf.APIService/CancelBuild"
	// APIServiceGetBuildLogProcedure is the fully-qualified name of the APIService's GetBuildLog RPC.
	APIServiceGetBuildLogProcedure = "/neoshowcase.protobuf.APIService/GetBuildLog"
	// APIServiceGetBuildLogStreamProcedure is the fully-qualified name of the APIService's
	// GetBuildLogStream RPC.
	APIServiceGetBuildLogStreamProcedure = "/neoshowcase.protobuf.APIService/GetBuildLogStream"
	// APIServiceGetBuildArtifactProcedure is the fully-qualified name of the APIService's
	// GetBuildArtifact RPC.
	APIServiceGetBuildArtifactProcedure = "/neoshowcase.protobuf.APIService/GetBuildArtifact"
)

// APIServiceClient is a client for the neoshowcase.protobuf.APIService service.
type APIServiceClient interface {
	// GetSystemPublicKey システムのSSH公開鍵を取得します リポジトリごとにSSH秘密鍵を設定しないデフォルトSSH認証で使用します
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	// GetAvailableDomains 使用可能なドメイン一覧を取得します
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	// AddAvailableDomain 使用可能なドメインを登録します（admin only）
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	// GetMe 自身の情報を取得します プロキシ認証のため常に成功します
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	// CreateUserKey アプリコンテナSSH用の公開鍵を登録します
	CreateUserKey(context.Context, *connect_go.Request[pb.CreateUserKeyRequest]) (*connect_go.Response[pb.UserKey], error)
	// GetUserKeys 登録した公開鍵一覧を取得します
	GetUserKeys(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetUserKeysResponse], error)
	// DeleteUserKey 登録した公開鍵を削除します
	DeleteUserKey(context.Context, *connect_go.Request[pb.DeleteUserKeyRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CreateRepository リポジトリを登録します
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	// GetRepositories リポジトリ一覧を取得します
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	// GetRepository リポジトリを取得します
	GetRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[pb.Repository], error)
	// UpdateRepository リポジトリ情報を更新します
	UpdateRepository(context.Context, *connect_go.Request[pb.UpdateRepositoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	// RefreshRepository 自動更新間隔を待たず、手動でリモートリポジトリの最新情報に追従させます
	RefreshRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteRepository リポジトリを削除します 関連する全てのアプリケーションの削除が必要です
	DeleteRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CreateApplication アプリを作成します
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	// GetApplications アプリ一覧を取得します
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	// GetApplication アプリを取得します
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	// UpdateApplication アプリ情報を更新します
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteApplication アプリを削除します 先にアプリのシャットダウンが必要です
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetEnvVars アプリの環境変数を取得します
	GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	// SetEnvVar アプリの環境変数をセットします システムによって設定された環境変数は上書きできません
	SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetOutput アプリの出力を取得します
	GetOutput(context.Context, *connect_go.Request[pb.GetOutputRequest]) (*connect_go.Response[pb.GetOutputResponse], error)
	// GetOutputStream アプリの出力をストリーム形式で取得します
	GetOutputStream(context.Context, *connect_go.Request[pb.GetOutputStreamRequest]) (*connect_go.ServerStreamForClient[pb.ApplicationOutput], error)
	// StartApplication アプリを起動します 起動中の場合は再起動します
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// StopApplication アプリをシャットダウンします
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBuilds アプリのビルド一覧を取得します
	GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error)
	// GetBuild アプリのビルド情報を取得します
	GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error)
	// RetryCommitBuild アプリの該当コミットのビルドをやり直します
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CancelBuild 該当ビルドが進行中の場合キャンセルします
	CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBuildLog 終了したビルドのログを取得します
	GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error)
	// GetBuildLogStream ビルド中のログをストリーム形式で取得します
	GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.ServerStreamForClient[pb.BuildLog], error)
	// GetBuildArtifact 静的サイトアプリの場合ビルド成果物（静的ファイルのtar）を取得します
	GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error)
}

// NewAPIServiceClient constructs a client for the neoshowcase.protobuf.APIService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAPIServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) APIServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &aPIServiceClient{
		getSystemPublicKey: connect_go.NewClient[emptypb.Empty, pb.GetSystemPublicKeyResponse](
			httpClient,
			baseURL+APIServiceGetSystemPublicKeyProcedure,
			opts...,
		),
		getAvailableDomains: connect_go.NewClient[emptypb.Empty, pb.AvailableDomains](
			httpClient,
			baseURL+APIServiceGetAvailableDomainsProcedure,
			opts...,
		),
		addAvailableDomain: connect_go.NewClient[pb.AvailableDomain, emptypb.Empty](
			httpClient,
			baseURL+APIServiceAddAvailableDomainProcedure,
			opts...,
		),
		getMe: connect_go.NewClient[emptypb.Empty, pb.User](
			httpClient,
			baseURL+APIServiceGetMeProcedure,
			opts...,
		),
		createUserKey: connect_go.NewClient[pb.CreateUserKeyRequest, pb.UserKey](
			httpClient,
			baseURL+APIServiceCreateUserKeyProcedure,
			opts...,
		),
		getUserKeys: connect_go.NewClient[emptypb.Empty, pb.GetUserKeysResponse](
			httpClient,
			baseURL+APIServiceGetUserKeysProcedure,
			opts...,
		),
		deleteUserKey: connect_go.NewClient[pb.DeleteUserKeyRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceDeleteUserKeyProcedure,
			opts...,
		),
		createRepository: connect_go.NewClient[pb.CreateRepositoryRequest, pb.Repository](
			httpClient,
			baseURL+APIServiceCreateRepositoryProcedure,
			opts...,
		),
		getRepositories: connect_go.NewClient[emptypb.Empty, pb.GetRepositoriesResponse](
			httpClient,
			baseURL+APIServiceGetRepositoriesProcedure,
			opts...,
		),
		getRepository: connect_go.NewClient[pb.RepositoryIdRequest, pb.Repository](
			httpClient,
			baseURL+APIServiceGetRepositoryProcedure,
			opts...,
		),
		updateRepository: connect_go.NewClient[pb.UpdateRepositoryRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceUpdateRepositoryProcedure,
			opts...,
		),
		refreshRepository: connect_go.NewClient[pb.RepositoryIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceRefreshRepositoryProcedure,
			opts...,
		),
		deleteRepository: connect_go.NewClient[pb.RepositoryIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceDeleteRepositoryProcedure,
			opts...,
		),
		createApplication: connect_go.NewClient[pb.CreateApplicationRequest, pb.Application](
			httpClient,
			baseURL+APIServiceCreateApplicationProcedure,
			opts...,
		),
		getApplications: connect_go.NewClient[emptypb.Empty, pb.GetApplicationsResponse](
			httpClient,
			baseURL+APIServiceGetApplicationsProcedure,
			opts...,
		),
		getApplication: connect_go.NewClient[pb.ApplicationIdRequest, pb.Application](
			httpClient,
			baseURL+APIServiceGetApplicationProcedure,
			opts...,
		),
		updateApplication: connect_go.NewClient[pb.UpdateApplicationRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceUpdateApplicationProcedure,
			opts...,
		),
		deleteApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceDeleteApplicationProcedure,
			opts...,
		),
		getEnvVars: connect_go.NewClient[pb.ApplicationIdRequest, pb.ApplicationEnvVars](
			httpClient,
			baseURL+APIServiceGetEnvVarsProcedure,
			opts...,
		),
		setEnvVar: connect_go.NewClient[pb.SetApplicationEnvVarRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceSetEnvVarProcedure,
			opts...,
		),
		getOutput: connect_go.NewClient[pb.GetOutputRequest, pb.GetOutputResponse](
			httpClient,
			baseURL+APIServiceGetOutputProcedure,
			opts...,
		),
		getOutputStream: connect_go.NewClient[pb.GetOutputStreamRequest, pb.ApplicationOutput](
			httpClient,
			baseURL+APIServiceGetOutputStreamProcedure,
			opts...,
		),
		startApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceStartApplicationProcedure,
			opts...,
		),
		stopApplication: connect_go.NewClient[pb.ApplicationIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceStopApplicationProcedure,
			opts...,
		),
		getBuilds: connect_go.NewClient[pb.ApplicationIdRequest, pb.GetBuildsResponse](
			httpClient,
			baseURL+APIServiceGetBuildsProcedure,
			opts...,
		),
		getBuild: connect_go.NewClient[pb.BuildIdRequest, pb.Build](
			httpClient,
			baseURL+APIServiceGetBuildProcedure,
			opts...,
		),
		retryCommitBuild: connect_go.NewClient[pb.RetryCommitBuildRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceRetryCommitBuildProcedure,
			opts...,
		),
		cancelBuild: connect_go.NewClient[pb.BuildIdRequest, emptypb.Empty](
			httpClient,
			baseURL+APIServiceCancelBuildProcedure,
			opts...,
		),
		getBuildLog: connect_go.NewClient[pb.BuildIdRequest, pb.BuildLog](
			httpClient,
			baseURL+APIServiceGetBuildLogProcedure,
			opts...,
		),
		getBuildLogStream: connect_go.NewClient[pb.BuildIdRequest, pb.BuildLog](
			httpClient,
			baseURL+APIServiceGetBuildLogStreamProcedure,
			opts...,
		),
		getBuildArtifact: connect_go.NewClient[pb.ArtifactIdRequest, pb.ArtifactContent](
			httpClient,
			baseURL+APIServiceGetBuildArtifactProcedure,
			opts...,
		),
	}
}

// aPIServiceClient implements APIServiceClient.
type aPIServiceClient struct {
	getSystemPublicKey  *connect_go.Client[emptypb.Empty, pb.GetSystemPublicKeyResponse]
	getAvailableDomains *connect_go.Client[emptypb.Empty, pb.AvailableDomains]
	addAvailableDomain  *connect_go.Client[pb.AvailableDomain, emptypb.Empty]
	getMe               *connect_go.Client[emptypb.Empty, pb.User]
	createUserKey       *connect_go.Client[pb.CreateUserKeyRequest, pb.UserKey]
	getUserKeys         *connect_go.Client[emptypb.Empty, pb.GetUserKeysResponse]
	deleteUserKey       *connect_go.Client[pb.DeleteUserKeyRequest, emptypb.Empty]
	createRepository    *connect_go.Client[pb.CreateRepositoryRequest, pb.Repository]
	getRepositories     *connect_go.Client[emptypb.Empty, pb.GetRepositoriesResponse]
	getRepository       *connect_go.Client[pb.RepositoryIdRequest, pb.Repository]
	updateRepository    *connect_go.Client[pb.UpdateRepositoryRequest, emptypb.Empty]
	refreshRepository   *connect_go.Client[pb.RepositoryIdRequest, emptypb.Empty]
	deleteRepository    *connect_go.Client[pb.RepositoryIdRequest, emptypb.Empty]
	createApplication   *connect_go.Client[pb.CreateApplicationRequest, pb.Application]
	getApplications     *connect_go.Client[emptypb.Empty, pb.GetApplicationsResponse]
	getApplication      *connect_go.Client[pb.ApplicationIdRequest, pb.Application]
	updateApplication   *connect_go.Client[pb.UpdateApplicationRequest, emptypb.Empty]
	deleteApplication   *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	getEnvVars          *connect_go.Client[pb.ApplicationIdRequest, pb.ApplicationEnvVars]
	setEnvVar           *connect_go.Client[pb.SetApplicationEnvVarRequest, emptypb.Empty]
	getOutput           *connect_go.Client[pb.GetOutputRequest, pb.GetOutputResponse]
	getOutputStream     *connect_go.Client[pb.GetOutputStreamRequest, pb.ApplicationOutput]
	startApplication    *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	stopApplication     *connect_go.Client[pb.ApplicationIdRequest, emptypb.Empty]
	getBuilds           *connect_go.Client[pb.ApplicationIdRequest, pb.GetBuildsResponse]
	getBuild            *connect_go.Client[pb.BuildIdRequest, pb.Build]
	retryCommitBuild    *connect_go.Client[pb.RetryCommitBuildRequest, emptypb.Empty]
	cancelBuild         *connect_go.Client[pb.BuildIdRequest, emptypb.Empty]
	getBuildLog         *connect_go.Client[pb.BuildIdRequest, pb.BuildLog]
	getBuildLogStream   *connect_go.Client[pb.BuildIdRequest, pb.BuildLog]
	getBuildArtifact    *connect_go.Client[pb.ArtifactIdRequest, pb.ArtifactContent]
}

// GetSystemPublicKey calls neoshowcase.protobuf.APIService.GetSystemPublicKey.
func (c *aPIServiceClient) GetSystemPublicKey(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return c.getSystemPublicKey.CallUnary(ctx, req)
}

// GetAvailableDomains calls neoshowcase.protobuf.APIService.GetAvailableDomains.
func (c *aPIServiceClient) GetAvailableDomains(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return c.getAvailableDomains.CallUnary(ctx, req)
}

// AddAvailableDomain calls neoshowcase.protobuf.APIService.AddAvailableDomain.
func (c *aPIServiceClient) AddAvailableDomain(ctx context.Context, req *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return c.addAvailableDomain.CallUnary(ctx, req)
}

// GetMe calls neoshowcase.protobuf.APIService.GetMe.
func (c *aPIServiceClient) GetMe(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return c.getMe.CallUnary(ctx, req)
}

// CreateUserKey calls neoshowcase.protobuf.APIService.CreateUserKey.
func (c *aPIServiceClient) CreateUserKey(ctx context.Context, req *connect_go.Request[pb.CreateUserKeyRequest]) (*connect_go.Response[pb.UserKey], error) {
	return c.createUserKey.CallUnary(ctx, req)
}

// GetUserKeys calls neoshowcase.protobuf.APIService.GetUserKeys.
func (c *aPIServiceClient) GetUserKeys(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetUserKeysResponse], error) {
	return c.getUserKeys.CallUnary(ctx, req)
}

// DeleteUserKey calls neoshowcase.protobuf.APIService.DeleteUserKey.
func (c *aPIServiceClient) DeleteUserKey(ctx context.Context, req *connect_go.Request[pb.DeleteUserKeyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteUserKey.CallUnary(ctx, req)
}

// CreateRepository calls neoshowcase.protobuf.APIService.CreateRepository.
func (c *aPIServiceClient) CreateRepository(ctx context.Context, req *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return c.createRepository.CallUnary(ctx, req)
}

// GetRepositories calls neoshowcase.protobuf.APIService.GetRepositories.
func (c *aPIServiceClient) GetRepositories(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return c.getRepositories.CallUnary(ctx, req)
}

// GetRepository calls neoshowcase.protobuf.APIService.GetRepository.
func (c *aPIServiceClient) GetRepository(ctx context.Context, req *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[pb.Repository], error) {
	return c.getRepository.CallUnary(ctx, req)
}

// UpdateRepository calls neoshowcase.protobuf.APIService.UpdateRepository.
func (c *aPIServiceClient) UpdateRepository(ctx context.Context, req *connect_go.Request[pb.UpdateRepositoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateRepository.CallUnary(ctx, req)
}

// RefreshRepository calls neoshowcase.protobuf.APIService.RefreshRepository.
func (c *aPIServiceClient) RefreshRepository(ctx context.Context, req *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.refreshRepository.CallUnary(ctx, req)
}

// DeleteRepository calls neoshowcase.protobuf.APIService.DeleteRepository.
func (c *aPIServiceClient) DeleteRepository(ctx context.Context, req *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteRepository.CallUnary(ctx, req)
}

// CreateApplication calls neoshowcase.protobuf.APIService.CreateApplication.
func (c *aPIServiceClient) CreateApplication(ctx context.Context, req *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return c.createApplication.CallUnary(ctx, req)
}

// GetApplications calls neoshowcase.protobuf.APIService.GetApplications.
func (c *aPIServiceClient) GetApplications(ctx context.Context, req *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return c.getApplications.CallUnary(ctx, req)
}

// GetApplication calls neoshowcase.protobuf.APIService.GetApplication.
func (c *aPIServiceClient) GetApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return c.getApplication.CallUnary(ctx, req)
}

// UpdateApplication calls neoshowcase.protobuf.APIService.UpdateApplication.
func (c *aPIServiceClient) UpdateApplication(ctx context.Context, req *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.updateApplication.CallUnary(ctx, req)
}

// DeleteApplication calls neoshowcase.protobuf.APIService.DeleteApplication.
func (c *aPIServiceClient) DeleteApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.deleteApplication.CallUnary(ctx, req)
}

// GetEnvVars calls neoshowcase.protobuf.APIService.GetEnvVars.
func (c *aPIServiceClient) GetEnvVars(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return c.getEnvVars.CallUnary(ctx, req)
}

// SetEnvVar calls neoshowcase.protobuf.APIService.SetEnvVar.
func (c *aPIServiceClient) SetEnvVar(ctx context.Context, req *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.setEnvVar.CallUnary(ctx, req)
}

// GetOutput calls neoshowcase.protobuf.APIService.GetOutput.
func (c *aPIServiceClient) GetOutput(ctx context.Context, req *connect_go.Request[pb.GetOutputRequest]) (*connect_go.Response[pb.GetOutputResponse], error) {
	return c.getOutput.CallUnary(ctx, req)
}

// GetOutputStream calls neoshowcase.protobuf.APIService.GetOutputStream.
func (c *aPIServiceClient) GetOutputStream(ctx context.Context, req *connect_go.Request[pb.GetOutputStreamRequest]) (*connect_go.ServerStreamForClient[pb.ApplicationOutput], error) {
	return c.getOutputStream.CallServerStream(ctx, req)
}

// StartApplication calls neoshowcase.protobuf.APIService.StartApplication.
func (c *aPIServiceClient) StartApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.startApplication.CallUnary(ctx, req)
}

// StopApplication calls neoshowcase.protobuf.APIService.StopApplication.
func (c *aPIServiceClient) StopApplication(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.stopApplication.CallUnary(ctx, req)
}

// GetBuilds calls neoshowcase.protobuf.APIService.GetBuilds.
func (c *aPIServiceClient) GetBuilds(ctx context.Context, req *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error) {
	return c.getBuilds.CallUnary(ctx, req)
}

// GetBuild calls neoshowcase.protobuf.APIService.GetBuild.
func (c *aPIServiceClient) GetBuild(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error) {
	return c.getBuild.CallUnary(ctx, req)
}

// RetryCommitBuild calls neoshowcase.protobuf.APIService.RetryCommitBuild.
func (c *aPIServiceClient) RetryCommitBuild(ctx context.Context, req *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.retryCommitBuild.CallUnary(ctx, req)
}

// CancelBuild calls neoshowcase.protobuf.APIService.CancelBuild.
func (c *aPIServiceClient) CancelBuild(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return c.cancelBuild.CallUnary(ctx, req)
}

// GetBuildLog calls neoshowcase.protobuf.APIService.GetBuildLog.
func (c *aPIServiceClient) GetBuildLog(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return c.getBuildLog.CallUnary(ctx, req)
}

// GetBuildLogStream calls neoshowcase.protobuf.APIService.GetBuildLogStream.
func (c *aPIServiceClient) GetBuildLogStream(ctx context.Context, req *connect_go.Request[pb.BuildIdRequest]) (*connect_go.ServerStreamForClient[pb.BuildLog], error) {
	return c.getBuildLogStream.CallServerStream(ctx, req)
}

// GetBuildArtifact calls neoshowcase.protobuf.APIService.GetBuildArtifact.
func (c *aPIServiceClient) GetBuildArtifact(ctx context.Context, req *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error) {
	return c.getBuildArtifact.CallUnary(ctx, req)
}

// APIServiceHandler is an implementation of the neoshowcase.protobuf.APIService service.
type APIServiceHandler interface {
	// GetSystemPublicKey システムのSSH公開鍵を取得します リポジトリごとにSSH秘密鍵を設定しないデフォルトSSH認証で使用します
	GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error)
	// GetAvailableDomains 使用可能なドメイン一覧を取得します
	GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error)
	// AddAvailableDomain 使用可能なドメインを登録します（admin only）
	AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error)
	// GetMe 自身の情報を取得します プロキシ認証のため常に成功します
	GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error)
	// CreateUserKey アプリコンテナSSH用の公開鍵を登録します
	CreateUserKey(context.Context, *connect_go.Request[pb.CreateUserKeyRequest]) (*connect_go.Response[pb.UserKey], error)
	// GetUserKeys 登録した公開鍵一覧を取得します
	GetUserKeys(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetUserKeysResponse], error)
	// DeleteUserKey 登録した公開鍵を削除します
	DeleteUserKey(context.Context, *connect_go.Request[pb.DeleteUserKeyRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CreateRepository リポジトリを登録します
	CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error)
	// GetRepositories リポジトリ一覧を取得します
	GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error)
	// GetRepository リポジトリを取得します
	GetRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[pb.Repository], error)
	// UpdateRepository リポジトリ情報を更新します
	UpdateRepository(context.Context, *connect_go.Request[pb.UpdateRepositoryRequest]) (*connect_go.Response[emptypb.Empty], error)
	// RefreshRepository 自動更新間隔を待たず、手動でリモートリポジトリの最新情報に追従させます
	RefreshRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteRepository リポジトリを削除します 関連する全てのアプリケーションの削除が必要です
	DeleteRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CreateApplication アプリを作成します
	CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error)
	// GetApplications アプリ一覧を取得します
	GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error)
	// GetApplication アプリを取得します
	GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error)
	// UpdateApplication アプリ情報を更新します
	UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error)
	// DeleteApplication アプリを削除します 先にアプリのシャットダウンが必要です
	DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetEnvVars アプリの環境変数を取得します
	GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error)
	// SetEnvVar アプリの環境変数をセットします システムによって設定された環境変数は上書きできません
	SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetOutput アプリの出力を取得します
	GetOutput(context.Context, *connect_go.Request[pb.GetOutputRequest]) (*connect_go.Response[pb.GetOutputResponse], error)
	// GetOutputStream アプリの出力をストリーム形式で取得します
	GetOutputStream(context.Context, *connect_go.Request[pb.GetOutputStreamRequest], *connect_go.ServerStream[pb.ApplicationOutput]) error
	// StartApplication アプリを起動します 起動中の場合は再起動します
	StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// StopApplication アプリをシャットダウンします
	StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBuilds アプリのビルド一覧を取得します
	GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error)
	// GetBuild アプリのビルド情報を取得します
	GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error)
	// RetryCommitBuild アプリの該当コミットのビルドをやり直します
	RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error)
	// CancelBuild 該当ビルドが進行中の場合キャンセルします
	CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error)
	// GetBuildLog 終了したビルドのログを取得します
	GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error)
	// GetBuildLogStream ビルド中のログをストリーム形式で取得します
	GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest], *connect_go.ServerStream[pb.BuildLog]) error
	// GetBuildArtifact 静的サイトアプリの場合ビルド成果物（静的ファイルのtar）を取得します
	GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error)
}

// NewAPIServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAPIServiceHandler(svc APIServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle(APIServiceGetSystemPublicKeyProcedure, connect_go.NewUnaryHandler(
		APIServiceGetSystemPublicKeyProcedure,
		svc.GetSystemPublicKey,
		opts...,
	))
	mux.Handle(APIServiceGetAvailableDomainsProcedure, connect_go.NewUnaryHandler(
		APIServiceGetAvailableDomainsProcedure,
		svc.GetAvailableDomains,
		opts...,
	))
	mux.Handle(APIServiceAddAvailableDomainProcedure, connect_go.NewUnaryHandler(
		APIServiceAddAvailableDomainProcedure,
		svc.AddAvailableDomain,
		opts...,
	))
	mux.Handle(APIServiceGetMeProcedure, connect_go.NewUnaryHandler(
		APIServiceGetMeProcedure,
		svc.GetMe,
		opts...,
	))
	mux.Handle(APIServiceCreateUserKeyProcedure, connect_go.NewUnaryHandler(
		APIServiceCreateUserKeyProcedure,
		svc.CreateUserKey,
		opts...,
	))
	mux.Handle(APIServiceGetUserKeysProcedure, connect_go.NewUnaryHandler(
		APIServiceGetUserKeysProcedure,
		svc.GetUserKeys,
		opts...,
	))
	mux.Handle(APIServiceDeleteUserKeyProcedure, connect_go.NewUnaryHandler(
		APIServiceDeleteUserKeyProcedure,
		svc.DeleteUserKey,
		opts...,
	))
	mux.Handle(APIServiceCreateRepositoryProcedure, connect_go.NewUnaryHandler(
		APIServiceCreateRepositoryProcedure,
		svc.CreateRepository,
		opts...,
	))
	mux.Handle(APIServiceGetRepositoriesProcedure, connect_go.NewUnaryHandler(
		APIServiceGetRepositoriesProcedure,
		svc.GetRepositories,
		opts...,
	))
	mux.Handle(APIServiceGetRepositoryProcedure, connect_go.NewUnaryHandler(
		APIServiceGetRepositoryProcedure,
		svc.GetRepository,
		opts...,
	))
	mux.Handle(APIServiceUpdateRepositoryProcedure, connect_go.NewUnaryHandler(
		APIServiceUpdateRepositoryProcedure,
		svc.UpdateRepository,
		opts...,
	))
	mux.Handle(APIServiceRefreshRepositoryProcedure, connect_go.NewUnaryHandler(
		APIServiceRefreshRepositoryProcedure,
		svc.RefreshRepository,
		opts...,
	))
	mux.Handle(APIServiceDeleteRepositoryProcedure, connect_go.NewUnaryHandler(
		APIServiceDeleteRepositoryProcedure,
		svc.DeleteRepository,
		opts...,
	))
	mux.Handle(APIServiceCreateApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceCreateApplicationProcedure,
		svc.CreateApplication,
		opts...,
	))
	mux.Handle(APIServiceGetApplicationsProcedure, connect_go.NewUnaryHandler(
		APIServiceGetApplicationsProcedure,
		svc.GetApplications,
		opts...,
	))
	mux.Handle(APIServiceGetApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceGetApplicationProcedure,
		svc.GetApplication,
		opts...,
	))
	mux.Handle(APIServiceUpdateApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceUpdateApplicationProcedure,
		svc.UpdateApplication,
		opts...,
	))
	mux.Handle(APIServiceDeleteApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceDeleteApplicationProcedure,
		svc.DeleteApplication,
		opts...,
	))
	mux.Handle(APIServiceGetEnvVarsProcedure, connect_go.NewUnaryHandler(
		APIServiceGetEnvVarsProcedure,
		svc.GetEnvVars,
		opts...,
	))
	mux.Handle(APIServiceSetEnvVarProcedure, connect_go.NewUnaryHandler(
		APIServiceSetEnvVarProcedure,
		svc.SetEnvVar,
		opts...,
	))
	mux.Handle(APIServiceGetOutputProcedure, connect_go.NewUnaryHandler(
		APIServiceGetOutputProcedure,
		svc.GetOutput,
		opts...,
	))
	mux.Handle(APIServiceGetOutputStreamProcedure, connect_go.NewServerStreamHandler(
		APIServiceGetOutputStreamProcedure,
		svc.GetOutputStream,
		opts...,
	))
	mux.Handle(APIServiceStartApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceStartApplicationProcedure,
		svc.StartApplication,
		opts...,
	))
	mux.Handle(APIServiceStopApplicationProcedure, connect_go.NewUnaryHandler(
		APIServiceStopApplicationProcedure,
		svc.StopApplication,
		opts...,
	))
	mux.Handle(APIServiceGetBuildsProcedure, connect_go.NewUnaryHandler(
		APIServiceGetBuildsProcedure,
		svc.GetBuilds,
		opts...,
	))
	mux.Handle(APIServiceGetBuildProcedure, connect_go.NewUnaryHandler(
		APIServiceGetBuildProcedure,
		svc.GetBuild,
		opts...,
	))
	mux.Handle(APIServiceRetryCommitBuildProcedure, connect_go.NewUnaryHandler(
		APIServiceRetryCommitBuildProcedure,
		svc.RetryCommitBuild,
		opts...,
	))
	mux.Handle(APIServiceCancelBuildProcedure, connect_go.NewUnaryHandler(
		APIServiceCancelBuildProcedure,
		svc.CancelBuild,
		opts...,
	))
	mux.Handle(APIServiceGetBuildLogProcedure, connect_go.NewUnaryHandler(
		APIServiceGetBuildLogProcedure,
		svc.GetBuildLog,
		opts...,
	))
	mux.Handle(APIServiceGetBuildLogStreamProcedure, connect_go.NewServerStreamHandler(
		APIServiceGetBuildLogStreamProcedure,
		svc.GetBuildLogStream,
		opts...,
	))
	mux.Handle(APIServiceGetBuildArtifactProcedure, connect_go.NewUnaryHandler(
		APIServiceGetBuildArtifactProcedure,
		svc.GetBuildArtifact,
		opts...,
	))
	return "/neoshowcase.protobuf.APIService/", mux
}

// UnimplementedAPIServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAPIServiceHandler struct{}

func (UnimplementedAPIServiceHandler) GetSystemPublicKey(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetSystemPublicKeyResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetSystemPublicKey is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetAvailableDomains(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.AvailableDomains], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetAvailableDomains is not implemented"))
}

func (UnimplementedAPIServiceHandler) AddAvailableDomain(context.Context, *connect_go.Request[pb.AvailableDomain]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.AddAvailableDomain is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetMe(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.User], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetMe is not implemented"))
}

func (UnimplementedAPIServiceHandler) CreateUserKey(context.Context, *connect_go.Request[pb.CreateUserKeyRequest]) (*connect_go.Response[pb.UserKey], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.CreateUserKey is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetUserKeys(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetUserKeysResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetUserKeys is not implemented"))
}

func (UnimplementedAPIServiceHandler) DeleteUserKey(context.Context, *connect_go.Request[pb.DeleteUserKeyRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.DeleteUserKey is not implemented"))
}

func (UnimplementedAPIServiceHandler) CreateRepository(context.Context, *connect_go.Request[pb.CreateRepositoryRequest]) (*connect_go.Response[pb.Repository], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.CreateRepository is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetRepositories(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetRepositoriesResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetRepositories is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[pb.Repository], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetRepository is not implemented"))
}

func (UnimplementedAPIServiceHandler) UpdateRepository(context.Context, *connect_go.Request[pb.UpdateRepositoryRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.UpdateRepository is not implemented"))
}

func (UnimplementedAPIServiceHandler) RefreshRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.RefreshRepository is not implemented"))
}

func (UnimplementedAPIServiceHandler) DeleteRepository(context.Context, *connect_go.Request[pb.RepositoryIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.DeleteRepository is not implemented"))
}

func (UnimplementedAPIServiceHandler) CreateApplication(context.Context, *connect_go.Request[pb.CreateApplicationRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.CreateApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetApplications(context.Context, *connect_go.Request[emptypb.Empty]) (*connect_go.Response[pb.GetApplicationsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetApplications is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.Application], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) UpdateApplication(context.Context, *connect_go.Request[pb.UpdateApplicationRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.UpdateApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) DeleteApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.DeleteApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetEnvVars(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.ApplicationEnvVars], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetEnvVars is not implemented"))
}

func (UnimplementedAPIServiceHandler) SetEnvVar(context.Context, *connect_go.Request[pb.SetApplicationEnvVarRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.SetEnvVar is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetOutput(context.Context, *connect_go.Request[pb.GetOutputRequest]) (*connect_go.Response[pb.GetOutputResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetOutput is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetOutputStream(context.Context, *connect_go.Request[pb.GetOutputStreamRequest], *connect_go.ServerStream[pb.ApplicationOutput]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetOutputStream is not implemented"))
}

func (UnimplementedAPIServiceHandler) StartApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.StartApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) StopApplication(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.StopApplication is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetBuilds(context.Context, *connect_go.Request[pb.ApplicationIdRequest]) (*connect_go.Response[pb.GetBuildsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetBuilds is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.Build], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetBuild is not implemented"))
}

func (UnimplementedAPIServiceHandler) RetryCommitBuild(context.Context, *connect_go.Request[pb.RetryCommitBuildRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.RetryCommitBuild is not implemented"))
}

func (UnimplementedAPIServiceHandler) CancelBuild(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[emptypb.Empty], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.CancelBuild is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetBuildLog(context.Context, *connect_go.Request[pb.BuildIdRequest]) (*connect_go.Response[pb.BuildLog], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetBuildLog is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetBuildLogStream(context.Context, *connect_go.Request[pb.BuildIdRequest], *connect_go.ServerStream[pb.BuildLog]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetBuildLogStream is not implemented"))
}

func (UnimplementedAPIServiceHandler) GetBuildArtifact(context.Context, *connect_go.Request[pb.ArtifactIdRequest]) (*connect_go.Response[pb.ArtifactContent], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("neoshowcase.protobuf.APIService.GetBuildArtifact is not implemented"))
}
