// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: neoshowcase/protobuf/apiserver.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApplicationServiceClient is the client API for ApplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApplicationServiceClient interface {
	GetRepositories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesResponse, error)
	CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*Repository, error)
	GetApplications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationsResponse, error)
	GetAvailableDomains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableDomains, error)
	AddAvailableDomain(ctx context.Context, in *AvailableDomain, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error)
	GetApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*Application, error)
	UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApplicationBuilds(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*GetApplicationBuildsResponse, error)
	GetApplicationBuild(ctx context.Context, in *GetApplicationBuildRequest, opts ...grpc.CallOption) (*Build, error)
	GetApplicationBuildLog(ctx context.Context, in *GetApplicationBuildLogRequest, opts ...grpc.CallOption) (*BuildLog, error)
	GetApplicationBuildArtifact(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationBuildArtifact, error)
	GetApplicationEnvVars(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationEnvVars, error)
	SetApplicationEnvVar(ctx context.Context, in *SetApplicationEnvVarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetApplicationOutput(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationOutput, error)
	CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RetryCommitBuild(ctx context.Context, in *RetryCommitBuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StartApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StopApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type applicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApplicationServiceClient(cc grpc.ClientConnInterface) ApplicationServiceClient {
	return &applicationServiceClient{cc}
}

func (c *applicationServiceClient) GetRepositories(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetRepositoriesResponse, error) {
	out := new(GetRepositoriesResponse)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetRepositories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateRepository(ctx context.Context, in *CreateRepositoryRequest, opts ...grpc.CallOption) (*Repository, error) {
	out := new(Repository)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/CreateRepository", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplications(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetApplicationsResponse, error) {
	out := new(GetApplicationsResponse)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetAvailableDomains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*AvailableDomains, error) {
	out := new(AvailableDomains)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetAvailableDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) AddAvailableDomain(ctx context.Context, in *AvailableDomain, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/AddAvailableDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CreateApplication(ctx context.Context, in *CreateApplicationRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/CreateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*Application, error) {
	out := new(Application)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) UpdateApplication(ctx context.Context, in *UpdateApplicationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/UpdateApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) DeleteApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/DeleteApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationBuilds(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*GetApplicationBuildsResponse, error) {
	out := new(GetApplicationBuildsResponse)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationBuilds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationBuild(ctx context.Context, in *GetApplicationBuildRequest, opts ...grpc.CallOption) (*Build, error) {
	out := new(Build)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationBuildLog(ctx context.Context, in *GetApplicationBuildLogRequest, opts ...grpc.CallOption) (*BuildLog, error) {
	out := new(BuildLog)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationBuildLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationBuildArtifact(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationBuildArtifact, error) {
	out := new(ApplicationBuildArtifact)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationBuildArtifact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationEnvVars(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationEnvVars, error) {
	out := new(ApplicationEnvVars)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationEnvVars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) SetApplicationEnvVar(ctx context.Context, in *SetApplicationEnvVarRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/SetApplicationEnvVar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) GetApplicationOutput(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*ApplicationOutput, error) {
	out := new(ApplicationOutput)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/GetApplicationOutput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) CancelBuild(ctx context.Context, in *CancelBuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/CancelBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) RetryCommitBuild(ctx context.Context, in *RetryCommitBuildRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/RetryCommitBuild", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) StartApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/StartApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *applicationServiceClient) StopApplication(ctx context.Context, in *ApplicationIdRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/neoshowcase.protobuf.ApplicationService/StopApplication", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApplicationServiceServer is the server API for ApplicationService service.
// All implementations must embed UnimplementedApplicationServiceServer
// for forward compatibility
type ApplicationServiceServer interface {
	GetRepositories(context.Context, *emptypb.Empty) (*GetRepositoriesResponse, error)
	CreateRepository(context.Context, *CreateRepositoryRequest) (*Repository, error)
	GetApplications(context.Context, *emptypb.Empty) (*GetApplicationsResponse, error)
	GetAvailableDomains(context.Context, *emptypb.Empty) (*AvailableDomains, error)
	AddAvailableDomain(context.Context, *AvailableDomain) (*emptypb.Empty, error)
	CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error)
	GetApplication(context.Context, *ApplicationIdRequest) (*Application, error)
	UpdateApplication(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error)
	DeleteApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error)
	GetApplicationBuilds(context.Context, *ApplicationIdRequest) (*GetApplicationBuildsResponse, error)
	GetApplicationBuild(context.Context, *GetApplicationBuildRequest) (*Build, error)
	GetApplicationBuildLog(context.Context, *GetApplicationBuildLogRequest) (*BuildLog, error)
	GetApplicationBuildArtifact(context.Context, *ApplicationIdRequest) (*ApplicationBuildArtifact, error)
	GetApplicationEnvVars(context.Context, *ApplicationIdRequest) (*ApplicationEnvVars, error)
	SetApplicationEnvVar(context.Context, *SetApplicationEnvVarRequest) (*emptypb.Empty, error)
	GetApplicationOutput(context.Context, *ApplicationIdRequest) (*ApplicationOutput, error)
	CancelBuild(context.Context, *CancelBuildRequest) (*emptypb.Empty, error)
	RetryCommitBuild(context.Context, *RetryCommitBuildRequest) (*emptypb.Empty, error)
	StartApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error)
	StopApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedApplicationServiceServer()
}

// UnimplementedApplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApplicationServiceServer struct {
}

func (UnimplementedApplicationServiceServer) GetRepositories(context.Context, *emptypb.Empty) (*GetRepositoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepositories not implemented")
}
func (UnimplementedApplicationServiceServer) CreateRepository(context.Context, *CreateRepositoryRequest) (*Repository, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepository not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplications(context.Context, *emptypb.Empty) (*GetApplicationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplications not implemented")
}
func (UnimplementedApplicationServiceServer) GetAvailableDomains(context.Context, *emptypb.Empty) (*AvailableDomains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableDomains not implemented")
}
func (UnimplementedApplicationServiceServer) AddAvailableDomain(context.Context, *AvailableDomain) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAvailableDomain not implemented")
}
func (UnimplementedApplicationServiceServer) CreateApplication(context.Context, *CreateApplicationRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateApplication not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplication(context.Context, *ApplicationIdRequest) (*Application, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplication not implemented")
}
func (UnimplementedApplicationServiceServer) UpdateApplication(context.Context, *UpdateApplicationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateApplication not implemented")
}
func (UnimplementedApplicationServiceServer) DeleteApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApplication not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationBuilds(context.Context, *ApplicationIdRequest) (*GetApplicationBuildsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationBuilds not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationBuild(context.Context, *GetApplicationBuildRequest) (*Build, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationBuild not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationBuildLog(context.Context, *GetApplicationBuildLogRequest) (*BuildLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationBuildLog not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationBuildArtifact(context.Context, *ApplicationIdRequest) (*ApplicationBuildArtifact, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationBuildArtifact not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationEnvVars(context.Context, *ApplicationIdRequest) (*ApplicationEnvVars, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationEnvVars not implemented")
}
func (UnimplementedApplicationServiceServer) SetApplicationEnvVar(context.Context, *SetApplicationEnvVarRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetApplicationEnvVar not implemented")
}
func (UnimplementedApplicationServiceServer) GetApplicationOutput(context.Context, *ApplicationIdRequest) (*ApplicationOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApplicationOutput not implemented")
}
func (UnimplementedApplicationServiceServer) CancelBuild(context.Context, *CancelBuildRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelBuild not implemented")
}
func (UnimplementedApplicationServiceServer) RetryCommitBuild(context.Context, *RetryCommitBuildRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RetryCommitBuild not implemented")
}
func (UnimplementedApplicationServiceServer) StartApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartApplication not implemented")
}
func (UnimplementedApplicationServiceServer) StopApplication(context.Context, *ApplicationIdRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopApplication not implemented")
}
func (UnimplementedApplicationServiceServer) mustEmbedUnimplementedApplicationServiceServer() {}

// UnsafeApplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApplicationServiceServer will
// result in compilation errors.
type UnsafeApplicationServiceServer interface {
	mustEmbedUnimplementedApplicationServiceServer()
}

func RegisterApplicationServiceServer(s grpc.ServiceRegistrar, srv ApplicationServiceServer) {
	s.RegisterService(&ApplicationService_ServiceDesc, srv)
}

func _ApplicationService_GetRepositories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetRepositories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetRepositories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetRepositories(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateRepository_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepositoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateRepository(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/CreateRepository",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateRepository(ctx, req.(*CreateRepositoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplications(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetAvailableDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetAvailableDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetAvailableDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetAvailableDomains(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_AddAvailableDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AvailableDomain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).AddAvailableDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/AddAvailableDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).AddAvailableDomain(ctx, req.(*AvailableDomain))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CreateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CreateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/CreateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CreateApplication(ctx, req.(*CreateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplication(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_UpdateApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateApplicationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).UpdateApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/UpdateApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).UpdateApplication(ctx, req.(*UpdateApplicationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_DeleteApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).DeleteApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/DeleteApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).DeleteApplication(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationBuilds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationBuilds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationBuilds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationBuilds(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationBuild(ctx, req.(*GetApplicationBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationBuildLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetApplicationBuildLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationBuildLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationBuildLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationBuildLog(ctx, req.(*GetApplicationBuildLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationBuildArtifact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationBuildArtifact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationBuildArtifact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationBuildArtifact(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationEnvVars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationEnvVars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationEnvVars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationEnvVars(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_SetApplicationEnvVar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetApplicationEnvVarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).SetApplicationEnvVar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/SetApplicationEnvVar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).SetApplicationEnvVar(ctx, req.(*SetApplicationEnvVarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_GetApplicationOutput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).GetApplicationOutput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/GetApplicationOutput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).GetApplicationOutput(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_CancelBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).CancelBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/CancelBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).CancelBuild(ctx, req.(*CancelBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_RetryCommitBuild_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RetryCommitBuildRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).RetryCommitBuild(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/RetryCommitBuild",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).RetryCommitBuild(ctx, req.(*RetryCommitBuildRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_StartApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).StartApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/StartApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).StartApplication(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApplicationService_StopApplication_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplicationIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApplicationServiceServer).StopApplication(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.protobuf.ApplicationService/StopApplication",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApplicationServiceServer).StopApplication(ctx, req.(*ApplicationIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApplicationService_ServiceDesc is the grpc.ServiceDesc for ApplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neoshowcase.protobuf.ApplicationService",
	HandlerType: (*ApplicationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRepositories",
			Handler:    _ApplicationService_GetRepositories_Handler,
		},
		{
			MethodName: "CreateRepository",
			Handler:    _ApplicationService_CreateRepository_Handler,
		},
		{
			MethodName: "GetApplications",
			Handler:    _ApplicationService_GetApplications_Handler,
		},
		{
			MethodName: "GetAvailableDomains",
			Handler:    _ApplicationService_GetAvailableDomains_Handler,
		},
		{
			MethodName: "AddAvailableDomain",
			Handler:    _ApplicationService_AddAvailableDomain_Handler,
		},
		{
			MethodName: "CreateApplication",
			Handler:    _ApplicationService_CreateApplication_Handler,
		},
		{
			MethodName: "GetApplication",
			Handler:    _ApplicationService_GetApplication_Handler,
		},
		{
			MethodName: "UpdateApplication",
			Handler:    _ApplicationService_UpdateApplication_Handler,
		},
		{
			MethodName: "DeleteApplication",
			Handler:    _ApplicationService_DeleteApplication_Handler,
		},
		{
			MethodName: "GetApplicationBuilds",
			Handler:    _ApplicationService_GetApplicationBuilds_Handler,
		},
		{
			MethodName: "GetApplicationBuild",
			Handler:    _ApplicationService_GetApplicationBuild_Handler,
		},
		{
			MethodName: "GetApplicationBuildLog",
			Handler:    _ApplicationService_GetApplicationBuildLog_Handler,
		},
		{
			MethodName: "GetApplicationBuildArtifact",
			Handler:    _ApplicationService_GetApplicationBuildArtifact_Handler,
		},
		{
			MethodName: "GetApplicationEnvVars",
			Handler:    _ApplicationService_GetApplicationEnvVars_Handler,
		},
		{
			MethodName: "SetApplicationEnvVar",
			Handler:    _ApplicationService_SetApplicationEnvVar_Handler,
		},
		{
			MethodName: "GetApplicationOutput",
			Handler:    _ApplicationService_GetApplicationOutput_Handler,
		},
		{
			MethodName: "CancelBuild",
			Handler:    _ApplicationService_CancelBuild_Handler,
		},
		{
			MethodName: "RetryCommitBuild",
			Handler:    _ApplicationService_RetryCommitBuild_Handler,
		},
		{
			MethodName: "StartApplication",
			Handler:    _ApplicationService_StartApplication_Handler,
		},
		{
			MethodName: "StopApplication",
			Handler:    _ApplicationService_StopApplication_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neoshowcase/protobuf/apiserver.proto",
}
