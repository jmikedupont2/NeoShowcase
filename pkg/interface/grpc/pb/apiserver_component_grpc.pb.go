// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.22.0
// source: neoshowcase/protobuf/apiserver_component.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ComponentServiceClient is the client API for ComponentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ComponentServiceClient interface {
	ConnectBuilder(ctx context.Context, opts ...grpc.CallOption) (ComponentService_ConnectBuilderClient, error)
	ConnectSSGen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ComponentService_ConnectSSGenClient, error)
}

type componentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewComponentServiceClient(cc grpc.ClientConnInterface) ComponentServiceClient {
	return &componentServiceClient{cc}
}

func (c *componentServiceClient) ConnectBuilder(ctx context.Context, opts ...grpc.CallOption) (ComponentService_ConnectBuilderClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComponentService_ServiceDesc.Streams[0], "/neoshowcase.protobuf.ComponentService/ConnectBuilder", opts...)
	if err != nil {
		return nil, err
	}
	x := &componentServiceConnectBuilderClient{stream}
	return x, nil
}

type ComponentService_ConnectBuilderClient interface {
	Send(*BuilderResponse) error
	Recv() (*BuilderRequest, error)
	grpc.ClientStream
}

type componentServiceConnectBuilderClient struct {
	grpc.ClientStream
}

func (x *componentServiceConnectBuilderClient) Send(m *BuilderResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *componentServiceConnectBuilderClient) Recv() (*BuilderRequest, error) {
	m := new(BuilderRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *componentServiceClient) ConnectSSGen(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ComponentService_ConnectSSGenClient, error) {
	stream, err := c.cc.NewStream(ctx, &ComponentService_ServiceDesc.Streams[1], "/neoshowcase.protobuf.ComponentService/ConnectSSGen", opts...)
	if err != nil {
		return nil, err
	}
	x := &componentServiceConnectSSGenClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ComponentService_ConnectSSGenClient interface {
	Recv() (*SSGenRequest, error)
	grpc.ClientStream
}

type componentServiceConnectSSGenClient struct {
	grpc.ClientStream
}

func (x *componentServiceConnectSSGenClient) Recv() (*SSGenRequest, error) {
	m := new(SSGenRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ComponentServiceServer is the server API for ComponentService service.
// All implementations must embed UnimplementedComponentServiceServer
// for forward compatibility
type ComponentServiceServer interface {
	ConnectBuilder(ComponentService_ConnectBuilderServer) error
	ConnectSSGen(*emptypb.Empty, ComponentService_ConnectSSGenServer) error
	mustEmbedUnimplementedComponentServiceServer()
}

// UnimplementedComponentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedComponentServiceServer struct {
}

func (UnimplementedComponentServiceServer) ConnectBuilder(ComponentService_ConnectBuilderServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectBuilder not implemented")
}
func (UnimplementedComponentServiceServer) ConnectSSGen(*emptypb.Empty, ComponentService_ConnectSSGenServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectSSGen not implemented")
}
func (UnimplementedComponentServiceServer) mustEmbedUnimplementedComponentServiceServer() {}

// UnsafeComponentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ComponentServiceServer will
// result in compilation errors.
type UnsafeComponentServiceServer interface {
	mustEmbedUnimplementedComponentServiceServer()
}

func RegisterComponentServiceServer(s grpc.ServiceRegistrar, srv ComponentServiceServer) {
	s.RegisterService(&ComponentService_ServiceDesc, srv)
}

func _ComponentService_ConnectBuilder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ComponentServiceServer).ConnectBuilder(&componentServiceConnectBuilderServer{stream})
}

type ComponentService_ConnectBuilderServer interface {
	Send(*BuilderRequest) error
	Recv() (*BuilderResponse, error)
	grpc.ServerStream
}

type componentServiceConnectBuilderServer struct {
	grpc.ServerStream
}

func (x *componentServiceConnectBuilderServer) Send(m *BuilderRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *componentServiceConnectBuilderServer) Recv() (*BuilderResponse, error) {
	m := new(BuilderResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ComponentService_ConnectSSGen_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ComponentServiceServer).ConnectSSGen(m, &componentServiceConnectSSGenServer{stream})
}

type ComponentService_ConnectSSGenServer interface {
	Send(*SSGenRequest) error
	grpc.ServerStream
}

type componentServiceConnectSSGenServer struct {
	grpc.ServerStream
}

func (x *componentServiceConnectSSGenServer) Send(m *SSGenRequest) error {
	return x.ServerStream.SendMsg(m)
}

// ComponentService_ServiceDesc is the grpc.ServiceDesc for ComponentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ComponentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "neoshowcase.protobuf.ComponentService",
	HandlerType: (*ComponentServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectBuilder",
			Handler:       _ComponentService_ConnectBuilder_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ConnectSSGen",
			Handler:       _ComponentService_ConnectSSGen_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "neoshowcase/protobuf/apiserver_component.proto",
}
