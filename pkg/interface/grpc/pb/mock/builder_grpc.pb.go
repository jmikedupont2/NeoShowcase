// Code generated by MockGen. DO NOT EDIT.
// Source: builder_grpc.pb.go

// Package mock_pb is a generated GoMock package.
package mock_pb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	pb "github.com/traPtitech/neoshowcase/pkg/interface/grpc/pb"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockBuilderServiceClient is a mock of BuilderServiceClient interface.
type MockBuilderServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderServiceClientMockRecorder
}

// MockBuilderServiceClientMockRecorder is the mock recorder for MockBuilderServiceClient.
type MockBuilderServiceClientMockRecorder struct {
	mock *MockBuilderServiceClient
}

// NewMockBuilderServiceClient creates a new mock instance.
func NewMockBuilderServiceClient(ctrl *gomock.Controller) *MockBuilderServiceClient {
	mock := &MockBuilderServiceClient{ctrl: ctrl}
	mock.recorder = &MockBuilderServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderServiceClient) EXPECT() *MockBuilderServiceClientMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockBuilderServiceClient) CancelTask(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.CancelTaskResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CancelTask", varargs...)
	ret0, _ := ret[0].(*pb.CancelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockBuilderServiceClientMockRecorder) CancelTask(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockBuilderServiceClient)(nil).CancelTask), varargs...)
}

// ConnectEventStream mocks base method.
func (m *MockBuilderServiceClient) ConnectEventStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (pb.BuilderService_ConnectEventStreamClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ConnectEventStream", varargs...)
	ret0, _ := ret[0].(pb.BuilderService_ConnectEventStreamClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectEventStream indicates an expected call of ConnectEventStream.
func (mr *MockBuilderServiceClientMockRecorder) ConnectEventStream(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectEventStream", reflect.TypeOf((*MockBuilderServiceClient)(nil).ConnectEventStream), varargs...)
}

// GetStatus mocks base method.
func (m *MockBuilderServiceClient) GetStatus(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.GetStatusResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetStatus", varargs...)
	ret0, _ := ret[0].(*pb.GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockBuilderServiceClientMockRecorder) GetStatus(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockBuilderServiceClient)(nil).GetStatus), varargs...)
}

// StartBuildImage mocks base method.
func (m *MockBuilderServiceClient) StartBuildImage(ctx context.Context, in *pb.StartBuildImageRequest, opts ...grpc.CallOption) (*pb.StartBuildImageResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBuildImage", varargs...)
	ret0, _ := ret[0].(*pb.StartBuildImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuildImage indicates an expected call of StartBuildImage.
func (mr *MockBuilderServiceClientMockRecorder) StartBuildImage(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildImage", reflect.TypeOf((*MockBuilderServiceClient)(nil).StartBuildImage), varargs...)
}

// StartBuildStatic mocks base method.
func (m *MockBuilderServiceClient) StartBuildStatic(ctx context.Context, in *pb.StartBuildStaticRequest, opts ...grpc.CallOption) (*pb.StartBuildStaticResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StartBuildStatic", varargs...)
	ret0, _ := ret[0].(*pb.StartBuildStaticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuildStatic indicates an expected call of StartBuildStatic.
func (mr *MockBuilderServiceClientMockRecorder) StartBuildStatic(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildStatic", reflect.TypeOf((*MockBuilderServiceClient)(nil).StartBuildStatic), varargs...)
}

// MockBuilderService_ConnectEventStreamClient is a mock of BuilderService_ConnectEventStreamClient interface.
type MockBuilderService_ConnectEventStreamClient struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderService_ConnectEventStreamClientMockRecorder
}

// MockBuilderService_ConnectEventStreamClientMockRecorder is the mock recorder for MockBuilderService_ConnectEventStreamClient.
type MockBuilderService_ConnectEventStreamClientMockRecorder struct {
	mock *MockBuilderService_ConnectEventStreamClient
}

// NewMockBuilderService_ConnectEventStreamClient creates a new mock instance.
func NewMockBuilderService_ConnectEventStreamClient(ctrl *gomock.Controller) *MockBuilderService_ConnectEventStreamClient {
	mock := &MockBuilderService_ConnectEventStreamClient{ctrl: ctrl}
	mock.recorder = &MockBuilderService_ConnectEventStreamClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderService_ConnectEventStreamClient) EXPECT() *MockBuilderService_ConnectEventStreamClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockBuilderService_ConnectEventStreamClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockBuilderService_ConnectEventStreamClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).Context))
}

// Header mocks base method.
func (m *MockBuilderService_ConnectEventStreamClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockBuilderService_ConnectEventStreamClient) Recv() (*pb.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*pb.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m_2 *MockBuilderService_ConnectEventStreamClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).RecvMsg), m)
}

// SendMsg mocks base method.
func (m_2 *MockBuilderService_ConnectEventStreamClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).SendMsg), m)
}

// Trailer mocks base method.
func (m *MockBuilderService_ConnectEventStreamClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockBuilderService_ConnectEventStreamClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockBuilderService_ConnectEventStreamClient)(nil).Trailer))
}

// MockBuilderServiceServer is a mock of BuilderServiceServer interface.
type MockBuilderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderServiceServerMockRecorder
}

// MockBuilderServiceServerMockRecorder is the mock recorder for MockBuilderServiceServer.
type MockBuilderServiceServerMockRecorder struct {
	mock *MockBuilderServiceServer
}

// NewMockBuilderServiceServer creates a new mock instance.
func NewMockBuilderServiceServer(ctrl *gomock.Controller) *MockBuilderServiceServer {
	mock := &MockBuilderServiceServer{ctrl: ctrl}
	mock.recorder = &MockBuilderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderServiceServer) EXPECT() *MockBuilderServiceServerMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockBuilderServiceServer) CancelTask(arg0 context.Context, arg1 *emptypb.Empty) (*pb.CancelTaskResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", arg0, arg1)
	ret0, _ := ret[0].(*pb.CancelTaskResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockBuilderServiceServerMockRecorder) CancelTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockBuilderServiceServer)(nil).CancelTask), arg0, arg1)
}

// ConnectEventStream mocks base method.
func (m *MockBuilderServiceServer) ConnectEventStream(arg0 *emptypb.Empty, arg1 pb.BuilderService_ConnectEventStreamServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectEventStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConnectEventStream indicates an expected call of ConnectEventStream.
func (mr *MockBuilderServiceServerMockRecorder) ConnectEventStream(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectEventStream", reflect.TypeOf((*MockBuilderServiceServer)(nil).ConnectEventStream), arg0, arg1)
}

// GetStatus mocks base method.
func (m *MockBuilderServiceServer) GetStatus(arg0 context.Context, arg1 *emptypb.Empty) (*pb.GetStatusResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*pb.GetStatusResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockBuilderServiceServerMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockBuilderServiceServer)(nil).GetStatus), arg0, arg1)
}

// StartBuildImage mocks base method.
func (m *MockBuilderServiceServer) StartBuildImage(arg0 context.Context, arg1 *pb.StartBuildImageRequest) (*pb.StartBuildImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBuildImage", arg0, arg1)
	ret0, _ := ret[0].(*pb.StartBuildImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuildImage indicates an expected call of StartBuildImage.
func (mr *MockBuilderServiceServerMockRecorder) StartBuildImage(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildImage", reflect.TypeOf((*MockBuilderServiceServer)(nil).StartBuildImage), arg0, arg1)
}

// StartBuildStatic mocks base method.
func (m *MockBuilderServiceServer) StartBuildStatic(arg0 context.Context, arg1 *pb.StartBuildStaticRequest) (*pb.StartBuildStaticResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartBuildStatic", arg0, arg1)
	ret0, _ := ret[0].(*pb.StartBuildStaticResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartBuildStatic indicates an expected call of StartBuildStatic.
func (mr *MockBuilderServiceServerMockRecorder) StartBuildStatic(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartBuildStatic", reflect.TypeOf((*MockBuilderServiceServer)(nil).StartBuildStatic), arg0, arg1)
}

// mustEmbedUnimplementedBuilderServiceServer mocks base method.
func (m *MockBuilderServiceServer) mustEmbedUnimplementedBuilderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuilderServiceServer")
}

// mustEmbedUnimplementedBuilderServiceServer indicates an expected call of mustEmbedUnimplementedBuilderServiceServer.
func (mr *MockBuilderServiceServerMockRecorder) mustEmbedUnimplementedBuilderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuilderServiceServer", reflect.TypeOf((*MockBuilderServiceServer)(nil).mustEmbedUnimplementedBuilderServiceServer))
}

// MockUnsafeBuilderServiceServer is a mock of UnsafeBuilderServiceServer interface.
type MockUnsafeBuilderServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeBuilderServiceServerMockRecorder
}

// MockUnsafeBuilderServiceServerMockRecorder is the mock recorder for MockUnsafeBuilderServiceServer.
type MockUnsafeBuilderServiceServerMockRecorder struct {
	mock *MockUnsafeBuilderServiceServer
}

// NewMockUnsafeBuilderServiceServer creates a new mock instance.
func NewMockUnsafeBuilderServiceServer(ctrl *gomock.Controller) *MockUnsafeBuilderServiceServer {
	mock := &MockUnsafeBuilderServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeBuilderServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeBuilderServiceServer) EXPECT() *MockUnsafeBuilderServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedBuilderServiceServer mocks base method.
func (m *MockUnsafeBuilderServiceServer) mustEmbedUnimplementedBuilderServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedBuilderServiceServer")
}

// mustEmbedUnimplementedBuilderServiceServer indicates an expected call of mustEmbedUnimplementedBuilderServiceServer.
func (mr *MockUnsafeBuilderServiceServerMockRecorder) mustEmbedUnimplementedBuilderServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedBuilderServiceServer", reflect.TypeOf((*MockUnsafeBuilderServiceServer)(nil).mustEmbedUnimplementedBuilderServiceServer))
}

// MockBuilderService_ConnectEventStreamServer is a mock of BuilderService_ConnectEventStreamServer interface.
type MockBuilderService_ConnectEventStreamServer struct {
	ctrl     *gomock.Controller
	recorder *MockBuilderService_ConnectEventStreamServerMockRecorder
}

// MockBuilderService_ConnectEventStreamServerMockRecorder is the mock recorder for MockBuilderService_ConnectEventStreamServer.
type MockBuilderService_ConnectEventStreamServerMockRecorder struct {
	mock *MockBuilderService_ConnectEventStreamServer
}

// NewMockBuilderService_ConnectEventStreamServer creates a new mock instance.
func NewMockBuilderService_ConnectEventStreamServer(ctrl *gomock.Controller) *MockBuilderService_ConnectEventStreamServer {
	mock := &MockBuilderService_ConnectEventStreamServer{ctrl: ctrl}
	mock.recorder = &MockBuilderService_ConnectEventStreamServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuilderService_ConnectEventStreamServer) EXPECT() *MockBuilderService_ConnectEventStreamServerMockRecorder {
	return m.recorder
}

// Context mocks base method.
func (m *MockBuilderService_ConnectEventStreamServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).Context))
}

// RecvMsg mocks base method.
func (m_2 *MockBuilderService_ConnectEventStreamServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).RecvMsg), m)
}

// Send mocks base method.
func (m *MockBuilderService_ConnectEventStreamServer) Send(arg0 *pb.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).Send), arg0)
}

// SendHeader mocks base method.
func (m *MockBuilderService_ConnectEventStreamServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method.
func (m_2 *MockBuilderService_ConnectEventStreamServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).SendMsg), m)
}

// SetHeader mocks base method.
func (m *MockBuilderService_ConnectEventStreamServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockBuilderService_ConnectEventStreamServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockBuilderService_ConnectEventStreamServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockBuilderService_ConnectEventStreamServer)(nil).SetTrailer), arg0)
}
