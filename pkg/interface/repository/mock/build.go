// Code generated by MockGen. DO NOT EDIT.
// Source: build.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/neoshowcase/pkg/domain"
	repository "github.com/traPtitech/neoshowcase/pkg/interface/repository"
)

// MockBuildRepository is a mock of BuildRepository interface.
type MockBuildRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBuildRepositoryMockRecorder
}

// MockBuildRepositoryMockRecorder is the mock recorder for MockBuildRepository.
type MockBuildRepositoryMockRecorder struct {
	mock *MockBuildRepository
}

// NewMockBuildRepository creates a new mock instance.
func NewMockBuildRepository(ctrl *gomock.Controller) *MockBuildRepository {
	mock := &MockBuildRepository{ctrl: ctrl}
	mock.recorder = &MockBuildRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBuildRepository) EXPECT() *MockBuildRepositoryMockRecorder {
	return m.recorder
}

// CreateBuild mocks base method.
func (m *MockBuildRepository) CreateBuild(ctx context.Context, applicationID, commit string) (*domain.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBuild", ctx, applicationID, commit)
	ret0, _ := ret[0].(*domain.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBuild indicates an expected call of CreateBuild.
func (mr *MockBuildRepositoryMockRecorder) CreateBuild(ctx, applicationID, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBuild", reflect.TypeOf((*MockBuildRepository)(nil).CreateBuild), ctx, applicationID, commit)
}

// GetBuild mocks base method.
func (m *MockBuildRepository) GetBuild(ctx context.Context, buildID string) (*domain.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuild", ctx, buildID)
	ret0, _ := ret[0].(*domain.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuild indicates an expected call of GetBuild.
func (mr *MockBuildRepositoryMockRecorder) GetBuild(ctx, buildID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuild", reflect.TypeOf((*MockBuildRepository)(nil).GetBuild), ctx, buildID)
}

// GetBuilds mocks base method.
func (m *MockBuildRepository) GetBuilds(ctx context.Context, applicationID string) ([]*domain.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuilds", ctx, applicationID)
	ret0, _ := ret[0].([]*domain.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuilds indicates an expected call of GetBuilds.
func (mr *MockBuildRepositoryMockRecorder) GetBuilds(ctx, applicationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuilds", reflect.TypeOf((*MockBuildRepository)(nil).GetBuilds), ctx, applicationID)
}

// GetBuildsInCommit mocks base method.
func (m *MockBuildRepository) GetBuildsInCommit(ctx context.Context, commits []string) ([]*domain.Build, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBuildsInCommit", ctx, commits)
	ret0, _ := ret[0].([]*domain.Build)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBuildsInCommit indicates an expected call of GetBuildsInCommit.
func (mr *MockBuildRepositoryMockRecorder) GetBuildsInCommit(ctx, commits interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBuildsInCommit", reflect.TypeOf((*MockBuildRepository)(nil).GetBuildsInCommit), ctx, commits)
}

// UpdateBuild mocks base method.
func (m *MockBuildRepository) UpdateBuild(ctx context.Context, args repository.UpdateBuildArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBuild", ctx, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBuild indicates an expected call of UpdateBuild.
func (mr *MockBuildRepositoryMockRecorder) UpdateBuild(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBuild", reflect.TypeOf((*MockBuildRepository)(nil).UpdateBuild), ctx, args)
}
