// Code generated by MockGen. DO NOT EDIT.
// Source: application.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/neoshowcase/pkg/domain"
	builder "github.com/traPtitech/neoshowcase/pkg/domain/builder"
	repository "github.com/traPtitech/neoshowcase/pkg/interface/repository"
)

// MockApplicationRepository is a mock of ApplicationRepository interface.
type MockApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryMockRecorder
}

// MockApplicationRepositoryMockRecorder is the mock recorder for MockApplicationRepository.
type MockApplicationRepositoryMockRecorder struct {
	mock *MockApplicationRepository
}

// NewMockApplicationRepository creates a new mock instance.
func NewMockApplicationRepository(ctrl *gomock.Controller) *MockApplicationRepository {
	mock := &MockApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationRepository) EXPECT() *MockApplicationRepositoryMockRecorder {
	return m.recorder
}

// CreateApplication mocks base method.
func (m *MockApplicationRepository) CreateApplication(ctx context.Context, args repository.CreateApplicationArgs) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", ctx, args)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationRepositoryMockRecorder) CreateApplication(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).CreateApplication), ctx, args)
}

// CreateBranch mocks base method.
func (m *MockApplicationRepository) CreateBranch(ctx context.Context, appID, branchName string, buildType builder.BuildType) (*domain.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBranch", ctx, appID, branchName, buildType)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBranch indicates an expected call of CreateBranch.
func (mr *MockApplicationRepositoryMockRecorder) CreateBranch(ctx, appID, branchName, buildType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBranch", reflect.TypeOf((*MockApplicationRepository)(nil).CreateBranch), ctx, appID, branchName, buildType)
}

// GetApplicationByID mocks base method.
func (m *MockApplicationRepository) GetApplicationByID(ctx context.Context, id string) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationByID", ctx, id)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationByID indicates an expected call of GetApplicationByID.
func (mr *MockApplicationRepositoryMockRecorder) GetApplicationByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationByID", reflect.TypeOf((*MockApplicationRepository)(nil).GetApplicationByID), ctx, id)
}

// GetBranchByID mocks base method.
func (m *MockApplicationRepository) GetBranchByID(ctx context.Context, id string) (*domain.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchByID", ctx, id)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchByID indicates an expected call of GetBranchByID.
func (mr *MockApplicationRepositoryMockRecorder) GetBranchByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchByID", reflect.TypeOf((*MockApplicationRepository)(nil).GetBranchByID), ctx, id)
}

// GetBranchByRepoAndBranchName mocks base method.
func (m *MockApplicationRepository) GetBranchByRepoAndBranchName(ctx context.Context, repoURL, branch string) (*domain.Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBranchByRepoAndBranchName", ctx, repoURL, branch)
	ret0, _ := ret[0].(*domain.Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBranchByRepoAndBranchName indicates an expected call of GetBranchByRepoAndBranchName.
func (mr *MockApplicationRepositoryMockRecorder) GetBranchByRepoAndBranchName(ctx, repoURL, branch interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBranchByRepoAndBranchName", reflect.TypeOf((*MockApplicationRepository)(nil).GetBranchByRepoAndBranchName), ctx, repoURL, branch)
}

// SetWebsite mocks base method.
func (m *MockApplicationRepository) SetWebsite(ctx context.Context, envID, fqdn string, httpPort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetWebsite", ctx, envID, fqdn, httpPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetWebsite indicates an expected call of SetWebsite.
func (mr *MockApplicationRepositoryMockRecorder) SetWebsite(ctx, envID, fqdn, httpPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetWebsite", reflect.TypeOf((*MockApplicationRepository)(nil).SetWebsite), ctx, envID, fqdn, httpPort)
}
