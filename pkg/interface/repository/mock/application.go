// Code generated by MockGen. DO NOT EDIT.
// Source: application.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/traPtitech/neoshowcase/pkg/domain"
	repository "github.com/traPtitech/neoshowcase/pkg/interface/repository"
)

// MockApplicationRepository is a mock of ApplicationRepository interface.
type MockApplicationRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryMockRecorder
}

// MockApplicationRepositoryMockRecorder is the mock recorder for MockApplicationRepository.
type MockApplicationRepositoryMockRecorder struct {
	mock *MockApplicationRepository
}

// NewMockApplicationRepository creates a new mock instance.
func NewMockApplicationRepository(ctrl *gomock.Controller) *MockApplicationRepository {
	mock := &MockApplicationRepository{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationRepository) EXPECT() *MockApplicationRepositoryMockRecorder {
	return m.recorder
}

// AddWebsite mocks base method.
func (m *MockApplicationRepository) AddWebsite(ctx context.Context, applicationID, fqdn string, https bool, httpPort int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWebsite", ctx, applicationID, fqdn, https, httpPort)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWebsite indicates an expected call of AddWebsite.
func (mr *MockApplicationRepositoryMockRecorder) AddWebsite(ctx, applicationID, fqdn, https, httpPort interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWebsite", reflect.TypeOf((*MockApplicationRepository)(nil).AddWebsite), ctx, applicationID, fqdn, https, httpPort)
}

// CreateApplication mocks base method.
func (m *MockApplicationRepository) CreateApplication(ctx context.Context, args repository.CreateApplicationArgs) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", ctx, args)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockApplicationRepositoryMockRecorder) CreateApplication(ctx, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).CreateApplication), ctx, args)
}

// DeleteWebsite mocks base method.
func (m *MockApplicationRepository) DeleteWebsite(ctx context.Context, applicationID, websiteID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWebsite", ctx, applicationID, websiteID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWebsite indicates an expected call of DeleteWebsite.
func (mr *MockApplicationRepositoryMockRecorder) DeleteWebsite(ctx, applicationID, websiteID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWebsite", reflect.TypeOf((*MockApplicationRepository)(nil).DeleteWebsite), ctx, applicationID, websiteID)
}

// GetApplication mocks base method.
func (m *MockApplicationRepository) GetApplication(ctx context.Context, id string) (*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, id)
	ret0, _ := ret[0].(*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockApplicationRepositoryMockRecorder) GetApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockApplicationRepository)(nil).GetApplication), ctx, id)
}

// GetApplications mocks base method.
func (m *MockApplicationRepository) GetApplications(ctx context.Context, cond repository.GetApplicationCondition) ([]*domain.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", ctx, cond)
	ret0, _ := ret[0].([]*domain.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockApplicationRepositoryMockRecorder) GetApplications(ctx, cond interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockApplicationRepository)(nil).GetApplications), ctx, cond)
}

// GetWebsites mocks base method.
func (m *MockApplicationRepository) GetWebsites(ctx context.Context, applicationIDs []string) ([]*domain.Website, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsites", ctx, applicationIDs)
	ret0, _ := ret[0].([]*domain.Website)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsites indicates an expected call of GetWebsites.
func (mr *MockApplicationRepositoryMockRecorder) GetWebsites(ctx, applicationIDs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsites", reflect.TypeOf((*MockApplicationRepository)(nil).GetWebsites), ctx, applicationIDs)
}

// RegisterApplicationOwner mocks base method.
func (m *MockApplicationRepository) RegisterApplicationOwner(ctx context.Context, applicationID, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterApplicationOwner", ctx, applicationID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterApplicationOwner indicates an expected call of RegisterApplicationOwner.
func (mr *MockApplicationRepositoryMockRecorder) RegisterApplicationOwner(ctx, applicationID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterApplicationOwner", reflect.TypeOf((*MockApplicationRepository)(nil).RegisterApplicationOwner), ctx, applicationID, userID)
}

// UpdateApplication mocks base method.
func (m *MockApplicationRepository) UpdateApplication(ctx context.Context, id string, args repository.UpdateApplicationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", ctx, id, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockApplicationRepositoryMockRecorder) UpdateApplication(ctx, id, args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockApplicationRepository)(nil).UpdateApplication), ctx, id, args)
}
