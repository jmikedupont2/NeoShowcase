// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// StaticSiteDetail is an object representing the database table.
type StaticSiteDetail struct {
	SiteID     string      `boil:"site_id" json:"site_id" toml:"site_id" yaml:"site_id"`
	ArtifactID null.String `boil:"artifact_id" json:"artifact_id,omitempty" toml:"artifact_id" yaml:"artifact_id,omitempty"`

	R *staticSiteDetailR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L staticSiteDetailL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var StaticSiteDetailColumns = struct {
	SiteID     string
	ArtifactID string
}{
	SiteID:     "site_id",
	ArtifactID: "artifact_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var StaticSiteDetailWhere = struct {
	SiteID     whereHelperstring
	ArtifactID whereHelpernull_String
}{
	SiteID:     whereHelperstring{field: "`static_site_details`.`site_id`"},
	ArtifactID: whereHelpernull_String{field: "`static_site_details`.`artifact_id`"},
}

// StaticSiteDetailRels is where relationship names are stored.
var StaticSiteDetailRels = struct {
	Artifact string
	Site     string
}{
	Artifact: "Artifact",
	Site:     "Site",
}

// staticSiteDetailR is where relationships are stored.
type staticSiteDetailR struct {
	Artifact *Artifact `boil:"Artifact" json:"Artifact" toml:"Artifact" yaml:"Artifact"`
	Site     *Site     `boil:"Site" json:"Site" toml:"Site" yaml:"Site"`
}

// NewStruct creates a new relationship struct
func (*staticSiteDetailR) NewStruct() *staticSiteDetailR {
	return &staticSiteDetailR{}
}

// staticSiteDetailL is where Load methods for each relationship are stored.
type staticSiteDetailL struct{}

var (
	staticSiteDetailAllColumns            = []string{"site_id", "artifact_id"}
	staticSiteDetailColumnsWithoutDefault = []string{"site_id", "artifact_id"}
	staticSiteDetailColumnsWithDefault    = []string{}
	staticSiteDetailPrimaryKeyColumns     = []string{"site_id"}
)

type (
	// StaticSiteDetailSlice is an alias for a slice of pointers to StaticSiteDetail.
	// This should generally be used opposed to []StaticSiteDetail.
	StaticSiteDetailSlice []*StaticSiteDetail
	// StaticSiteDetailHook is the signature for custom StaticSiteDetail hook methods
	StaticSiteDetailHook func(context.Context, boil.ContextExecutor, *StaticSiteDetail) error

	staticSiteDetailQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	staticSiteDetailType                 = reflect.TypeOf(&StaticSiteDetail{})
	staticSiteDetailMapping              = queries.MakeStructMapping(staticSiteDetailType)
	staticSiteDetailPrimaryKeyMapping, _ = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, staticSiteDetailPrimaryKeyColumns)
	staticSiteDetailInsertCacheMut       sync.RWMutex
	staticSiteDetailInsertCache          = make(map[string]insertCache)
	staticSiteDetailUpdateCacheMut       sync.RWMutex
	staticSiteDetailUpdateCache          = make(map[string]updateCache)
	staticSiteDetailUpsertCacheMut       sync.RWMutex
	staticSiteDetailUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var staticSiteDetailBeforeInsertHooks []StaticSiteDetailHook
var staticSiteDetailBeforeUpdateHooks []StaticSiteDetailHook
var staticSiteDetailBeforeDeleteHooks []StaticSiteDetailHook
var staticSiteDetailBeforeUpsertHooks []StaticSiteDetailHook

var staticSiteDetailAfterInsertHooks []StaticSiteDetailHook
var staticSiteDetailAfterSelectHooks []StaticSiteDetailHook
var staticSiteDetailAfterUpdateHooks []StaticSiteDetailHook
var staticSiteDetailAfterDeleteHooks []StaticSiteDetailHook
var staticSiteDetailAfterUpsertHooks []StaticSiteDetailHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *StaticSiteDetail) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *StaticSiteDetail) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *StaticSiteDetail) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *StaticSiteDetail) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *StaticSiteDetail) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *StaticSiteDetail) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *StaticSiteDetail) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *StaticSiteDetail) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *StaticSiteDetail) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range staticSiteDetailAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddStaticSiteDetailHook registers your hook function for all future operations.
func AddStaticSiteDetailHook(hookPoint boil.HookPoint, staticSiteDetailHook StaticSiteDetailHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		staticSiteDetailBeforeInsertHooks = append(staticSiteDetailBeforeInsertHooks, staticSiteDetailHook)
	case boil.BeforeUpdateHook:
		staticSiteDetailBeforeUpdateHooks = append(staticSiteDetailBeforeUpdateHooks, staticSiteDetailHook)
	case boil.BeforeDeleteHook:
		staticSiteDetailBeforeDeleteHooks = append(staticSiteDetailBeforeDeleteHooks, staticSiteDetailHook)
	case boil.BeforeUpsertHook:
		staticSiteDetailBeforeUpsertHooks = append(staticSiteDetailBeforeUpsertHooks, staticSiteDetailHook)
	case boil.AfterInsertHook:
		staticSiteDetailAfterInsertHooks = append(staticSiteDetailAfterInsertHooks, staticSiteDetailHook)
	case boil.AfterSelectHook:
		staticSiteDetailAfterSelectHooks = append(staticSiteDetailAfterSelectHooks, staticSiteDetailHook)
	case boil.AfterUpdateHook:
		staticSiteDetailAfterUpdateHooks = append(staticSiteDetailAfterUpdateHooks, staticSiteDetailHook)
	case boil.AfterDeleteHook:
		staticSiteDetailAfterDeleteHooks = append(staticSiteDetailAfterDeleteHooks, staticSiteDetailHook)
	case boil.AfterUpsertHook:
		staticSiteDetailAfterUpsertHooks = append(staticSiteDetailAfterUpsertHooks, staticSiteDetailHook)
	}
}

// One returns a single staticSiteDetail record from the query.
func (q staticSiteDetailQuery) One(ctx context.Context, exec boil.ContextExecutor) (*StaticSiteDetail, error) {
	o := &StaticSiteDetail{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for static_site_details")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all StaticSiteDetail records from the query.
func (q staticSiteDetailQuery) All(ctx context.Context, exec boil.ContextExecutor) (StaticSiteDetailSlice, error) {
	var o []*StaticSiteDetail

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to StaticSiteDetail slice")
	}

	if len(staticSiteDetailAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all StaticSiteDetail records in the query.
func (q staticSiteDetailQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count static_site_details rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q staticSiteDetailQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if static_site_details exists")
	}

	return count > 0, nil
}

// Artifact pointed to by the foreign key.
func (o *StaticSiteDetail) Artifact(mods ...qm.QueryMod) artifactQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ArtifactID),
	}

	queryMods = append(queryMods, mods...)

	query := Artifacts(queryMods...)
	queries.SetFrom(query.Query, "`artifacts`")

	return query
}

// Site pointed to by the foreign key.
func (o *StaticSiteDetail) Site(mods ...qm.QueryMod) siteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SiteID),
	}

	queryMods = append(queryMods, mods...)

	query := Sites(queryMods...)
	queries.SetFrom(query.Query, "`sites`")

	return query
}

// LoadArtifact allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staticSiteDetailL) LoadArtifact(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaticSiteDetail interface{}, mods queries.Applicator) error {
	var slice []*StaticSiteDetail
	var object *StaticSiteDetail

	if singular {
		object = maybeStaticSiteDetail.(*StaticSiteDetail)
	} else {
		slice = *maybeStaticSiteDetail.(*[]*StaticSiteDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staticSiteDetailR{}
		}
		if !queries.IsNil(object.ArtifactID) {
			args = append(args, object.ArtifactID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staticSiteDetailR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ArtifactID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.ArtifactID) {
				args = append(args, obj.ArtifactID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`artifacts`),
		qm.WhereIn(`artifacts.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Artifact")
	}

	var resultSlice []*Artifact
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Artifact")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for artifacts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for artifacts")
	}

	if len(staticSiteDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Artifact = foreign
		if foreign.R == nil {
			foreign.R = &artifactR{}
		}
		foreign.R.StaticSiteDetails = append(foreign.R.StaticSiteDetails, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.ArtifactID, foreign.ID) {
				local.R.Artifact = foreign
				if foreign.R == nil {
					foreign.R = &artifactR{}
				}
				foreign.R.StaticSiteDetails = append(foreign.R.StaticSiteDetails, local)
				break
			}
		}
	}

	return nil
}

// LoadSite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (staticSiteDetailL) LoadSite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeStaticSiteDetail interface{}, mods queries.Applicator) error {
	var slice []*StaticSiteDetail
	var object *StaticSiteDetail

	if singular {
		object = maybeStaticSiteDetail.(*StaticSiteDetail)
	} else {
		slice = *maybeStaticSiteDetail.(*[]*StaticSiteDetail)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &staticSiteDetailR{}
		}
		args = append(args, object.SiteID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &staticSiteDetailR{}
			}

			for _, a := range args {
				if a == obj.SiteID {
					continue Outer
				}
			}

			args = append(args, obj.SiteID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`sites`),
		qm.WhereIn(`sites.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Site")
	}

	var resultSlice []*Site
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Site")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for sites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for sites")
	}

	if len(staticSiteDetailAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Site = foreign
		if foreign.R == nil {
			foreign.R = &siteR{}
		}
		foreign.R.StaticSiteDetail = object
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SiteID == foreign.ID {
				local.R.Site = foreign
				if foreign.R == nil {
					foreign.R = &siteR{}
				}
				foreign.R.StaticSiteDetail = local
				break
			}
		}
	}

	return nil
}

// SetArtifact of the staticSiteDetail to the related item.
// Sets o.R.Artifact to related.
// Adds o to related.R.StaticSiteDetails.
func (o *StaticSiteDetail) SetArtifact(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Artifact) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `static_site_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"artifact_id"}),
		strmangle.WhereClause("`", "`", 0, staticSiteDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.ArtifactID, related.ID)
	if o.R == nil {
		o.R = &staticSiteDetailR{
			Artifact: related,
		}
	} else {
		o.R.Artifact = related
	}

	if related.R == nil {
		related.R = &artifactR{
			StaticSiteDetails: StaticSiteDetailSlice{o},
		}
	} else {
		related.R.StaticSiteDetails = append(related.R.StaticSiteDetails, o)
	}

	return nil
}

// RemoveArtifact relationship.
// Sets o.R.Artifact to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *StaticSiteDetail) RemoveArtifact(ctx context.Context, exec boil.ContextExecutor, related *Artifact) error {
	var err error

	queries.SetScanner(&o.ArtifactID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("artifact_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Artifact = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.StaticSiteDetails {
		if queries.Equal(o.ArtifactID, ri.ArtifactID) {
			continue
		}

		ln := len(related.R.StaticSiteDetails)
		if ln > 1 && i < ln-1 {
			related.R.StaticSiteDetails[i] = related.R.StaticSiteDetails[ln-1]
		}
		related.R.StaticSiteDetails = related.R.StaticSiteDetails[:ln-1]
		break
	}
	return nil
}

// SetSite of the staticSiteDetail to the related item.
// Sets o.R.Site to related.
// Adds o to related.R.StaticSiteDetail.
func (o *StaticSiteDetail) SetSite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Site) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `static_site_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"site_id"}),
		strmangle.WhereClause("`", "`", 0, staticSiteDetailPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.SiteID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SiteID = related.ID
	if o.R == nil {
		o.R = &staticSiteDetailR{
			Site: related,
		}
	} else {
		o.R.Site = related
	}

	if related.R == nil {
		related.R = &siteR{
			StaticSiteDetail: o,
		}
	} else {
		related.R.StaticSiteDetail = o
	}

	return nil
}

// StaticSiteDetails retrieves all the records using an executor.
func StaticSiteDetails(mods ...qm.QueryMod) staticSiteDetailQuery {
	mods = append(mods, qm.From("`static_site_details`"))
	return staticSiteDetailQuery{NewQuery(mods...)}
}

// FindStaticSiteDetail retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindStaticSiteDetail(ctx context.Context, exec boil.ContextExecutor, siteID string, selectCols ...string) (*StaticSiteDetail, error) {
	staticSiteDetailObj := &StaticSiteDetail{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `static_site_details` where `site_id`=?", sel,
	)

	q := queries.Raw(query, siteID)

	err := q.Bind(ctx, exec, staticSiteDetailObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from static_site_details")
	}

	return staticSiteDetailObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *StaticSiteDetail) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no static_site_details provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticSiteDetailColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	staticSiteDetailInsertCacheMut.RLock()
	cache, cached := staticSiteDetailInsertCache[key]
	staticSiteDetailInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			staticSiteDetailAllColumns,
			staticSiteDetailColumnsWithDefault,
			staticSiteDetailColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `static_site_details` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `static_site_details` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `static_site_details` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, staticSiteDetailPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into static_site_details")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.SiteID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for static_site_details")
	}

CacheNoHooks:
	if !cached {
		staticSiteDetailInsertCacheMut.Lock()
		staticSiteDetailInsertCache[key] = cache
		staticSiteDetailInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the StaticSiteDetail.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *StaticSiteDetail) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	staticSiteDetailUpdateCacheMut.RLock()
	cache, cached := staticSiteDetailUpdateCache[key]
	staticSiteDetailUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			staticSiteDetailAllColumns,
			staticSiteDetailPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update static_site_details, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `static_site_details` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, staticSiteDetailPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, append(wl, staticSiteDetailPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update static_site_details row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for static_site_details")
	}

	if !cached {
		staticSiteDetailUpdateCacheMut.Lock()
		staticSiteDetailUpdateCache[key] = cache
		staticSiteDetailUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q staticSiteDetailQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for static_site_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for static_site_details")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o StaticSiteDetailSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticSiteDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `static_site_details` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staticSiteDetailPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in staticSiteDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all staticSiteDetail")
	}
	return rowsAff, nil
}

var mySQLStaticSiteDetailUniqueColumns = []string{
	"site_id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *StaticSiteDetail) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no static_site_details provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(staticSiteDetailColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLStaticSiteDetailUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	staticSiteDetailUpsertCacheMut.RLock()
	cache, cached := staticSiteDetailUpsertCache[key]
	staticSiteDetailUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			staticSiteDetailAllColumns,
			staticSiteDetailColumnsWithDefault,
			staticSiteDetailColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			staticSiteDetailAllColumns,
			staticSiteDetailPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert static_site_details, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "static_site_details", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `static_site_details` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for static_site_details")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(staticSiteDetailType, staticSiteDetailMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for static_site_details")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for static_site_details")
	}

CacheNoHooks:
	if !cached {
		staticSiteDetailUpsertCacheMut.Lock()
		staticSiteDetailUpsertCache[key] = cache
		staticSiteDetailUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single StaticSiteDetail record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *StaticSiteDetail) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no StaticSiteDetail provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), staticSiteDetailPrimaryKeyMapping)
	sql := "DELETE FROM `static_site_details` WHERE `site_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from static_site_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for static_site_details")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q staticSiteDetailQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no staticSiteDetailQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from static_site_details")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for static_site_details")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o StaticSiteDetailSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(staticSiteDetailBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticSiteDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `static_site_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staticSiteDetailPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from staticSiteDetail slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for static_site_details")
	}

	if len(staticSiteDetailAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *StaticSiteDetail) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindStaticSiteDetail(ctx, exec, o.SiteID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *StaticSiteDetailSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := StaticSiteDetailSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), staticSiteDetailPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `static_site_details`.* FROM `static_site_details` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, staticSiteDetailPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in StaticSiteDetailSlice")
	}

	*o = slice

	return nil
}

// StaticSiteDetailExists checks if the StaticSiteDetail row exists.
func StaticSiteDetailExists(ctx context.Context, exec boil.ContextExecutor, siteID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `static_site_details` where `site_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, siteID)
	}
	row := exec.QueryRowContext(ctx, sql, siteID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if static_site_details exists")
	}

	return exists, nil
}
