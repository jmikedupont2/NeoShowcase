// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSites(t *testing.T) {
	t.Parallel()

	query := Sites()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSitesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSitesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Sites().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSitesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SiteSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSitesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SiteExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Site exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SiteExists to return true, but got false.")
	}
}

func testSitesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	siteFound, err := FindSite(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if siteFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSitesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Sites().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSitesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Sites().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSitesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	siteOne := &Site{}
	siteTwo := &Site{}
	if err = randomize.Struct(seed, siteOne, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}
	if err = randomize.Struct(seed, siteTwo, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = siteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = siteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSitesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	siteOne := &Site{}
	siteTwo := &Site{}
	if err = randomize.Struct(seed, siteOne, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}
	if err = randomize.Struct(seed, siteTwo, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = siteOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = siteTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func siteBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func siteAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Site) error {
	*o = Site{}
	return nil
}

func testSitesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Site{}
	o := &Site{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, siteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Site object: %s", err)
	}

	AddSiteHook(boil.BeforeInsertHook, siteBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	siteBeforeInsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterInsertHook, siteAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	siteAfterInsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterSelectHook, siteAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	siteAfterSelectHooks = []SiteHook{}

	AddSiteHook(boil.BeforeUpdateHook, siteBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	siteBeforeUpdateHooks = []SiteHook{}

	AddSiteHook(boil.AfterUpdateHook, siteAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	siteAfterUpdateHooks = []SiteHook{}

	AddSiteHook(boil.BeforeDeleteHook, siteBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	siteBeforeDeleteHooks = []SiteHook{}

	AddSiteHook(boil.AfterDeleteHook, siteAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	siteAfterDeleteHooks = []SiteHook{}

	AddSiteHook(boil.BeforeUpsertHook, siteBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	siteBeforeUpsertHooks = []SiteHook{}

	AddSiteHook(boil.AfterUpsertHook, siteAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	siteAfterUpsertHooks = []SiteHook{}
}

func testSitesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSitesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(siteColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSiteOneToOneDynamicSiteDetailUsingDynamicSiteDetail(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign DynamicSiteDetail
	var local Site

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, dynamicSiteDetailDBTypes, true, dynamicSiteDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DynamicSiteDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.SiteID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DynamicSiteDetail().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SiteID != foreign.SiteID {
		t.Errorf("want: %v, got %v", foreign.SiteID, check.SiteID)
	}

	slice := SiteSlice{&local}
	if err = local.L.LoadDynamicSiteDetail(ctx, tx, false, (*[]*Site)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicSiteDetail == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DynamicSiteDetail = nil
	if err = local.L.LoadDynamicSiteDetail(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DynamicSiteDetail == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSiteOneToOneStaticSiteDetailUsingStaticSiteDetail(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign StaticSiteDetail
	var local Site

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, staticSiteDetailDBTypes, true, staticSiteDetailColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize StaticSiteDetail struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.SiteID = local.ID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.StaticSiteDetail().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.SiteID != foreign.SiteID {
		t.Errorf("want: %v, got %v", foreign.SiteID, check.SiteID)
	}

	slice := SiteSlice{&local}
	if err = local.L.LoadStaticSiteDetail(ctx, tx, false, (*[]*Site)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticSiteDetail == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.StaticSiteDetail = nil
	if err = local.L.LoadStaticSiteDetail(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.StaticSiteDetail == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSiteOneToOneSetOpDynamicSiteDetailUsingDynamicSiteDetail(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Site
	var b, c DynamicSiteDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, dynamicSiteDetailDBTypes, false, strmangle.SetComplement(dynamicSiteDetailPrimaryKeyColumns, dynamicSiteDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, dynamicSiteDetailDBTypes, false, strmangle.SetComplement(dynamicSiteDetailPrimaryKeyColumns, dynamicSiteDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DynamicSiteDetail{&b, &c} {
		err = a.SetDynamicSiteDetail(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DynamicSiteDetail != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Site != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.SiteID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := DynamicSiteDetailExists(ctx, tx, x.SiteID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.SiteID {
			t.Error("foreign key was wrong value", a.ID, x.SiteID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testSiteOneToOneSetOpStaticSiteDetailUsingStaticSiteDetail(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Site
	var b, c StaticSiteDetail

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, staticSiteDetailDBTypes, false, strmangle.SetComplement(staticSiteDetailPrimaryKeyColumns, staticSiteDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, staticSiteDetailDBTypes, false, strmangle.SetComplement(staticSiteDetailPrimaryKeyColumns, staticSiteDetailColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*StaticSiteDetail{&b, &c} {
		err = a.SetStaticSiteDetail(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.StaticSiteDetail != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Site != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.SiteID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := StaticSiteDetailExists(ctx, tx, x.SiteID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.SiteID {
			t.Error("foreign key was wrong value", a.ID, x.SiteID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testSiteToOneApplicationUsingApplication(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Site
	var foreign Application

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, siteDBTypes, false, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, applicationDBTypes, false, applicationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Application struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ApplicationID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Application().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SiteSlice{&local}
	if err = local.L.LoadApplication(ctx, tx, false, (*[]*Site)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Application == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Application = nil
	if err = local.L.LoadApplication(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Application == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSiteToOneSetOpApplicationUsingApplication(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Site
	var b, c Application

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, siteDBTypes, false, strmangle.SetComplement(sitePrimaryKeyColumns, siteColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, applicationDBTypes, false, strmangle.SetComplement(applicationPrimaryKeyColumns, applicationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Application{&b, &c} {
		err = a.SetApplication(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Application != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sites[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ApplicationID != x.ID {
			t.Error("foreign key was wrong value", a.ApplicationID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ApplicationID))
		reflect.Indirect(reflect.ValueOf(&a.ApplicationID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ApplicationID != x.ID {
			t.Error("foreign key was wrong value", a.ApplicationID, x.ID)
		}
	}
}

func testSitesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSitesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SiteSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSitesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Sites().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	siteDBTypes = map[string]string{`ID`: `varchar`, `FQDN`: `varchar`, `PathPrefix`: `varchar`, `Type`: `enum('static','dynamic')`, `ApplicationID`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_           = bytes.MinRead
)

func testSitesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(siteAllColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, siteDBTypes, true, sitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSitesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(siteAllColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Site{}
	if err = randomize.Struct(seed, o, siteDBTypes, true, siteColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, siteDBTypes, true, sitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(siteAllColumns, sitePrimaryKeyColumns) {
		fields = siteAllColumns
	} else {
		fields = strmangle.SetComplement(
			siteAllColumns,
			sitePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SiteSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSitesUpsert(t *testing.T) {
	t.Parallel()

	if len(siteAllColumns) == len(sitePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLSiteUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Site{}
	if err = randomize.Struct(seed, &o, siteDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Site: %s", err)
	}

	count, err := Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, siteDBTypes, false, sitePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Site struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Site: %s", err)
	}

	count, err = Sites().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
