// Code generated by SQLBoiler 4.3.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Applications", testApplications)
	t.Run("Artifacts", testArtifacts)
	t.Run("BuildLogs", testBuildLogs)
	t.Run("Environments", testEnvironments)
	t.Run("Repositories", testRepositories)
	t.Run("Websites", testWebsites)
}

func TestDelete(t *testing.T) {
	t.Run("Applications", testApplicationsDelete)
	t.Run("Artifacts", testArtifactsDelete)
	t.Run("BuildLogs", testBuildLogsDelete)
	t.Run("Environments", testEnvironmentsDelete)
	t.Run("Repositories", testRepositoriesDelete)
	t.Run("Websites", testWebsitesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Applications", testApplicationsQueryDeleteAll)
	t.Run("Artifacts", testArtifactsQueryDeleteAll)
	t.Run("BuildLogs", testBuildLogsQueryDeleteAll)
	t.Run("Environments", testEnvironmentsQueryDeleteAll)
	t.Run("Repositories", testRepositoriesQueryDeleteAll)
	t.Run("Websites", testWebsitesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Applications", testApplicationsSliceDeleteAll)
	t.Run("Artifacts", testArtifactsSliceDeleteAll)
	t.Run("BuildLogs", testBuildLogsSliceDeleteAll)
	t.Run("Environments", testEnvironmentsSliceDeleteAll)
	t.Run("Repositories", testRepositoriesSliceDeleteAll)
	t.Run("Websites", testWebsitesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Applications", testApplicationsExists)
	t.Run("Artifacts", testArtifactsExists)
	t.Run("BuildLogs", testBuildLogsExists)
	t.Run("Environments", testEnvironmentsExists)
	t.Run("Repositories", testRepositoriesExists)
	t.Run("Websites", testWebsitesExists)
}

func TestFind(t *testing.T) {
	t.Run("Applications", testApplicationsFind)
	t.Run("Artifacts", testArtifactsFind)
	t.Run("BuildLogs", testBuildLogsFind)
	t.Run("Environments", testEnvironmentsFind)
	t.Run("Repositories", testRepositoriesFind)
	t.Run("Websites", testWebsitesFind)
}

func TestBind(t *testing.T) {
	t.Run("Applications", testApplicationsBind)
	t.Run("Artifacts", testArtifactsBind)
	t.Run("BuildLogs", testBuildLogsBind)
	t.Run("Environments", testEnvironmentsBind)
	t.Run("Repositories", testRepositoriesBind)
	t.Run("Websites", testWebsitesBind)
}

func TestOne(t *testing.T) {
	t.Run("Applications", testApplicationsOne)
	t.Run("Artifacts", testArtifactsOne)
	t.Run("BuildLogs", testBuildLogsOne)
	t.Run("Environments", testEnvironmentsOne)
	t.Run("Repositories", testRepositoriesOne)
	t.Run("Websites", testWebsitesOne)
}

func TestAll(t *testing.T) {
	t.Run("Applications", testApplicationsAll)
	t.Run("Artifacts", testArtifactsAll)
	t.Run("BuildLogs", testBuildLogsAll)
	t.Run("Environments", testEnvironmentsAll)
	t.Run("Repositories", testRepositoriesAll)
	t.Run("Websites", testWebsitesAll)
}

func TestCount(t *testing.T) {
	t.Run("Applications", testApplicationsCount)
	t.Run("Artifacts", testArtifactsCount)
	t.Run("BuildLogs", testBuildLogsCount)
	t.Run("Environments", testEnvironmentsCount)
	t.Run("Repositories", testRepositoriesCount)
	t.Run("Websites", testWebsitesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Applications", testApplicationsHooks)
	t.Run("Artifacts", testArtifactsHooks)
	t.Run("BuildLogs", testBuildLogsHooks)
	t.Run("Environments", testEnvironmentsHooks)
	t.Run("Repositories", testRepositoriesHooks)
	t.Run("Websites", testWebsitesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Applications", testApplicationsInsert)
	t.Run("Applications", testApplicationsInsertWhitelist)
	t.Run("Artifacts", testArtifactsInsert)
	t.Run("Artifacts", testArtifactsInsertWhitelist)
	t.Run("BuildLogs", testBuildLogsInsert)
	t.Run("BuildLogs", testBuildLogsInsertWhitelist)
	t.Run("Environments", testEnvironmentsInsert)
	t.Run("Environments", testEnvironmentsInsertWhitelist)
	t.Run("Repositories", testRepositoriesInsert)
	t.Run("Repositories", testRepositoriesInsertWhitelist)
	t.Run("Websites", testWebsitesInsert)
	t.Run("Websites", testWebsitesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingRepository", testApplicationToOneRepositoryUsingRepository)
	t.Run("ArtifactToBuildLogUsingBuildLog", testArtifactToOneBuildLogUsingBuildLog)
	t.Run("BuildLogToEnvironmentUsingEnvironment", testBuildLogToOneEnvironmentUsingEnvironment)
	t.Run("EnvironmentToApplicationUsingApplication", testEnvironmentToOneApplicationUsingApplication)
	t.Run("WebsiteToBuildLogUsingBuild", testWebsiteToOneBuildLogUsingBuild)
	t.Run("WebsiteToEnvironmentUsingEnvironment", testWebsiteToOneEnvironmentUsingEnvironment)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("BuildLogToArtifactUsingArtifact", testBuildLogOneToOneArtifactUsingArtifact)
	t.Run("EnvironmentToWebsiteUsingWebsite", testEnvironmentOneToOneWebsiteUsingWebsite)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ApplicationToEnvironments", testApplicationToManyEnvironments)
	t.Run("BuildLogToBuildWebsites", testBuildLogToManyBuildWebsites)
	t.Run("EnvironmentToBuildLogs", testEnvironmentToManyBuildLogs)
	t.Run("RepositoryToApplications", testRepositoryToManyApplications)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingApplications", testApplicationToOneSetOpRepositoryUsingRepository)
	t.Run("ArtifactToBuildLogUsingArtifact", testArtifactToOneSetOpBuildLogUsingBuildLog)
	t.Run("BuildLogToEnvironmentUsingBuildLogs", testBuildLogToOneSetOpEnvironmentUsingEnvironment)
	t.Run("EnvironmentToApplicationUsingEnvironments", testEnvironmentToOneSetOpApplicationUsingApplication)
	t.Run("WebsiteToBuildLogUsingBuildWebsites", testWebsiteToOneSetOpBuildLogUsingBuild)
	t.Run("WebsiteToEnvironmentUsingWebsite", testWebsiteToOneSetOpEnvironmentUsingEnvironment)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BuildLogToEnvironmentUsingBuildLogs", testBuildLogToOneRemoveOpEnvironmentUsingEnvironment)
	t.Run("WebsiteToBuildLogUsingBuildWebsites", testWebsiteToOneRemoveOpBuildLogUsingBuild)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("BuildLogToArtifactUsingArtifact", testBuildLogOneToOneSetOpArtifactUsingArtifact)
	t.Run("EnvironmentToWebsiteUsingWebsite", testEnvironmentOneToOneSetOpWebsiteUsingWebsite)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ApplicationToEnvironments", testApplicationToManyAddOpEnvironments)
	t.Run("BuildLogToBuildWebsites", testBuildLogToManyAddOpBuildWebsites)
	t.Run("EnvironmentToBuildLogs", testEnvironmentToManyAddOpBuildLogs)
	t.Run("RepositoryToApplications", testRepositoryToManyAddOpApplications)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("BuildLogToBuildWebsites", testBuildLogToManySetOpBuildWebsites)
	t.Run("EnvironmentToBuildLogs", testEnvironmentToManySetOpBuildLogs)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("BuildLogToBuildWebsites", testBuildLogToManyRemoveOpBuildWebsites)
	t.Run("EnvironmentToBuildLogs", testEnvironmentToManyRemoveOpBuildLogs)
}

func TestReload(t *testing.T) {
	t.Run("Applications", testApplicationsReload)
	t.Run("Artifacts", testArtifactsReload)
	t.Run("BuildLogs", testBuildLogsReload)
	t.Run("Environments", testEnvironmentsReload)
	t.Run("Repositories", testRepositoriesReload)
	t.Run("Websites", testWebsitesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Applications", testApplicationsReloadAll)
	t.Run("Artifacts", testArtifactsReloadAll)
	t.Run("BuildLogs", testBuildLogsReloadAll)
	t.Run("Environments", testEnvironmentsReloadAll)
	t.Run("Repositories", testRepositoriesReloadAll)
	t.Run("Websites", testWebsitesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Applications", testApplicationsSelect)
	t.Run("Artifacts", testArtifactsSelect)
	t.Run("BuildLogs", testBuildLogsSelect)
	t.Run("Environments", testEnvironmentsSelect)
	t.Run("Repositories", testRepositoriesSelect)
	t.Run("Websites", testWebsitesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Applications", testApplicationsUpdate)
	t.Run("Artifacts", testArtifactsUpdate)
	t.Run("BuildLogs", testBuildLogsUpdate)
	t.Run("Environments", testEnvironmentsUpdate)
	t.Run("Repositories", testRepositoriesUpdate)
	t.Run("Websites", testWebsitesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Applications", testApplicationsSliceUpdateAll)
	t.Run("Artifacts", testArtifactsSliceUpdateAll)
	t.Run("BuildLogs", testBuildLogsSliceUpdateAll)
	t.Run("Environments", testEnvironmentsSliceUpdateAll)
	t.Run("Repositories", testRepositoriesSliceUpdateAll)
	t.Run("Websites", testWebsitesSliceUpdateAll)
}
