// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// AvailablePort is an object representing the database table.
type AvailablePort struct { // Start of port range (inclusive)
	StartPort int `boil:"start_port" json:"start_port" toml:"start_port" yaml:"start_port"`
	// End of port range (exclusive)
	EndPort int `boil:"end_port" json:"end_port" toml:"end_port" yaml:"end_port"`
	// Protocol
	Protocol string `boil:"protocol" json:"protocol" toml:"protocol" yaml:"protocol"`

	R *availablePortR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L availablePortL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AvailablePortColumns = struct {
	StartPort string
	EndPort   string
	Protocol  string
}{
	StartPort: "start_port",
	EndPort:   "end_port",
	Protocol:  "protocol",
}

var AvailablePortTableColumns = struct {
	StartPort string
	EndPort   string
	Protocol  string
}{
	StartPort: "available_ports.start_port",
	EndPort:   "available_ports.end_port",
	Protocol:  "available_ports.protocol",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var AvailablePortWhere = struct {
	StartPort whereHelperint
	EndPort   whereHelperint
	Protocol  whereHelperstring
}{
	StartPort: whereHelperint{field: "`available_ports`.`start_port`"},
	EndPort:   whereHelperint{field: "`available_ports`.`end_port`"},
	Protocol:  whereHelperstring{field: "`available_ports`.`protocol`"},
}

// AvailablePortRels is where relationship names are stored.
var AvailablePortRels = struct {
}{}

// availablePortR is where relationships are stored.
type availablePortR struct {
}

// NewStruct creates a new relationship struct
func (*availablePortR) NewStruct() *availablePortR {
	return &availablePortR{}
}

// availablePortL is where Load methods for each relationship are stored.
type availablePortL struct{}

var (
	availablePortAllColumns            = []string{"start_port", "end_port", "protocol"}
	availablePortColumnsWithoutDefault = []string{"start_port", "end_port", "protocol"}
	availablePortColumnsWithDefault    = []string{}
	availablePortPrimaryKeyColumns     = []string{"start_port", "end_port", "protocol"}
	availablePortGeneratedColumns      = []string{}
)

type (
	// AvailablePortSlice is an alias for a slice of pointers to AvailablePort.
	// This should almost always be used instead of []AvailablePort.
	AvailablePortSlice []*AvailablePort
	// AvailablePortHook is the signature for custom AvailablePort hook methods
	AvailablePortHook func(context.Context, boil.ContextExecutor, *AvailablePort) error

	availablePortQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	availablePortType                 = reflect.TypeOf(&AvailablePort{})
	availablePortMapping              = queries.MakeStructMapping(availablePortType)
	availablePortPrimaryKeyMapping, _ = queries.BindMapping(availablePortType, availablePortMapping, availablePortPrimaryKeyColumns)
	availablePortInsertCacheMut       sync.RWMutex
	availablePortInsertCache          = make(map[string]insertCache)
	availablePortUpdateCacheMut       sync.RWMutex
	availablePortUpdateCache          = make(map[string]updateCache)
	availablePortUpsertCacheMut       sync.RWMutex
	availablePortUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var availablePortAfterSelectHooks []AvailablePortHook

var availablePortBeforeInsertHooks []AvailablePortHook
var availablePortAfterInsertHooks []AvailablePortHook

var availablePortBeforeUpdateHooks []AvailablePortHook
var availablePortAfterUpdateHooks []AvailablePortHook

var availablePortBeforeDeleteHooks []AvailablePortHook
var availablePortAfterDeleteHooks []AvailablePortHook

var availablePortBeforeUpsertHooks []AvailablePortHook
var availablePortAfterUpsertHooks []AvailablePortHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AvailablePort) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AvailablePort) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AvailablePort) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AvailablePort) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AvailablePort) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AvailablePort) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AvailablePort) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AvailablePort) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AvailablePort) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range availablePortAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAvailablePortHook registers your hook function for all future operations.
func AddAvailablePortHook(hookPoint boil.HookPoint, availablePortHook AvailablePortHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		availablePortAfterSelectHooks = append(availablePortAfterSelectHooks, availablePortHook)
	case boil.BeforeInsertHook:
		availablePortBeforeInsertHooks = append(availablePortBeforeInsertHooks, availablePortHook)
	case boil.AfterInsertHook:
		availablePortAfterInsertHooks = append(availablePortAfterInsertHooks, availablePortHook)
	case boil.BeforeUpdateHook:
		availablePortBeforeUpdateHooks = append(availablePortBeforeUpdateHooks, availablePortHook)
	case boil.AfterUpdateHook:
		availablePortAfterUpdateHooks = append(availablePortAfterUpdateHooks, availablePortHook)
	case boil.BeforeDeleteHook:
		availablePortBeforeDeleteHooks = append(availablePortBeforeDeleteHooks, availablePortHook)
	case boil.AfterDeleteHook:
		availablePortAfterDeleteHooks = append(availablePortAfterDeleteHooks, availablePortHook)
	case boil.BeforeUpsertHook:
		availablePortBeforeUpsertHooks = append(availablePortBeforeUpsertHooks, availablePortHook)
	case boil.AfterUpsertHook:
		availablePortAfterUpsertHooks = append(availablePortAfterUpsertHooks, availablePortHook)
	}
}

// One returns a single availablePort record from the query.
func (q availablePortQuery) One(ctx context.Context, exec boil.ContextExecutor) (*AvailablePort, error) {
	o := &AvailablePort{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for available_ports")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AvailablePort records from the query.
func (q availablePortQuery) All(ctx context.Context, exec boil.ContextExecutor) (AvailablePortSlice, error) {
	var o []*AvailablePort

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AvailablePort slice")
	}

	if len(availablePortAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AvailablePort records in the query.
func (q availablePortQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count available_ports rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q availablePortQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if available_ports exists")
	}

	return count > 0, nil
}

// AvailablePorts retrieves all the records using an executor.
func AvailablePorts(mods ...qm.QueryMod) availablePortQuery {
	mods = append(mods, qm.From("`available_ports`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`available_ports`.*"})
	}

	return availablePortQuery{q}
}

// FindAvailablePort retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAvailablePort(ctx context.Context, exec boil.ContextExecutor, startPort int, endPort int, protocol string, selectCols ...string) (*AvailablePort, error) {
	availablePortObj := &AvailablePort{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `available_ports` where `start_port`=? AND `end_port`=? AND `protocol`=?", sel,
	)

	q := queries.Raw(query, startPort, endPort, protocol)

	err := q.Bind(ctx, exec, availablePortObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from available_ports")
	}

	if err = availablePortObj.doAfterSelectHooks(ctx, exec); err != nil {
		return availablePortObj, err
	}

	return availablePortObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AvailablePort) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no available_ports provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availablePortColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	availablePortInsertCacheMut.RLock()
	cache, cached := availablePortInsertCache[key]
	availablePortInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			availablePortAllColumns,
			availablePortColumnsWithDefault,
			availablePortColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(availablePortType, availablePortMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(availablePortType, availablePortMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `available_ports` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `available_ports` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `available_ports` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, availablePortPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into available_ports")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.StartPort,
		o.EndPort,
		o.Protocol,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for available_ports")
	}

CacheNoHooks:
	if !cached {
		availablePortInsertCacheMut.Lock()
		availablePortInsertCache[key] = cache
		availablePortInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the AvailablePort.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AvailablePort) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	availablePortUpdateCacheMut.RLock()
	cache, cached := availablePortUpdateCache[key]
	availablePortUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			availablePortAllColumns,
			availablePortPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update available_ports, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `available_ports` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, availablePortPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(availablePortType, availablePortMapping, append(wl, availablePortPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update available_ports row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for available_ports")
	}

	if !cached {
		availablePortUpdateCacheMut.Lock()
		availablePortUpdateCache[key] = cache
		availablePortUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q availablePortQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for available_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for available_ports")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AvailablePortSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availablePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `available_ports` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, availablePortPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in availablePort slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all availablePort")
	}
	return rowsAff, nil
}

var mySQLAvailablePortUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AvailablePort) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no available_ports provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(availablePortColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLAvailablePortUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	availablePortUpsertCacheMut.RLock()
	cache, cached := availablePortUpsertCache[key]
	availablePortUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			availablePortAllColumns,
			availablePortColumnsWithDefault,
			availablePortColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			availablePortAllColumns,
			availablePortPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert available_ports, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`available_ports`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `available_ports` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(availablePortType, availablePortMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(availablePortType, availablePortMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for available_ports")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(availablePortType, availablePortMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for available_ports")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for available_ports")
	}

CacheNoHooks:
	if !cached {
		availablePortUpsertCacheMut.Lock()
		availablePortUpsertCache[key] = cache
		availablePortUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single AvailablePort record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AvailablePort) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AvailablePort provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), availablePortPrimaryKeyMapping)
	sql := "DELETE FROM `available_ports` WHERE `start_port`=? AND `end_port`=? AND `protocol`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from available_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for available_ports")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q availablePortQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no availablePortQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from available_ports")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for available_ports")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AvailablePortSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(availablePortBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availablePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `available_ports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, availablePortPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from availablePort slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for available_ports")
	}

	if len(availablePortAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AvailablePort) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindAvailablePort(ctx, exec, o.StartPort, o.EndPort, o.Protocol)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AvailablePortSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AvailablePortSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), availablePortPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `available_ports`.* FROM `available_ports` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, availablePortPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AvailablePortSlice")
	}

	*o = slice

	return nil
}

// AvailablePortExists checks if the AvailablePort row exists.
func AvailablePortExists(ctx context.Context, exec boil.ContextExecutor, startPort int, endPort int, protocol string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `available_ports` where `start_port`=? AND `end_port`=? AND `protocol`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, startPort, endPort, protocol)
	}
	row := exec.QueryRowContext(ctx, sql, startPort, endPort, protocol)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if available_ports exists")
	}

	return exists, nil
}

// Exists checks if the AvailablePort row exists.
func (o *AvailablePort) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return AvailablePortExists(ctx, exec, o.StartPort, o.EndPort, o.Protocol)
}
