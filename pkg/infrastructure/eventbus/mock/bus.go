// Code generated by MockGen. DO NOT EDIT.
// Source: bus.go

// Package mock_eventbus is a generated GoMock package.
package mock_eventbus

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventbus "github.com/traPtitech/neoshowcase/pkg/infrastructure/eventbus"
)

// MockBus is a mock of Bus interface.
type MockBus struct {
	ctrl     *gomock.Controller
	recorder *MockBusMockRecorder
}

// MockBusMockRecorder is the mock recorder for MockBus.
type MockBusMockRecorder struct {
	mock *MockBus
}

// NewMockBus creates a new mock instance.
func NewMockBus(ctrl *gomock.Controller) *MockBus {
	mock := &MockBus{ctrl: ctrl}
	mock.recorder = &MockBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBus) EXPECT() *MockBusMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockBus) Publish(eventType string, body eventbus.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Publish", eventType, body)
}

// Publish indicates an expected call of Publish.
func (mr *MockBusMockRecorder) Publish(eventType, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockBus)(nil).Publish), eventType, body)
}
