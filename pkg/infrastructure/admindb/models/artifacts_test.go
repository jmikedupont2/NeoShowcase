// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testArtifacts(t *testing.T) {
	t.Parallel()

	query := Artifacts()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testArtifactsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtifactsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Artifacts().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtifactsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtifactSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testArtifactsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ArtifactExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Artifact exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ArtifactExists to return true, but got false.")
	}
}

func testArtifactsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	artifactFound, err := FindArtifact(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if artifactFound == nil {
		t.Error("want a record, got nil")
	}
}

func testArtifactsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Artifacts().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testArtifactsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Artifacts().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testArtifactsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	artifactOne := &Artifact{}
	artifactTwo := &Artifact{}
	if err = randomize.Struct(seed, artifactOne, artifactDBTypes, false, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}
	if err = randomize.Struct(seed, artifactTwo, artifactDBTypes, false, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artifactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artifactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Artifacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testArtifactsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	artifactOne := &Artifact{}
	artifactTwo := &Artifact{}
	if err = randomize.Struct(seed, artifactOne, artifactDBTypes, false, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}
	if err = randomize.Struct(seed, artifactTwo, artifactDBTypes, false, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = artifactOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = artifactTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func artifactBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func artifactAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Artifact) error {
	*o = Artifact{}
	return nil
}

func testArtifactsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Artifact{}
	o := &Artifact{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, artifactDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Artifact object: %s", err)
	}

	AddArtifactHook(boil.BeforeInsertHook, artifactBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	artifactBeforeInsertHooks = []ArtifactHook{}

	AddArtifactHook(boil.AfterInsertHook, artifactAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	artifactAfterInsertHooks = []ArtifactHook{}

	AddArtifactHook(boil.AfterSelectHook, artifactAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	artifactAfterSelectHooks = []ArtifactHook{}

	AddArtifactHook(boil.BeforeUpdateHook, artifactBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	artifactBeforeUpdateHooks = []ArtifactHook{}

	AddArtifactHook(boil.AfterUpdateHook, artifactAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	artifactAfterUpdateHooks = []ArtifactHook{}

	AddArtifactHook(boil.BeforeDeleteHook, artifactBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	artifactBeforeDeleteHooks = []ArtifactHook{}

	AddArtifactHook(boil.AfterDeleteHook, artifactAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	artifactAfterDeleteHooks = []ArtifactHook{}

	AddArtifactHook(boil.BeforeUpsertHook, artifactBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	artifactBeforeUpsertHooks = []ArtifactHook{}

	AddArtifactHook(boil.AfterUpsertHook, artifactAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	artifactAfterUpsertHooks = []ArtifactHook{}
}

func testArtifactsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtifactsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(artifactColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testArtifactToOneBuildLogUsingBuildLog(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Artifact
	var foreign BuildLog

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, artifactDBTypes, false, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, buildLogDBTypes, false, buildLogColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildLog struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BuildLogID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BuildLog().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ArtifactSlice{&local}
	if err = local.L.LoadBuildLog(ctx, tx, false, (*[]*Artifact)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BuildLog == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BuildLog = nil
	if err = local.L.LoadBuildLog(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BuildLog == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testArtifactToOneSetOpBuildLogUsingBuildLog(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Artifact
	var b, c BuildLog

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, artifactDBTypes, false, strmangle.SetComplement(artifactPrimaryKeyColumns, artifactColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, buildLogDBTypes, false, strmangle.SetComplement(buildLogPrimaryKeyColumns, buildLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, buildLogDBTypes, false, strmangle.SetComplement(buildLogPrimaryKeyColumns, buildLogColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BuildLog{&b, &c} {
		err = a.SetBuildLog(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BuildLog != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Artifact != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BuildLogID != x.ID {
			t.Error("foreign key was wrong value", a.BuildLogID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BuildLogID))
		reflect.Indirect(reflect.ValueOf(&a.BuildLogID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BuildLogID != x.ID {
			t.Error("foreign key was wrong value", a.BuildLogID, x.ID)
		}
	}
}

func testArtifactsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtifactsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ArtifactSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testArtifactsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Artifacts().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	artifactDBTypes = map[string]string{`ID`: `varchar`, `BuildLogID`: `varchar`, `Size`: `bigint`, `CreatedAt`: `datetime`, `DeletedAt`: `datetime`}
	_               = bytes.MinRead
)

func testArtifactsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(artifactPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(artifactAllColumns) == len(artifactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testArtifactsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(artifactAllColumns) == len(artifactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Artifact{}
	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, artifactDBTypes, true, artifactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(artifactAllColumns, artifactPrimaryKeyColumns) {
		fields = artifactAllColumns
	} else {
		fields = strmangle.SetComplement(
			artifactAllColumns,
			artifactPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ArtifactSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testArtifactsUpsert(t *testing.T) {
	t.Parallel()

	if len(artifactAllColumns) == len(artifactPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLArtifactUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Artifact{}
	if err = randomize.Struct(seed, &o, artifactDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Artifact: %s", err)
	}

	count, err := Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, artifactDBTypes, false, artifactPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Artifact struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Artifact: %s", err)
	}

	count, err = Artifacts().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
