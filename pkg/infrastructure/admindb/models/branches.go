// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Branch is an object representing the database table.
type Branch struct { // ブランチID
	ID string `boil:"id" json:"id" toml:"id" yaml:"id"`
	// アプリケーションID
	ApplicationID string `boil:"application_id" json:"application_id" toml:"application_id" yaml:"application_id"`
	// Gitブランチ・タグ名
	BranchName string `boil:"branch_name" json:"branch_name" toml:"branch_name" yaml:"branch_name"`
	// ビルドタイプ
	BuildType string `boil:"build_type" json:"build_type" toml:"build_type" yaml:"build_type"`
	// 作成日時
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	// 更新日時
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	// 稼働中のビルドID
	BuildID null.String `boil:"build_id" json:"build_id,omitempty" toml:"build_id" yaml:"build_id,omitempty"`

	R *branchR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L branchL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BranchColumns = struct {
	ID            string
	ApplicationID string
	BranchName    string
	BuildType     string
	CreatedAt     string
	UpdatedAt     string
	BuildID       string
}{
	ID:            "id",
	ApplicationID: "application_id",
	BranchName:    "branch_name",
	BuildType:     "build_type",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
	BuildID:       "build_id",
}

var BranchTableColumns = struct {
	ID            string
	ApplicationID string
	BranchName    string
	BuildType     string
	CreatedAt     string
	UpdatedAt     string
	BuildID       string
}{
	ID:            "branches.id",
	ApplicationID: "branches.application_id",
	BranchName:    "branches.branch_name",
	BuildType:     "branches.build_type",
	CreatedAt:     "branches.created_at",
	UpdatedAt:     "branches.updated_at",
	BuildID:       "branches.build_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var BranchWhere = struct {
	ID            whereHelperstring
	ApplicationID whereHelperstring
	BranchName    whereHelperstring
	BuildType     whereHelperstring
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
	BuildID       whereHelpernull_String
}{
	ID:            whereHelperstring{field: "`branches`.`id`"},
	ApplicationID: whereHelperstring{field: "`branches`.`application_id`"},
	BranchName:    whereHelperstring{field: "`branches`.`branch_name`"},
	BuildType:     whereHelperstring{field: "`branches`.`build_type`"},
	CreatedAt:     whereHelpertime_Time{field: "`branches`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`branches`.`updated_at`"},
	BuildID:       whereHelpernull_String{field: "`branches`.`build_id`"},
}

// BranchRels is where relationship names are stored.
var BranchRels = struct {
	Application  string
	Build        string
	Website      string
	BuildLogs    string
	Environments string
}{
	Application:  "Application",
	Build:        "Build",
	Website:      "Website",
	BuildLogs:    "BuildLogs",
	Environments: "Environments",
}

// branchR is where relationships are stored.
type branchR struct {
	Application  *Application     `boil:"Application" json:"Application" toml:"Application" yaml:"Application"`
	Build        *BuildLog        `boil:"Build" json:"Build" toml:"Build" yaml:"Build"`
	Website      *Website         `boil:"Website" json:"Website" toml:"Website" yaml:"Website"`
	BuildLogs    BuildLogSlice    `boil:"BuildLogs" json:"BuildLogs" toml:"BuildLogs" yaml:"BuildLogs"`
	Environments EnvironmentSlice `boil:"Environments" json:"Environments" toml:"Environments" yaml:"Environments"`
}

// NewStruct creates a new relationship struct
func (*branchR) NewStruct() *branchR {
	return &branchR{}
}

// branchL is where Load methods for each relationship are stored.
type branchL struct{}

var (
	branchAllColumns            = []string{"id", "application_id", "branch_name", "build_type", "created_at", "updated_at", "build_id"}
	branchColumnsWithoutDefault = []string{"id", "application_id", "branch_name", "build_type", "created_at", "updated_at", "build_id"}
	branchColumnsWithDefault    = []string{}
	branchPrimaryKeyColumns     = []string{"id"}
	branchGeneratedColumns      = []string{}
)

type (
	// BranchSlice is an alias for a slice of pointers to Branch.
	// This should almost always be used instead of []Branch.
	BranchSlice []*Branch
	// BranchHook is the signature for custom Branch hook methods
	BranchHook func(context.Context, boil.ContextExecutor, *Branch) error

	branchQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	branchType                 = reflect.TypeOf(&Branch{})
	branchMapping              = queries.MakeStructMapping(branchType)
	branchPrimaryKeyMapping, _ = queries.BindMapping(branchType, branchMapping, branchPrimaryKeyColumns)
	branchInsertCacheMut       sync.RWMutex
	branchInsertCache          = make(map[string]insertCache)
	branchUpdateCacheMut       sync.RWMutex
	branchUpdateCache          = make(map[string]updateCache)
	branchUpsertCacheMut       sync.RWMutex
	branchUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var branchAfterSelectHooks []BranchHook

var branchBeforeInsertHooks []BranchHook
var branchAfterInsertHooks []BranchHook

var branchBeforeUpdateHooks []BranchHook
var branchAfterUpdateHooks []BranchHook

var branchBeforeDeleteHooks []BranchHook
var branchAfterDeleteHooks []BranchHook

var branchBeforeUpsertHooks []BranchHook
var branchAfterUpsertHooks []BranchHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Branch) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Branch) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Branch) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Branch) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Branch) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Branch) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Branch) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Branch) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Branch) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range branchAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBranchHook registers your hook function for all future operations.
func AddBranchHook(hookPoint boil.HookPoint, branchHook BranchHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		branchAfterSelectHooks = append(branchAfterSelectHooks, branchHook)
	case boil.BeforeInsertHook:
		branchBeforeInsertHooks = append(branchBeforeInsertHooks, branchHook)
	case boil.AfterInsertHook:
		branchAfterInsertHooks = append(branchAfterInsertHooks, branchHook)
	case boil.BeforeUpdateHook:
		branchBeforeUpdateHooks = append(branchBeforeUpdateHooks, branchHook)
	case boil.AfterUpdateHook:
		branchAfterUpdateHooks = append(branchAfterUpdateHooks, branchHook)
	case boil.BeforeDeleteHook:
		branchBeforeDeleteHooks = append(branchBeforeDeleteHooks, branchHook)
	case boil.AfterDeleteHook:
		branchAfterDeleteHooks = append(branchAfterDeleteHooks, branchHook)
	case boil.BeforeUpsertHook:
		branchBeforeUpsertHooks = append(branchBeforeUpsertHooks, branchHook)
	case boil.AfterUpsertHook:
		branchAfterUpsertHooks = append(branchAfterUpsertHooks, branchHook)
	}
}

// One returns a single branch record from the query.
func (q branchQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Branch, error) {
	o := &Branch{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for branches")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Branch records from the query.
func (q branchQuery) All(ctx context.Context, exec boil.ContextExecutor) (BranchSlice, error) {
	var o []*Branch

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Branch slice")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Branch records in the query.
func (q branchQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count branches rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q branchQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if branches exists")
	}

	return count > 0, nil
}

// Application pointed to by the foreign key.
func (o *Branch) Application(mods ...qm.QueryMod) applicationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.ApplicationID),
	}

	queryMods = append(queryMods, mods...)

	query := Applications(queryMods...)
	queries.SetFrom(query.Query, "`applications`")

	return query
}

// Build pointed to by the foreign key.
func (o *Branch) Build(mods ...qm.QueryMod) buildLogQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.BuildID),
	}

	queryMods = append(queryMods, mods...)

	query := BuildLogs(queryMods...)
	queries.SetFrom(query.Query, "`build_logs`")

	return query
}

// Website pointed to by the foreign key.
func (o *Branch) Website(mods ...qm.QueryMod) websiteQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`branch_id` = ?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Websites(queryMods...)
	queries.SetFrom(query.Query, "`websites`")

	return query
}

// BuildLogs retrieves all the build_log's BuildLogs with an executor.
func (o *Branch) BuildLogs(mods ...qm.QueryMod) buildLogQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`build_logs`.`branch_id`=?", o.ID),
	)

	query := BuildLogs(queryMods...)
	queries.SetFrom(query.Query, "`build_logs`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`build_logs`.*"})
	}

	return query
}

// Environments retrieves all the environment's Environments with an executor.
func (o *Branch) Environments(mods ...qm.QueryMod) environmentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`environments`.`branch_id`=?", o.ID),
	)

	query := Environments(queryMods...)
	queries.SetFrom(query.Query, "`environments`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`environments`.*"})
	}

	return query
}

// LoadApplication allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (branchL) LoadApplication(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.ApplicationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.ApplicationID {
					continue Outer
				}
			}

			args = append(args, obj.ApplicationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Application")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Application")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Application = foreign
		if foreign.R == nil {
			foreign.R = &applicationR{}
		}
		foreign.R.Branches = append(foreign.R.Branches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ApplicationID == foreign.ID {
				local.R.Application = foreign
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.Branches = append(foreign.R.Branches, local)
				break
			}
		}
	}

	return nil
}

// LoadBuild allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (branchL) LoadBuild(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		if !queries.IsNil(object.BuildID) {
			args = append(args, object.BuildID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.BuildID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.BuildID) {
				args = append(args, obj.BuildID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`build_logs`),
		qm.WhereIn(`build_logs.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load BuildLog")
	}

	var resultSlice []*BuildLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice BuildLog")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for build_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for build_logs")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Build = foreign
		if foreign.R == nil {
			foreign.R = &buildLogR{}
		}
		foreign.R.BuildBranches = append(foreign.R.BuildBranches, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.BuildID, foreign.ID) {
				local.R.Build = foreign
				if foreign.R == nil {
					foreign.R = &buildLogR{}
				}
				foreign.R.BuildBranches = append(foreign.R.BuildBranches, local)
				break
			}
		}
	}

	return nil
}

// LoadWebsite allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-1 relationship.
func (branchL) LoadWebsite(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`websites`),
		qm.WhereIn(`websites.branch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Website")
	}

	var resultSlice []*Website
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Website")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for websites")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for websites")
	}

	if len(branchAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Website = foreign
		if foreign.R == nil {
			foreign.R = &websiteR{}
		}
		foreign.R.Branch = object
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.BranchID {
				local.R.Website = foreign
				if foreign.R == nil {
					foreign.R = &websiteR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadBuildLogs allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadBuildLogs(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`build_logs`),
		qm.WhereIn(`build_logs.branch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load build_logs")
	}

	var resultSlice []*BuildLog
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice build_logs")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on build_logs")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for build_logs")
	}

	if len(buildLogAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BuildLogs = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &buildLogR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BranchID {
				local.R.BuildLogs = append(local.R.BuildLogs, foreign)
				if foreign.R == nil {
					foreign.R = &buildLogR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// LoadEnvironments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (branchL) LoadEnvironments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeBranch interface{}, mods queries.Applicator) error {
	var slice []*Branch
	var object *Branch

	if singular {
		object = maybeBranch.(*Branch)
	} else {
		slice = *maybeBranch.(*[]*Branch)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &branchR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &branchR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`environments`),
		qm.WhereIn(`environments.branch_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load environments")
	}

	var resultSlice []*Environment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice environments")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on environments")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for environments")
	}

	if len(environmentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Environments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &environmentR{}
			}
			foreign.R.Branch = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BranchID {
				local.R.Environments = append(local.R.Environments, foreign)
				if foreign.R == nil {
					foreign.R = &environmentR{}
				}
				foreign.R.Branch = local
				break
			}
		}
	}

	return nil
}

// SetApplication of the branch to the related item.
// Sets o.R.Application to related.
// Adds o to related.R.Branches.
func (o *Branch) SetApplication(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Application) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"application_id"}),
		strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ApplicationID = related.ID
	if o.R == nil {
		o.R = &branchR{
			Application: related,
		}
	} else {
		o.R.Application = related
	}

	if related.R == nil {
		related.R = &applicationR{
			Branches: BranchSlice{o},
		}
	} else {
		related.R.Branches = append(related.R.Branches, o)
	}

	return nil
}

// SetBuild of the branch to the related item.
// Sets o.R.Build to related.
// Adds o to related.R.BuildBranches.
func (o *Branch) SetBuild(ctx context.Context, exec boil.ContextExecutor, insert bool, related *BuildLog) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"build_id"}),
		strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.BuildID, related.ID)
	if o.R == nil {
		o.R = &branchR{
			Build: related,
		}
	} else {
		o.R.Build = related
	}

	if related.R == nil {
		related.R = &buildLogR{
			BuildBranches: BranchSlice{o},
		}
	} else {
		related.R.BuildBranches = append(related.R.BuildBranches, o)
	}

	return nil
}

// RemoveBuild relationship.
// Sets o.R.Build to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Branch) RemoveBuild(ctx context.Context, exec boil.ContextExecutor, related *BuildLog) error {
	var err error

	queries.SetScanner(&o.BuildID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("build_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Build = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.BuildBranches {
		if queries.Equal(o.BuildID, ri.BuildID) {
			continue
		}

		ln := len(related.R.BuildBranches)
		if ln > 1 && i < ln-1 {
			related.R.BuildBranches[i] = related.R.BuildBranches[ln-1]
		}
		related.R.BuildBranches = related.R.BuildBranches[:ln-1]
		break
	}
	return nil
}

// SetWebsite of the branch to the related item.
// Sets o.R.Website to related.
// Adds o to related.R.Branch.
func (o *Branch) SetWebsite(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Website) error {
	var err error

	if insert {
		related.BranchID = o.ID

		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE `websites` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
			strmangle.WhereClause("`", "`", 0, websitePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.IsDebug(ctx) {
			writer := boil.DebugWriterFrom(ctx)
			fmt.Fprintln(writer, updateQuery)
			fmt.Fprintln(writer, values)
		}
		if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.BranchID = o.ID

	}

	if o.R == nil {
		o.R = &branchR{
			Website: related,
		}
	} else {
		o.R.Website = related
	}

	if related.R == nil {
		related.R = &websiteR{
			Branch: o,
		}
	} else {
		related.R.Branch = o
	}
	return nil
}

// AddBuildLogs adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.BuildLogs.
// Sets related.R.Branch appropriately.
func (o *Branch) AddBuildLogs(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*BuildLog) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `build_logs` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, buildLogPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			BuildLogs: related,
		}
	} else {
		o.R.BuildLogs = append(o.R.BuildLogs, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &buildLogR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// AddEnvironments adds the given related objects to the existing relationships
// of the branch, optionally inserting them as new records.
// Appends related to o.R.Environments.
// Sets related.R.Branch appropriately.
func (o *Branch) AddEnvironments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Environment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BranchID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `environments` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"branch_id"}),
				strmangle.WhereClause("`", "`", 0, environmentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BranchID = o.ID
		}
	}

	if o.R == nil {
		o.R = &branchR{
			Environments: related,
		}
	} else {
		o.R.Environments = append(o.R.Environments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &environmentR{
				Branch: o,
			}
		} else {
			rel.R.Branch = o
		}
	}
	return nil
}

// Branches retrieves all the records using an executor.
func Branches(mods ...qm.QueryMod) branchQuery {
	mods = append(mods, qm.From("`branches`"))
	return branchQuery{NewQuery(mods...)}
}

// FindBranch retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBranch(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Branch, error) {
	branchObj := &Branch{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `branches` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, branchObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from branches")
	}

	if err = branchObj.doAfterSelectHooks(ctx, exec); err != nil {
		return branchObj, err
	}

	return branchObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Branch) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no branches provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	branchInsertCacheMut.RLock()
	cache, cached := branchInsertCache[key]
	branchInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			branchAllColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(branchType, branchMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `branches` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `branches` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `branches` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into branches")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for branches")
	}

CacheNoHooks:
	if !cached {
		branchInsertCacheMut.Lock()
		branchInsertCache[key] = cache
		branchInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Branch.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Branch) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	branchUpdateCacheMut.RLock()
	cache, cached := branchUpdateCache[key]
	branchUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			branchAllColumns,
			branchPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update branches, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `branches` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, branchPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, append(wl, branchPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update branches row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for branches")
	}

	if !cached {
		branchUpdateCacheMut.Lock()
		branchUpdateCache[key] = cache
		branchUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q branchQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for branches")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BranchSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `branches` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all branch")
	}
	return rowsAff, nil
}

var mySQLBranchUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Branch) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no branches provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(branchColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBranchUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	branchUpsertCacheMut.RLock()
	cache, cached := branchUpsertCache[key]
	branchUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			branchAllColumns,
			branchColumnsWithDefault,
			branchColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			branchAllColumns,
			branchPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert branches, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`branches`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `branches` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(branchType, branchMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(branchType, branchMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for branches")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(branchType, branchMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for branches")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for branches")
	}

CacheNoHooks:
	if !cached {
		branchUpsertCacheMut.Lock()
		branchUpsertCache[key] = cache
		branchUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Branch record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Branch) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Branch provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), branchPrimaryKeyMapping)
	sql := "DELETE FROM `branches` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for branches")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q branchQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no branchQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from branches")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for branches")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BranchSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(branchBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from branch slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for branches")
	}

	if len(branchAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Branch) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBranch(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BranchSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BranchSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), branchPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `branches`.* FROM `branches` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, branchPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BranchSlice")
	}

	*o = slice

	return nil
}

// BranchExists checks if the Branch row exists.
func BranchExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `branches` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if branches exists")
	}

	return exists, nil
}
