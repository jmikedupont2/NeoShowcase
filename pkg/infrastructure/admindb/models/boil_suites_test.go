// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Applications", testApplications)
	t.Run("Artifacts", testArtifacts)
	t.Run("AvailableDomains", testAvailableDomains)
	t.Run("Branches", testBranches)
	t.Run("BuildLogs", testBuildLogs)
	t.Run("Environments", testEnvironments)
	t.Run("Providers", testProviders)
	t.Run("Repositories", testRepositories)
	t.Run("Users", testUsers)
	t.Run("Websites", testWebsites)
}

func TestDelete(t *testing.T) {
	t.Run("Applications", testApplicationsDelete)
	t.Run("Artifacts", testArtifactsDelete)
	t.Run("AvailableDomains", testAvailableDomainsDelete)
	t.Run("Branches", testBranchesDelete)
	t.Run("BuildLogs", testBuildLogsDelete)
	t.Run("Environments", testEnvironmentsDelete)
	t.Run("Providers", testProvidersDelete)
	t.Run("Repositories", testRepositoriesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Websites", testWebsitesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Applications", testApplicationsQueryDeleteAll)
	t.Run("Artifacts", testArtifactsQueryDeleteAll)
	t.Run("AvailableDomains", testAvailableDomainsQueryDeleteAll)
	t.Run("Branches", testBranchesQueryDeleteAll)
	t.Run("BuildLogs", testBuildLogsQueryDeleteAll)
	t.Run("Environments", testEnvironmentsQueryDeleteAll)
	t.Run("Providers", testProvidersQueryDeleteAll)
	t.Run("Repositories", testRepositoriesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Websites", testWebsitesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Applications", testApplicationsSliceDeleteAll)
	t.Run("Artifacts", testArtifactsSliceDeleteAll)
	t.Run("AvailableDomains", testAvailableDomainsSliceDeleteAll)
	t.Run("Branches", testBranchesSliceDeleteAll)
	t.Run("BuildLogs", testBuildLogsSliceDeleteAll)
	t.Run("Environments", testEnvironmentsSliceDeleteAll)
	t.Run("Providers", testProvidersSliceDeleteAll)
	t.Run("Repositories", testRepositoriesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Websites", testWebsitesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Applications", testApplicationsExists)
	t.Run("Artifacts", testArtifactsExists)
	t.Run("AvailableDomains", testAvailableDomainsExists)
	t.Run("Branches", testBranchesExists)
	t.Run("BuildLogs", testBuildLogsExists)
	t.Run("Environments", testEnvironmentsExists)
	t.Run("Providers", testProvidersExists)
	t.Run("Repositories", testRepositoriesExists)
	t.Run("Users", testUsersExists)
	t.Run("Websites", testWebsitesExists)
}

func TestFind(t *testing.T) {
	t.Run("Applications", testApplicationsFind)
	t.Run("Artifacts", testArtifactsFind)
	t.Run("AvailableDomains", testAvailableDomainsFind)
	t.Run("Branches", testBranchesFind)
	t.Run("BuildLogs", testBuildLogsFind)
	t.Run("Environments", testEnvironmentsFind)
	t.Run("Providers", testProvidersFind)
	t.Run("Repositories", testRepositoriesFind)
	t.Run("Users", testUsersFind)
	t.Run("Websites", testWebsitesFind)
}

func TestBind(t *testing.T) {
	t.Run("Applications", testApplicationsBind)
	t.Run("Artifacts", testArtifactsBind)
	t.Run("AvailableDomains", testAvailableDomainsBind)
	t.Run("Branches", testBranchesBind)
	t.Run("BuildLogs", testBuildLogsBind)
	t.Run("Environments", testEnvironmentsBind)
	t.Run("Providers", testProvidersBind)
	t.Run("Repositories", testRepositoriesBind)
	t.Run("Users", testUsersBind)
	t.Run("Websites", testWebsitesBind)
}

func TestOne(t *testing.T) {
	t.Run("Applications", testApplicationsOne)
	t.Run("Artifacts", testArtifactsOne)
	t.Run("AvailableDomains", testAvailableDomainsOne)
	t.Run("Branches", testBranchesOne)
	t.Run("BuildLogs", testBuildLogsOne)
	t.Run("Environments", testEnvironmentsOne)
	t.Run("Providers", testProvidersOne)
	t.Run("Repositories", testRepositoriesOne)
	t.Run("Users", testUsersOne)
	t.Run("Websites", testWebsitesOne)
}

func TestAll(t *testing.T) {
	t.Run("Applications", testApplicationsAll)
	t.Run("Artifacts", testArtifactsAll)
	t.Run("AvailableDomains", testAvailableDomainsAll)
	t.Run("Branches", testBranchesAll)
	t.Run("BuildLogs", testBuildLogsAll)
	t.Run("Environments", testEnvironmentsAll)
	t.Run("Providers", testProvidersAll)
	t.Run("Repositories", testRepositoriesAll)
	t.Run("Users", testUsersAll)
	t.Run("Websites", testWebsitesAll)
}

func TestCount(t *testing.T) {
	t.Run("Applications", testApplicationsCount)
	t.Run("Artifacts", testArtifactsCount)
	t.Run("AvailableDomains", testAvailableDomainsCount)
	t.Run("Branches", testBranchesCount)
	t.Run("BuildLogs", testBuildLogsCount)
	t.Run("Environments", testEnvironmentsCount)
	t.Run("Providers", testProvidersCount)
	t.Run("Repositories", testRepositoriesCount)
	t.Run("Users", testUsersCount)
	t.Run("Websites", testWebsitesCount)
}

func TestHooks(t *testing.T) {
	t.Run("Applications", testApplicationsHooks)
	t.Run("Artifacts", testArtifactsHooks)
	t.Run("AvailableDomains", testAvailableDomainsHooks)
	t.Run("Branches", testBranchesHooks)
	t.Run("BuildLogs", testBuildLogsHooks)
	t.Run("Environments", testEnvironmentsHooks)
	t.Run("Providers", testProvidersHooks)
	t.Run("Repositories", testRepositoriesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Websites", testWebsitesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Applications", testApplicationsInsert)
	t.Run("Applications", testApplicationsInsertWhitelist)
	t.Run("Artifacts", testArtifactsInsert)
	t.Run("Artifacts", testArtifactsInsertWhitelist)
	t.Run("AvailableDomains", testAvailableDomainsInsert)
	t.Run("AvailableDomains", testAvailableDomainsInsertWhitelist)
	t.Run("Branches", testBranchesInsert)
	t.Run("Branches", testBranchesInsertWhitelist)
	t.Run("BuildLogs", testBuildLogsInsert)
	t.Run("BuildLogs", testBuildLogsInsertWhitelist)
	t.Run("Environments", testEnvironmentsInsert)
	t.Run("Environments", testEnvironmentsInsertWhitelist)
	t.Run("Providers", testProvidersInsert)
	t.Run("Providers", testProvidersInsertWhitelist)
	t.Run("Repositories", testRepositoriesInsert)
	t.Run("Repositories", testRepositoriesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Websites", testWebsitesInsert)
	t.Run("Websites", testWebsitesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingRepository", testApplicationToOneRepositoryUsingRepository)
	t.Run("ArtifactToBuildLogUsingBuildLog", testArtifactToOneBuildLogUsingBuildLog)
	t.Run("BranchToApplicationUsingApplication", testBranchToOneApplicationUsingApplication)
	t.Run("BranchToBuildLogUsingBuild", testBranchToOneBuildLogUsingBuild)
	t.Run("BuildLogToBranchUsingBranch", testBuildLogToOneBranchUsingBranch)
	t.Run("EnvironmentToBranchUsingBranch", testEnvironmentToOneBranchUsingBranch)
	t.Run("RepositoryToProviderUsingProvider", testRepositoryToOneProviderUsingProvider)
	t.Run("WebsiteToBranchUsingBranch", testWebsiteToOneBranchUsingBranch)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("BranchToWebsiteUsingWebsite", testBranchOneToOneWebsiteUsingWebsite)
	t.Run("BuildLogToArtifactUsingArtifact", testBuildLogOneToOneArtifactUsingArtifact)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ApplicationToBranches", testApplicationToManyBranches)
	t.Run("ApplicationToUsers", testApplicationToManyUsers)
	t.Run("BranchToBuildLogs", testBranchToManyBuildLogs)
	t.Run("BranchToEnvironments", testBranchToManyEnvironments)
	t.Run("BuildLogToBuildBranches", testBuildLogToManyBuildBranches)
	t.Run("ProviderToRepositories", testProviderToManyRepositories)
	t.Run("RepositoryToApplications", testRepositoryToManyApplications)
	t.Run("UserToAppApplications", testUserToManyAppApplications)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingApplications", testApplicationToOneSetOpRepositoryUsingRepository)
	t.Run("ArtifactToBuildLogUsingArtifact", testArtifactToOneSetOpBuildLogUsingBuildLog)
	t.Run("BranchToApplicationUsingBranches", testBranchToOneSetOpApplicationUsingApplication)
	t.Run("BranchToBuildLogUsingBuildBranches", testBranchToOneSetOpBuildLogUsingBuild)
	t.Run("BuildLogToBranchUsingBuildLogs", testBuildLogToOneSetOpBranchUsingBranch)
	t.Run("EnvironmentToBranchUsingEnvironments", testEnvironmentToOneSetOpBranchUsingBranch)
	t.Run("RepositoryToProviderUsingRepositories", testRepositoryToOneSetOpProviderUsingProvider)
	t.Run("WebsiteToBranchUsingWebsite", testWebsiteToOneSetOpBranchUsingBranch)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("BranchToBuildLogUsingBuildBranches", testBranchToOneRemoveOpBuildLogUsingBuild)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("BranchToWebsiteUsingWebsite", testBranchOneToOneSetOpWebsiteUsingWebsite)
	t.Run("BuildLogToArtifactUsingArtifact", testBuildLogOneToOneSetOpArtifactUsingArtifact)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ApplicationToBranches", testApplicationToManyAddOpBranches)
	t.Run("ApplicationToUsers", testApplicationToManyAddOpUsers)
	t.Run("BranchToBuildLogs", testBranchToManyAddOpBuildLogs)
	t.Run("BranchToEnvironments", testBranchToManyAddOpEnvironments)
	t.Run("BuildLogToBuildBranches", testBuildLogToManyAddOpBuildBranches)
	t.Run("ProviderToRepositories", testProviderToManyAddOpRepositories)
	t.Run("RepositoryToApplications", testRepositoryToManyAddOpApplications)
	t.Run("UserToAppApplications", testUserToManyAddOpAppApplications)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ApplicationToUsers", testApplicationToManySetOpUsers)
	t.Run("BuildLogToBuildBranches", testBuildLogToManySetOpBuildBranches)
	t.Run("UserToAppApplications", testUserToManySetOpAppApplications)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ApplicationToUsers", testApplicationToManyRemoveOpUsers)
	t.Run("BuildLogToBuildBranches", testBuildLogToManyRemoveOpBuildBranches)
	t.Run("UserToAppApplications", testUserToManyRemoveOpAppApplications)
}

func TestReload(t *testing.T) {
	t.Run("Applications", testApplicationsReload)
	t.Run("Artifacts", testArtifactsReload)
	t.Run("AvailableDomains", testAvailableDomainsReload)
	t.Run("Branches", testBranchesReload)
	t.Run("BuildLogs", testBuildLogsReload)
	t.Run("Environments", testEnvironmentsReload)
	t.Run("Providers", testProvidersReload)
	t.Run("Repositories", testRepositoriesReload)
	t.Run("Users", testUsersReload)
	t.Run("Websites", testWebsitesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Applications", testApplicationsReloadAll)
	t.Run("Artifacts", testArtifactsReloadAll)
	t.Run("AvailableDomains", testAvailableDomainsReloadAll)
	t.Run("Branches", testBranchesReloadAll)
	t.Run("BuildLogs", testBuildLogsReloadAll)
	t.Run("Environments", testEnvironmentsReloadAll)
	t.Run("Providers", testProvidersReloadAll)
	t.Run("Repositories", testRepositoriesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Websites", testWebsitesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Applications", testApplicationsSelect)
	t.Run("Artifacts", testArtifactsSelect)
	t.Run("AvailableDomains", testAvailableDomainsSelect)
	t.Run("Branches", testBranchesSelect)
	t.Run("BuildLogs", testBuildLogsSelect)
	t.Run("Environments", testEnvironmentsSelect)
	t.Run("Providers", testProvidersSelect)
	t.Run("Repositories", testRepositoriesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Websites", testWebsitesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Applications", testApplicationsUpdate)
	t.Run("Artifacts", testArtifactsUpdate)
	t.Run("AvailableDomains", testAvailableDomainsUpdate)
	t.Run("Branches", testBranchesUpdate)
	t.Run("BuildLogs", testBuildLogsUpdate)
	t.Run("Environments", testEnvironmentsUpdate)
	t.Run("Providers", testProvidersUpdate)
	t.Run("Repositories", testRepositoriesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Websites", testWebsitesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Applications", testApplicationsSliceUpdateAll)
	t.Run("Artifacts", testArtifactsSliceUpdateAll)
	t.Run("AvailableDomains", testAvailableDomainsSliceUpdateAll)
	t.Run("Branches", testBranchesSliceUpdateAll)
	t.Run("BuildLogs", testBuildLogsSliceUpdateAll)
	t.Run("Environments", testEnvironmentsSliceUpdateAll)
	t.Run("Providers", testProvidersSliceUpdateAll)
	t.Run("Repositories", testRepositoriesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Websites", testWebsitesSliceUpdateAll)
}
