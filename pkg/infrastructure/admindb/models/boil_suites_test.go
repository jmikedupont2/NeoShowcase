// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStates)
	t.Run("Applications", testApplications)
	t.Run("Artifacts", testArtifacts)
	t.Run("AvailableDomains", testAvailableDomains)
	t.Run("BuildStatuses", testBuildStatuses)
	t.Run("Builds", testBuilds)
	t.Run("Environments", testEnvironments)
	t.Run("Repositories", testRepositories)
	t.Run("Users", testUsers)
	t.Run("Websites", testWebsites)
}

func TestDelete(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesDelete)
	t.Run("Applications", testApplicationsDelete)
	t.Run("Artifacts", testArtifactsDelete)
	t.Run("AvailableDomains", testAvailableDomainsDelete)
	t.Run("BuildStatuses", testBuildStatusesDelete)
	t.Run("Builds", testBuildsDelete)
	t.Run("Environments", testEnvironmentsDelete)
	t.Run("Repositories", testRepositoriesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("Websites", testWebsitesDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesQueryDeleteAll)
	t.Run("Applications", testApplicationsQueryDeleteAll)
	t.Run("Artifacts", testArtifactsQueryDeleteAll)
	t.Run("AvailableDomains", testAvailableDomainsQueryDeleteAll)
	t.Run("BuildStatuses", testBuildStatusesQueryDeleteAll)
	t.Run("Builds", testBuildsQueryDeleteAll)
	t.Run("Environments", testEnvironmentsQueryDeleteAll)
	t.Run("Repositories", testRepositoriesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("Websites", testWebsitesQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesSliceDeleteAll)
	t.Run("Applications", testApplicationsSliceDeleteAll)
	t.Run("Artifacts", testArtifactsSliceDeleteAll)
	t.Run("AvailableDomains", testAvailableDomainsSliceDeleteAll)
	t.Run("BuildStatuses", testBuildStatusesSliceDeleteAll)
	t.Run("Builds", testBuildsSliceDeleteAll)
	t.Run("Environments", testEnvironmentsSliceDeleteAll)
	t.Run("Repositories", testRepositoriesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("Websites", testWebsitesSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesExists)
	t.Run("Applications", testApplicationsExists)
	t.Run("Artifacts", testArtifactsExists)
	t.Run("AvailableDomains", testAvailableDomainsExists)
	t.Run("BuildStatuses", testBuildStatusesExists)
	t.Run("Builds", testBuildsExists)
	t.Run("Environments", testEnvironmentsExists)
	t.Run("Repositories", testRepositoriesExists)
	t.Run("Users", testUsersExists)
	t.Run("Websites", testWebsitesExists)
}

func TestFind(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesFind)
	t.Run("Applications", testApplicationsFind)
	t.Run("Artifacts", testArtifactsFind)
	t.Run("AvailableDomains", testAvailableDomainsFind)
	t.Run("BuildStatuses", testBuildStatusesFind)
	t.Run("Builds", testBuildsFind)
	t.Run("Environments", testEnvironmentsFind)
	t.Run("Repositories", testRepositoriesFind)
	t.Run("Users", testUsersFind)
	t.Run("Websites", testWebsitesFind)
}

func TestBind(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesBind)
	t.Run("Applications", testApplicationsBind)
	t.Run("Artifacts", testArtifactsBind)
	t.Run("AvailableDomains", testAvailableDomainsBind)
	t.Run("BuildStatuses", testBuildStatusesBind)
	t.Run("Builds", testBuildsBind)
	t.Run("Environments", testEnvironmentsBind)
	t.Run("Repositories", testRepositoriesBind)
	t.Run("Users", testUsersBind)
	t.Run("Websites", testWebsitesBind)
}

func TestOne(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesOne)
	t.Run("Applications", testApplicationsOne)
	t.Run("Artifacts", testArtifactsOne)
	t.Run("AvailableDomains", testAvailableDomainsOne)
	t.Run("BuildStatuses", testBuildStatusesOne)
	t.Run("Builds", testBuildsOne)
	t.Run("Environments", testEnvironmentsOne)
	t.Run("Repositories", testRepositoriesOne)
	t.Run("Users", testUsersOne)
	t.Run("Websites", testWebsitesOne)
}

func TestAll(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesAll)
	t.Run("Applications", testApplicationsAll)
	t.Run("Artifacts", testArtifactsAll)
	t.Run("AvailableDomains", testAvailableDomainsAll)
	t.Run("BuildStatuses", testBuildStatusesAll)
	t.Run("Builds", testBuildsAll)
	t.Run("Environments", testEnvironmentsAll)
	t.Run("Repositories", testRepositoriesAll)
	t.Run("Users", testUsersAll)
	t.Run("Websites", testWebsitesAll)
}

func TestCount(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesCount)
	t.Run("Applications", testApplicationsCount)
	t.Run("Artifacts", testArtifactsCount)
	t.Run("AvailableDomains", testAvailableDomainsCount)
	t.Run("BuildStatuses", testBuildStatusesCount)
	t.Run("Builds", testBuildsCount)
	t.Run("Environments", testEnvironmentsCount)
	t.Run("Repositories", testRepositoriesCount)
	t.Run("Users", testUsersCount)
	t.Run("Websites", testWebsitesCount)
}

func TestHooks(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesHooks)
	t.Run("Applications", testApplicationsHooks)
	t.Run("Artifacts", testArtifactsHooks)
	t.Run("AvailableDomains", testAvailableDomainsHooks)
	t.Run("BuildStatuses", testBuildStatusesHooks)
	t.Run("Builds", testBuildsHooks)
	t.Run("Environments", testEnvironmentsHooks)
	t.Run("Repositories", testRepositoriesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("Websites", testWebsitesHooks)
}

func TestInsert(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesInsert)
	t.Run("ApplicationStates", testApplicationStatesInsertWhitelist)
	t.Run("Applications", testApplicationsInsert)
	t.Run("Applications", testApplicationsInsertWhitelist)
	t.Run("Artifacts", testArtifactsInsert)
	t.Run("Artifacts", testArtifactsInsertWhitelist)
	t.Run("AvailableDomains", testAvailableDomainsInsert)
	t.Run("AvailableDomains", testAvailableDomainsInsertWhitelist)
	t.Run("BuildStatuses", testBuildStatusesInsert)
	t.Run("BuildStatuses", testBuildStatusesInsertWhitelist)
	t.Run("Builds", testBuildsInsert)
	t.Run("Builds", testBuildsInsertWhitelist)
	t.Run("Environments", testEnvironmentsInsert)
	t.Run("Environments", testEnvironmentsInsertWhitelist)
	t.Run("Repositories", testRepositoriesInsert)
	t.Run("Repositories", testRepositoriesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("Websites", testWebsitesInsert)
	t.Run("Websites", testWebsitesInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingRepository", testApplicationToOneRepositoryUsingRepository)
	t.Run("ApplicationToApplicationStateUsingStateApplicationState", testApplicationToOneApplicationStateUsingStateApplicationState)
	t.Run("ArtifactToBuildUsingBuild", testArtifactToOneBuildUsingBuild)
	t.Run("BuildToApplicationUsingApplication", testBuildToOneApplicationUsingApplication)
	t.Run("BuildToBuildStatusUsingStatusBuildStatus", testBuildToOneBuildStatusUsingStatusBuildStatus)
	t.Run("EnvironmentToApplicationUsingApplication", testEnvironmentToOneApplicationUsingApplication)
	t.Run("WebsiteToApplicationUsingApplication", testWebsiteToOneApplicationUsingApplication)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("ApplicationToWebsiteUsingWebsite", testApplicationOneToOneWebsiteUsingWebsite)
	t.Run("BuildToArtifactUsingArtifact", testBuildOneToOneArtifactUsingArtifact)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("ApplicationStateToStateApplications", testApplicationStateToManyStateApplications)
	t.Run("ApplicationToBuilds", testApplicationToManyBuilds)
	t.Run("ApplicationToEnvironments", testApplicationToManyEnvironments)
	t.Run("ApplicationToUsers", testApplicationToManyUsers)
	t.Run("BuildStatusToStatusBuilds", testBuildStatusToManyStatusBuilds)
	t.Run("RepositoryToApplications", testRepositoryToManyApplications)
	t.Run("UserToApplications", testUserToManyApplications)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("ApplicationToRepositoryUsingApplications", testApplicationToOneSetOpRepositoryUsingRepository)
	t.Run("ApplicationToApplicationStateUsingStateApplications", testApplicationToOneSetOpApplicationStateUsingStateApplicationState)
	t.Run("ArtifactToBuildUsingArtifact", testArtifactToOneSetOpBuildUsingBuild)
	t.Run("BuildToApplicationUsingBuilds", testBuildToOneSetOpApplicationUsingApplication)
	t.Run("BuildToBuildStatusUsingStatusBuilds", testBuildToOneSetOpBuildStatusUsingStatusBuildStatus)
	t.Run("EnvironmentToApplicationUsingEnvironments", testEnvironmentToOneSetOpApplicationUsingApplication)
	t.Run("WebsiteToApplicationUsingWebsite", testWebsiteToOneSetOpApplicationUsingApplication)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("ApplicationToWebsiteUsingWebsite", testApplicationOneToOneSetOpWebsiteUsingWebsite)
	t.Run("BuildToArtifactUsingArtifact", testBuildOneToOneSetOpArtifactUsingArtifact)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("ApplicationStateToStateApplications", testApplicationStateToManyAddOpStateApplications)
	t.Run("ApplicationToBuilds", testApplicationToManyAddOpBuilds)
	t.Run("ApplicationToEnvironments", testApplicationToManyAddOpEnvironments)
	t.Run("ApplicationToUsers", testApplicationToManyAddOpUsers)
	t.Run("BuildStatusToStatusBuilds", testBuildStatusToManyAddOpStatusBuilds)
	t.Run("RepositoryToApplications", testRepositoryToManyAddOpApplications)
	t.Run("UserToApplications", testUserToManyAddOpApplications)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("ApplicationToUsers", testApplicationToManySetOpUsers)
	t.Run("UserToApplications", testUserToManySetOpApplications)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("ApplicationToUsers", testApplicationToManyRemoveOpUsers)
	t.Run("UserToApplications", testUserToManyRemoveOpApplications)
}

func TestReload(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesReload)
	t.Run("Applications", testApplicationsReload)
	t.Run("Artifacts", testArtifactsReload)
	t.Run("AvailableDomains", testAvailableDomainsReload)
	t.Run("BuildStatuses", testBuildStatusesReload)
	t.Run("Builds", testBuildsReload)
	t.Run("Environments", testEnvironmentsReload)
	t.Run("Repositories", testRepositoriesReload)
	t.Run("Users", testUsersReload)
	t.Run("Websites", testWebsitesReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesReloadAll)
	t.Run("Applications", testApplicationsReloadAll)
	t.Run("Artifacts", testArtifactsReloadAll)
	t.Run("AvailableDomains", testAvailableDomainsReloadAll)
	t.Run("BuildStatuses", testBuildStatusesReloadAll)
	t.Run("Builds", testBuildsReloadAll)
	t.Run("Environments", testEnvironmentsReloadAll)
	t.Run("Repositories", testRepositoriesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("Websites", testWebsitesReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesSelect)
	t.Run("Applications", testApplicationsSelect)
	t.Run("Artifacts", testArtifactsSelect)
	t.Run("AvailableDomains", testAvailableDomainsSelect)
	t.Run("BuildStatuses", testBuildStatusesSelect)
	t.Run("Builds", testBuildsSelect)
	t.Run("Environments", testEnvironmentsSelect)
	t.Run("Repositories", testRepositoriesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("Websites", testWebsitesSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesUpdate)
	t.Run("Applications", testApplicationsUpdate)
	t.Run("Artifacts", testArtifactsUpdate)
	t.Run("AvailableDomains", testAvailableDomainsUpdate)
	t.Run("BuildStatuses", testBuildStatusesUpdate)
	t.Run("Builds", testBuildsUpdate)
	t.Run("Environments", testEnvironmentsUpdate)
	t.Run("Repositories", testRepositoriesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("Websites", testWebsitesUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("ApplicationStates", testApplicationStatesSliceUpdateAll)
	t.Run("Applications", testApplicationsSliceUpdateAll)
	t.Run("Artifacts", testArtifactsSliceUpdateAll)
	t.Run("AvailableDomains", testAvailableDomainsSliceUpdateAll)
	t.Run("BuildStatuses", testBuildStatusesSliceUpdateAll)
	t.Run("Builds", testBuildsSliceUpdateAll)
	t.Run("Environments", testEnvironmentsSliceUpdateAll)
	t.Run("Repositories", testRepositoriesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("Websites", testWebsitesSliceUpdateAll)
}
