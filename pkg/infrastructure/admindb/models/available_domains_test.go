// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAvailableDomains(t *testing.T) {
	t.Parallel()

	query := AvailableDomains()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAvailableDomainsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAvailableDomainsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AvailableDomains().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAvailableDomainsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AvailableDomainSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAvailableDomainsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AvailableDomainExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AvailableDomain exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AvailableDomainExists to return true, but got false.")
	}
}

func testAvailableDomainsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	availableDomainFound, err := FindAvailableDomain(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if availableDomainFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAvailableDomainsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AvailableDomains().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAvailableDomainsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AvailableDomains().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAvailableDomainsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	availableDomainOne := &AvailableDomain{}
	availableDomainTwo := &AvailableDomain{}
	if err = randomize.Struct(seed, availableDomainOne, availableDomainDBTypes, false, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}
	if err = randomize.Struct(seed, availableDomainTwo, availableDomainDBTypes, false, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = availableDomainOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = availableDomainTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AvailableDomains().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAvailableDomainsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	availableDomainOne := &AvailableDomain{}
	availableDomainTwo := &AvailableDomain{}
	if err = randomize.Struct(seed, availableDomainOne, availableDomainDBTypes, false, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}
	if err = randomize.Struct(seed, availableDomainTwo, availableDomainDBTypes, false, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = availableDomainOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = availableDomainTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func availableDomainBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func availableDomainAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *AvailableDomain) error {
	*o = AvailableDomain{}
	return nil
}

func testAvailableDomainsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &AvailableDomain{}
	o := &AvailableDomain{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, availableDomainDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AvailableDomain object: %s", err)
	}

	AddAvailableDomainHook(boil.BeforeInsertHook, availableDomainBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	availableDomainBeforeInsertHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.AfterInsertHook, availableDomainAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	availableDomainAfterInsertHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.AfterSelectHook, availableDomainAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	availableDomainAfterSelectHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.BeforeUpdateHook, availableDomainBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	availableDomainBeforeUpdateHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.AfterUpdateHook, availableDomainAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	availableDomainAfterUpdateHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.BeforeDeleteHook, availableDomainBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	availableDomainBeforeDeleteHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.AfterDeleteHook, availableDomainAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	availableDomainAfterDeleteHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.BeforeUpsertHook, availableDomainBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	availableDomainBeforeUpsertHooks = []AvailableDomainHook{}

	AddAvailableDomainHook(boil.AfterUpsertHook, availableDomainAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	availableDomainAfterUpsertHooks = []AvailableDomainHook{}
}

func testAvailableDomainsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAvailableDomainsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(availableDomainColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAvailableDomainsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAvailableDomainsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AvailableDomainSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAvailableDomainsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AvailableDomains().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	availableDomainDBTypes = map[string]string{`ID`: `varchar`, `Domain`: `varchar`, `Subdomain`: `tinyint`}
	_                      = bytes.MinRead
)

func testAvailableDomainsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(availableDomainPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(availableDomainAllColumns) == len(availableDomainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAvailableDomainsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(availableDomainAllColumns) == len(availableDomainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AvailableDomain{}
	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, availableDomainDBTypes, true, availableDomainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(availableDomainAllColumns, availableDomainPrimaryKeyColumns) {
		fields = availableDomainAllColumns
	} else {
		fields = strmangle.SetComplement(
			availableDomainAllColumns,
			availableDomainPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AvailableDomainSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAvailableDomainsUpsert(t *testing.T) {
	t.Parallel()

	if len(availableDomainAllColumns) == len(availableDomainPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLAvailableDomainUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AvailableDomain{}
	if err = randomize.Struct(seed, &o, availableDomainDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AvailableDomain: %s", err)
	}

	count, err := AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, availableDomainDBTypes, false, availableDomainPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AvailableDomain struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AvailableDomain: %s", err)
	}

	count, err = AvailableDomains().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
