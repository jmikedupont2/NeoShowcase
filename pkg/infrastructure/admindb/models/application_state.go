// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ApplicationState is an object representing the database table.
type ApplicationState struct { // デプロイの状態
	State string `boil:"state" json:"state" toml:"state" yaml:"state"`

	R *applicationStateR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L applicationStateL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApplicationStateColumns = struct {
	State string
}{
	State: "state",
}

var ApplicationStateTableColumns = struct {
	State string
}{
	State: "application_state.state",
}

// Generated where

var ApplicationStateWhere = struct {
	State whereHelperstring
}{
	State: whereHelperstring{field: "`application_state`.`state`"},
}

// ApplicationStateRels is where relationship names are stored.
var ApplicationStateRels = struct {
	StateApplications string
}{
	StateApplications: "StateApplications",
}

// applicationStateR is where relationships are stored.
type applicationStateR struct {
	StateApplications ApplicationSlice `boil:"StateApplications" json:"StateApplications" toml:"StateApplications" yaml:"StateApplications"`
}

// NewStruct creates a new relationship struct
func (*applicationStateR) NewStruct() *applicationStateR {
	return &applicationStateR{}
}

func (r *applicationStateR) GetStateApplications() ApplicationSlice {
	if r == nil {
		return nil
	}
	return r.StateApplications
}

// applicationStateL is where Load methods for each relationship are stored.
type applicationStateL struct{}

var (
	applicationStateAllColumns            = []string{"state"}
	applicationStateColumnsWithoutDefault = []string{"state"}
	applicationStateColumnsWithDefault    = []string{}
	applicationStatePrimaryKeyColumns     = []string{"state"}
	applicationStateGeneratedColumns      = []string{}
)

type (
	// ApplicationStateSlice is an alias for a slice of pointers to ApplicationState.
	// This should almost always be used instead of []ApplicationState.
	ApplicationStateSlice []*ApplicationState
	// ApplicationStateHook is the signature for custom ApplicationState hook methods
	ApplicationStateHook func(context.Context, boil.ContextExecutor, *ApplicationState) error

	applicationStateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	applicationStateType                 = reflect.TypeOf(&ApplicationState{})
	applicationStateMapping              = queries.MakeStructMapping(applicationStateType)
	applicationStatePrimaryKeyMapping, _ = queries.BindMapping(applicationStateType, applicationStateMapping, applicationStatePrimaryKeyColumns)
	applicationStateInsertCacheMut       sync.RWMutex
	applicationStateInsertCache          = make(map[string]insertCache)
	applicationStateUpdateCacheMut       sync.RWMutex
	applicationStateUpdateCache          = make(map[string]updateCache)
	applicationStateUpsertCacheMut       sync.RWMutex
	applicationStateUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var applicationStateAfterSelectHooks []ApplicationStateHook

var applicationStateBeforeInsertHooks []ApplicationStateHook
var applicationStateAfterInsertHooks []ApplicationStateHook

var applicationStateBeforeUpdateHooks []ApplicationStateHook
var applicationStateAfterUpdateHooks []ApplicationStateHook

var applicationStateBeforeDeleteHooks []ApplicationStateHook
var applicationStateAfterDeleteHooks []ApplicationStateHook

var applicationStateBeforeUpsertHooks []ApplicationStateHook
var applicationStateAfterUpsertHooks []ApplicationStateHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ApplicationState) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ApplicationState) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ApplicationState) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ApplicationState) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ApplicationState) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ApplicationState) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ApplicationState) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ApplicationState) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ApplicationState) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range applicationStateAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddApplicationStateHook registers your hook function for all future operations.
func AddApplicationStateHook(hookPoint boil.HookPoint, applicationStateHook ApplicationStateHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		applicationStateAfterSelectHooks = append(applicationStateAfterSelectHooks, applicationStateHook)
	case boil.BeforeInsertHook:
		applicationStateBeforeInsertHooks = append(applicationStateBeforeInsertHooks, applicationStateHook)
	case boil.AfterInsertHook:
		applicationStateAfterInsertHooks = append(applicationStateAfterInsertHooks, applicationStateHook)
	case boil.BeforeUpdateHook:
		applicationStateBeforeUpdateHooks = append(applicationStateBeforeUpdateHooks, applicationStateHook)
	case boil.AfterUpdateHook:
		applicationStateAfterUpdateHooks = append(applicationStateAfterUpdateHooks, applicationStateHook)
	case boil.BeforeDeleteHook:
		applicationStateBeforeDeleteHooks = append(applicationStateBeforeDeleteHooks, applicationStateHook)
	case boil.AfterDeleteHook:
		applicationStateAfterDeleteHooks = append(applicationStateAfterDeleteHooks, applicationStateHook)
	case boil.BeforeUpsertHook:
		applicationStateBeforeUpsertHooks = append(applicationStateBeforeUpsertHooks, applicationStateHook)
	case boil.AfterUpsertHook:
		applicationStateAfterUpsertHooks = append(applicationStateAfterUpsertHooks, applicationStateHook)
	}
}

// One returns a single applicationState record from the query.
func (q applicationStateQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ApplicationState, error) {
	o := &ApplicationState{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for application_state")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ApplicationState records from the query.
func (q applicationStateQuery) All(ctx context.Context, exec boil.ContextExecutor) (ApplicationStateSlice, error) {
	var o []*ApplicationState

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ApplicationState slice")
	}

	if len(applicationStateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ApplicationState records in the query.
func (q applicationStateQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count application_state rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q applicationStateQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if application_state exists")
	}

	return count > 0, nil
}

// StateApplications retrieves all the application's Applications with an executor via state column.
func (o *ApplicationState) StateApplications(mods ...qm.QueryMod) applicationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`applications`.`state`=?", o.State),
	)

	return Applications(queryMods...)
}

// LoadStateApplications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (applicationStateL) LoadStateApplications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeApplicationState interface{}, mods queries.Applicator) error {
	var slice []*ApplicationState
	var object *ApplicationState

	if singular {
		var ok bool
		object, ok = maybeApplicationState.(*ApplicationState)
		if !ok {
			object = new(ApplicationState)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeApplicationState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeApplicationState))
			}
		}
	} else {
		s, ok := maybeApplicationState.(*[]*ApplicationState)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeApplicationState)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeApplicationState))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &applicationStateR{}
		}
		args = append(args, object.State)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &applicationStateR{}
			}

			for _, a := range args {
				if a == obj.State {
					continue Outer
				}
			}

			args = append(args, obj.State)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`applications`),
		qm.WhereIn(`applications.state in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load applications")
	}

	var resultSlice []*Application
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice applications")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on applications")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for applications")
	}

	if len(applicationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.StateApplications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &applicationR{}
			}
			foreign.R.StateApplicationState = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.State == foreign.State {
				local.R.StateApplications = append(local.R.StateApplications, foreign)
				if foreign.R == nil {
					foreign.R = &applicationR{}
				}
				foreign.R.StateApplicationState = local
				break
			}
		}
	}

	return nil
}

// AddStateApplications adds the given related objects to the existing relationships
// of the application_state, optionally inserting them as new records.
// Appends related to o.R.StateApplications.
// Sets related.R.StateApplicationState appropriately.
func (o *ApplicationState) AddStateApplications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Application) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.State = o.State
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `applications` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"state"}),
				strmangle.WhereClause("`", "`", 0, applicationPrimaryKeyColumns),
			)
			values := []interface{}{o.State, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.State = o.State
		}
	}

	if o.R == nil {
		o.R = &applicationStateR{
			StateApplications: related,
		}
	} else {
		o.R.StateApplications = append(o.R.StateApplications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &applicationR{
				StateApplicationState: o,
			}
		} else {
			rel.R.StateApplicationState = o
		}
	}
	return nil
}

// ApplicationStates retrieves all the records using an executor.
func ApplicationStates(mods ...qm.QueryMod) applicationStateQuery {
	mods = append(mods, qm.From("`application_state`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`application_state`.*"})
	}

	return applicationStateQuery{q}
}

// FindApplicationState retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApplicationState(ctx context.Context, exec boil.ContextExecutor, state string, selectCols ...string) (*ApplicationState, error) {
	applicationStateObj := &ApplicationState{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `application_state` where `state`=?", sel,
	)

	q := queries.Raw(query, state)

	err := q.Bind(ctx, exec, applicationStateObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from application_state")
	}

	if err = applicationStateObj.doAfterSelectHooks(ctx, exec); err != nil {
		return applicationStateObj, err
	}

	return applicationStateObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ApplicationState) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no application_state provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStateColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	applicationStateInsertCacheMut.RLock()
	cache, cached := applicationStateInsertCache[key]
	applicationStateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			applicationStateAllColumns,
			applicationStateColumnsWithDefault,
			applicationStateColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(applicationStateType, applicationStateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(applicationStateType, applicationStateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `application_state` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `application_state` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `application_state` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, applicationStatePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into application_state")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.State,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for application_state")
	}

CacheNoHooks:
	if !cached {
		applicationStateInsertCacheMut.Lock()
		applicationStateInsertCache[key] = cache
		applicationStateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ApplicationState.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ApplicationState) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	applicationStateUpdateCacheMut.RLock()
	cache, cached := applicationStateUpdateCache[key]
	applicationStateUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			applicationStateAllColumns,
			applicationStatePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update application_state, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `application_state` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, applicationStatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(applicationStateType, applicationStateMapping, append(wl, applicationStatePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update application_state row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for application_state")
	}

	if !cached {
		applicationStateUpdateCacheMut.Lock()
		applicationStateUpdateCache[key] = cache
		applicationStateUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q applicationStateQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for application_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for application_state")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApplicationStateSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `application_state` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in applicationState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all applicationState")
	}
	return rowsAff, nil
}

var mySQLApplicationStateUniqueColumns = []string{
	"state",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ApplicationState) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no application_state provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(applicationStateColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLApplicationStateUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	applicationStateUpsertCacheMut.RLock()
	cache, cached := applicationStateUpsertCache[key]
	applicationStateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			applicationStateAllColumns,
			applicationStateColumnsWithDefault,
			applicationStateColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			applicationStateAllColumns,
			applicationStatePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert application_state, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`application_state`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `application_state` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(applicationStateType, applicationStateMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(applicationStateType, applicationStateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for application_state")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(applicationStateType, applicationStateMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for application_state")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for application_state")
	}

CacheNoHooks:
	if !cached {
		applicationStateUpsertCacheMut.Lock()
		applicationStateUpsertCache[key] = cache
		applicationStateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ApplicationState record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ApplicationState) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ApplicationState provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), applicationStatePrimaryKeyMapping)
	sql := "DELETE FROM `application_state` WHERE `state`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from application_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for application_state")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q applicationStateQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no applicationStateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from application_state")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for application_state")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApplicationStateSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(applicationStateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `application_state` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from applicationState slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for application_state")
	}

	if len(applicationStateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ApplicationState) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindApplicationState(ctx, exec, o.State)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApplicationStateSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApplicationStateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), applicationStatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `application_state`.* FROM `application_state` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, applicationStatePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ApplicationStateSlice")
	}

	*o = slice

	return nil
}

// ApplicationStateExists checks if the ApplicationState row exists.
func ApplicationStateExists(ctx context.Context, exec boil.ContextExecutor, state string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `application_state` where `state`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, state)
	}
	row := exec.QueryRowContext(ctx, sql, state)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if application_state exists")
	}

	return exists, nil
}

// Exists checks if the ApplicationState row exists.
func (o *ApplicationState) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ApplicationStateExists(ctx, exec, o.State)
}
