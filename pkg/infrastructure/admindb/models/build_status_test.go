// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBuildStatuses(t *testing.T) {
	t.Parallel()

	query := BuildStatuses()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBuildStatusesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildStatusesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BuildStatuses().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildStatusesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildStatusSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBuildStatusesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BuildStatusExists(ctx, tx, o.Status)
	if err != nil {
		t.Errorf("Unable to check if BuildStatus exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BuildStatusExists to return true, but got false.")
	}
}

func testBuildStatusesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	buildStatusFound, err := FindBuildStatus(ctx, tx, o.Status)
	if err != nil {
		t.Error(err)
	}

	if buildStatusFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBuildStatusesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BuildStatuses().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBuildStatusesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BuildStatuses().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBuildStatusesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	buildStatusOne := &BuildStatus{}
	buildStatusTwo := &BuildStatus{}
	if err = randomize.Struct(seed, buildStatusOne, buildStatusDBTypes, false, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, buildStatusTwo, buildStatusDBTypes, false, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuildStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBuildStatusesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	buildStatusOne := &BuildStatus{}
	buildStatusTwo := &BuildStatus{}
	if err = randomize.Struct(seed, buildStatusOne, buildStatusDBTypes, false, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}
	if err = randomize.Struct(seed, buildStatusTwo, buildStatusDBTypes, false, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = buildStatusOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = buildStatusTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func buildStatusBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func buildStatusAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BuildStatus) error {
	*o = BuildStatus{}
	return nil
}

func testBuildStatusesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BuildStatus{}
	o := &BuildStatus{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, buildStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BuildStatus object: %s", err)
	}

	AddBuildStatusHook(boil.BeforeInsertHook, buildStatusBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	buildStatusBeforeInsertHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.AfterInsertHook, buildStatusAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	buildStatusAfterInsertHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.AfterSelectHook, buildStatusAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	buildStatusAfterSelectHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.BeforeUpdateHook, buildStatusBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	buildStatusBeforeUpdateHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.AfterUpdateHook, buildStatusAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	buildStatusAfterUpdateHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.BeforeDeleteHook, buildStatusBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	buildStatusBeforeDeleteHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.AfterDeleteHook, buildStatusAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	buildStatusAfterDeleteHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.BeforeUpsertHook, buildStatusBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	buildStatusBeforeUpsertHooks = []BuildStatusHook{}

	AddBuildStatusHook(boil.AfterUpsertHook, buildStatusAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	buildStatusAfterUpsertHooks = []BuildStatusHook{}
}

func testBuildStatusesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildStatusesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(buildStatusColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBuildStatusToManyStatusBuilds(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BuildStatus
	var b, c Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, buildDBTypes, false, buildColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.Status = a.Status
	c.Status = a.Status

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.StatusBuilds().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.Status == b.Status {
			bFound = true
		}
		if v.Status == c.Status {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := BuildStatusSlice{&a}
	if err = a.L.LoadStatusBuilds(ctx, tx, false, (*[]*BuildStatus)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StatusBuilds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.StatusBuilds = nil
	if err = a.L.LoadStatusBuilds(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.StatusBuilds); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testBuildStatusToManyAddOpStatusBuilds(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BuildStatus
	var b, c, d, e Build

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, buildStatusDBTypes, false, strmangle.SetComplement(buildStatusPrimaryKeyColumns, buildStatusColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Build{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, buildDBTypes, false, strmangle.SetComplement(buildPrimaryKeyColumns, buildColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Build{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddStatusBuilds(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.Status != first.Status {
			t.Error("foreign key was wrong value", a.Status, first.Status)
		}
		if a.Status != second.Status {
			t.Error("foreign key was wrong value", a.Status, second.Status)
		}

		if first.R.StatusBuildStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.StatusBuildStatus != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.StatusBuilds[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.StatusBuilds[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.StatusBuilds().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testBuildStatusesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildStatusesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BuildStatusSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBuildStatusesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BuildStatuses().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	buildStatusDBTypes = map[string]string{`Status`: `varchar`}
	_                  = bytes.MinRead
)

func testBuildStatusesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(buildStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(buildStatusAllColumns) == len(buildStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBuildStatusesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(buildStatusAllColumns) == len(buildStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BuildStatus{}
	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, buildStatusDBTypes, true, buildStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(buildStatusAllColumns, buildStatusPrimaryKeyColumns) {
		fields = buildStatusAllColumns
	} else {
		fields = strmangle.SetComplement(
			buildStatusAllColumns,
			buildStatusPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BuildStatusSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBuildStatusesUpsert(t *testing.T) {
	t.Parallel()

	if len(buildStatusAllColumns) == len(buildStatusPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBuildStatusUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BuildStatus{}
	if err = randomize.Struct(seed, &o, buildStatusDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuildStatus: %s", err)
	}

	count, err := BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, buildStatusDBTypes, false, buildStatusPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BuildStatus struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BuildStatus: %s", err)
	}

	count, err = BuildStatuses().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
