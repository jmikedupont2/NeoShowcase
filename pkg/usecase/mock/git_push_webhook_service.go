// Code generated by MockGen. DO NOT EDIT.
// Source: git_push_webhook_service.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGitPushWebhookService is a mock of GitPushWebhookService interface.
type MockGitPushWebhookService struct {
	ctrl     *gomock.Controller
	recorder *MockGitPushWebhookServiceMockRecorder
}

// MockGitPushWebhookServiceMockRecorder is the mock recorder for MockGitPushWebhookService.
type MockGitPushWebhookServiceMockRecorder struct {
	mock *MockGitPushWebhookService
}

// NewMockGitPushWebhookService creates a new mock instance.
func NewMockGitPushWebhookService(ctrl *gomock.Controller) *MockGitPushWebhookService {
	mock := &MockGitPushWebhookService{ctrl: ctrl}
	mock.recorder = &MockGitPushWebhookServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitPushWebhookService) EXPECT() *MockGitPushWebhookServiceMockRecorder {
	return m.recorder
}

// CheckRepositoryExists mocks base method.
func (m *MockGitPushWebhookService) CheckRepositoryExists(ctx context.Context, repoURL, owner, name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRepositoryExists", ctx, repoURL, owner, name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckRepositoryExists indicates an expected call of CheckRepositoryExists.
func (mr *MockGitPushWebhookServiceMockRecorder) CheckRepositoryExists(ctx, repoURL, owner, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRepositoryExists", reflect.TypeOf((*MockGitPushWebhookService)(nil).CheckRepositoryExists), ctx, repoURL, owner, name)
}

// VerifySignature mocks base method.
func (m *MockGitPushWebhookService) VerifySignature(ctx context.Context, repoURL, signature string, body []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySignature", ctx, repoURL, signature, body)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifySignature indicates an expected call of VerifySignature.
func (mr *MockGitPushWebhookServiceMockRecorder) VerifySignature(ctx, repoURL, signature, body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySignature", reflect.TypeOf((*MockGitPushWebhookService)(nil).VerifySignature), ctx, repoURL, signature, body)
}
