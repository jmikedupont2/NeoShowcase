// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// SitesClient is the client API for Sites service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SitesClient interface {
	GetAllStaticSites(ctx context.Context, in *GetAllStaticSitesRequest, opts ...grpc.CallOption) (*GetAllStaticSitesResponse, error)
}

type sitesClient struct {
	cc grpc.ClientConnInterface
}

func NewSitesClient(cc grpc.ClientConnInterface) SitesClient {
	return &sitesClient{cc}
}

func (c *sitesClient) GetAllStaticSites(ctx context.Context, in *GetAllStaticSitesRequest, opts ...grpc.CallOption) (*GetAllStaticSitesResponse, error) {
	out := new(GetAllStaticSitesResponse)
	err := c.cc.Invoke(ctx, "/neoshowcase.proto.services.apiserver.Sites/GetAllStaticSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SitesServer is the server API for Sites service.
// All implementations must embed UnimplementedSitesServer
// for forward compatibility
type SitesServer interface {
	GetAllStaticSites(context.Context, *GetAllStaticSitesRequest) (*GetAllStaticSitesResponse, error)
	mustEmbedUnimplementedSitesServer()
}

// UnimplementedSitesServer must be embedded to have forward compatible implementations.
type UnimplementedSitesServer struct {
}

func (UnimplementedSitesServer) GetAllStaticSites(context.Context, *GetAllStaticSitesRequest) (*GetAllStaticSitesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStaticSites not implemented")
}
func (UnimplementedSitesServer) mustEmbedUnimplementedSitesServer() {}

// UnsafeSitesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SitesServer will
// result in compilation errors.
type UnsafeSitesServer interface {
	mustEmbedUnimplementedSitesServer()
}

func RegisterSitesServer(s *grpc.Server, srv SitesServer) {
	s.RegisterService(&_Sites_serviceDesc, srv)
}

func _Sites_GetAllStaticSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStaticSitesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SitesServer).GetAllStaticSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/neoshowcase.proto.services.apiserver.Sites/GetAllStaticSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SitesServer).GetAllStaticSites(ctx, req.(*GetAllStaticSitesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Sites_serviceDesc = grpc.ServiceDesc{
	ServiceName: "neoshowcase.proto.services.apiserver.Sites",
	HandlerType: (*SitesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllStaticSites",
			Handler:    _Sites_GetAllStaticSites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "neoshowcase/services/apiserver/sites.proto",
}
