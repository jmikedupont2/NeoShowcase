// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neoshowcase/protobuf/gateway.proto (package neoshowcase.protobuf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { NullTimestamp } from "./null_pb.js";

/**
 * @generated from enum neoshowcase.protobuf.DeployType
 */
export enum DeployType {
  /**
   * @generated from enum value: RUNTIME = 0;
   */
  RUNTIME = 0,

  /**
   * @generated from enum value: STATIC = 1;
   */
  STATIC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(DeployType)
proto3.util.setEnumType(DeployType, "neoshowcase.protobuf.DeployType", [
  { no: 0, name: "RUNTIME" },
  { no: 1, name: "STATIC" },
]);

/**
 * @generated from enum neoshowcase.protobuf.AuthenticationType
 */
export enum AuthenticationType {
  /**
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: SOFT = 1;
   */
  SOFT = 1,

  /**
   * @generated from enum value: HARD = 2;
   */
  HARD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthenticationType)
proto3.util.setEnumType(AuthenticationType, "neoshowcase.protobuf.AuthenticationType", [
  { no: 0, name: "OFF" },
  { no: 1, name: "SOFT" },
  { no: 2, name: "HARD" },
]);

/**
 * @generated from enum neoshowcase.protobuf.PortPublicationProtocol
 */
export enum PortPublicationProtocol {
  /**
   * @generated from enum value: TCP = 0;
   */
  TCP = 0,

  /**
   * @generated from enum value: UDP = 1;
   */
  UDP = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PortPublicationProtocol)
proto3.util.setEnumType(PortPublicationProtocol, "neoshowcase.protobuf.PortPublicationProtocol", [
  { no: 0, name: "TCP" },
  { no: 1, name: "UDP" },
]);

/**
 * @generated from message neoshowcase.protobuf.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool admin = 3;
   */
  admin = false;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UserKey
 */
export class UserKey extends Message<UserKey> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string user_id = 2;
   */
  userId = "";

  /**
   * @generated from field: string public_key = 3;
   */
  publicKey = "";

  constructor(data?: PartialMessage<UserKey>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UserKey";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserKey {
    return new UserKey().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserKey {
    return new UserKey().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserKey {
    return new UserKey().fromJsonString(jsonString, options);
  }

  static equals(a: UserKey | PlainMessage<UserKey> | undefined, b: UserKey | PlainMessage<UserKey> | undefined): boolean {
    return proto3.util.equals(UserKey, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetUserKeysResponse
 */
export class GetUserKeysResponse extends Message<GetUserKeysResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.UserKey keys = 1;
   */
  keys: UserKey[] = [];

  constructor(data?: PartialMessage<GetUserKeysResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetUserKeysResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "keys", kind: "message", T: UserKey, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetUserKeysResponse {
    return new GetUserKeysResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetUserKeysResponse | PlainMessage<GetUserKeysResponse> | undefined, b: GetUserKeysResponse | PlainMessage<GetUserKeysResponse> | undefined): boolean {
    return proto3.util.equals(GetUserKeysResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateUserKeyRequest
 */
export class CreateUserKeyRequest extends Message<CreateUserKeyRequest> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  constructor(data?: PartialMessage<CreateUserKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateUserKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateUserKeyRequest {
    return new CreateUserKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateUserKeyRequest | PlainMessage<CreateUserKeyRequest> | undefined, b: CreateUserKeyRequest | PlainMessage<CreateUserKeyRequest> | undefined): boolean {
    return proto3.util.equals(CreateUserKeyRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteUserKeyRequest
 */
export class DeleteUserKeyRequest extends Message<DeleteUserKeyRequest> {
  /**
   * @generated from field: string key_id = 1;
   */
  keyId = "";

  constructor(data?: PartialMessage<DeleteUserKeyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteUserKeyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteUserKeyRequest {
    return new DeleteUserKeyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteUserKeyRequest | PlainMessage<DeleteUserKeyRequest> | undefined, b: DeleteUserKeyRequest | PlainMessage<DeleteUserKeyRequest> | undefined): boolean {
    return proto3.util.equals(DeleteUserKeyRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Repository
 */
export class Repository extends Message<Repository> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: neoshowcase.protobuf.Repository.AuthMethod auth_method = 4;
   */
  authMethod = Repository_AuthMethod.BASIC;

  constructor(data?: PartialMessage<Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_method", kind: "enum", T: proto3.getEnumType(Repository_AuthMethod) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository {
    return new Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJsonString(jsonString, options);
  }

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean {
    return proto3.util.equals(Repository, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Repository.AuthMethod
 */
export enum Repository_AuthMethod {
  /**
   * @generated from enum value: BASIC = 0;
   */
  BASIC = 0,

  /**
   * @generated from enum value: SSH = 1;
   */
  SSH = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(Repository_AuthMethod)
proto3.util.setEnumType(Repository_AuthMethod, "neoshowcase.protobuf.Repository.AuthMethod", [
  { no: 0, name: "BASIC" },
  { no: 1, name: "SSH" },
]);

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthBasic
 */
export class CreateRepositoryAuthBasic extends Message<CreateRepositoryAuthBasic> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthBasic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthBasic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined, b: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthBasic, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthSSH
 */
export class CreateRepositoryAuthSSH extends Message<CreateRepositoryAuthSSH> {
  /**
   * @generated from field: string ssh_key = 1;
   */
  sshKey = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthSSH>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthSSH";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssh_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined, b: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthSSH, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuth
 */
export class CreateRepositoryAuth extends Message<CreateRepositoryAuth> {
  /**
   * @generated from oneof neoshowcase.protobuf.CreateRepositoryAuth.auth
   */
  auth: {
    /**
     * @generated from field: google.protobuf.Empty none = 1;
     */
    value: Empty;
    case: "none";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthBasic basic = 2;
     */
    value: CreateRepositoryAuthBasic;
    case: "basic";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthSSH ssh = 3;
     */
    value: CreateRepositoryAuthSSH;
    case: "ssh";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateRepositoryAuth>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuth";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "none", kind: "message", T: Empty, oneof: "auth" },
    { no: 2, name: "basic", kind: "message", T: CreateRepositoryAuthBasic, oneof: "auth" },
    { no: 3, name: "ssh", kind: "message", T: CreateRepositoryAuthSSH, oneof: "auth" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuth {
    return new CreateRepositoryAuth().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuth | PlainMessage<CreateRepositoryAuth> | undefined, b: CreateRepositoryAuth | PlainMessage<CreateRepositoryAuth> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuth, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryRequest
 */
export class CreateRepositoryRequest extends Message<CreateRepositoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from field: neoshowcase.protobuf.CreateRepositoryAuth auth = 3;
   */
  auth?: CreateRepositoryAuth;

  constructor(data?: PartialMessage<CreateRepositoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "auth", kind: "message", T: CreateRepositoryAuth },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined, b: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateRepositoryRequest
 */
export class UpdateRepositoryRequest extends Message<UpdateRepositoryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: neoshowcase.protobuf.CreateRepositoryAuth auth = 4;
   */
  auth?: CreateRepositoryAuth;

  /**
   * @generated from field: repeated string owner_ids = 5;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<UpdateRepositoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateRepositoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth", kind: "message", T: CreateRepositoryAuth },
    { no: 5, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateRepositoryRequest {
    return new UpdateRepositoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateRepositoryRequest | PlainMessage<UpdateRepositoryRequest> | undefined, b: UpdateRepositoryRequest | PlainMessage<UpdateRepositoryRequest> | undefined): boolean {
    return proto3.util.equals(UpdateRepositoryRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RepositoryIdRequest
 */
export class RepositoryIdRequest extends Message<RepositoryIdRequest> {
  /**
   * @generated from field: string repository_id = 1;
   */
  repositoryId = "";

  constructor(data?: PartialMessage<RepositoryIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RepositoryIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RepositoryIdRequest {
    return new RepositoryIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RepositoryIdRequest | PlainMessage<RepositoryIdRequest> | undefined, b: RepositoryIdRequest | PlainMessage<RepositoryIdRequest> | undefined): boolean {
    return proto3.util.equals(RepositoryIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RuntimeConfig
 */
export class RuntimeConfig extends Message<RuntimeConfig> {
  /**
   * @generated from field: bool use_mariadb = 1;
   */
  useMariadb = false;

  /**
   * @generated from field: bool use_mongodb = 2;
   */
  useMongodb = false;

  /**
   * @generated from field: string entrypoint = 3;
   */
  entrypoint = "";

  /**
   * @generated from field: string command = 4;
   */
  command = "";

  constructor(data?: PartialMessage<RuntimeConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RuntimeConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "use_mariadb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "use_mongodb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "entrypoint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "command", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RuntimeConfig {
    return new RuntimeConfig().fromJsonString(jsonString, options);
  }

  static equals(a: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined, b: RuntimeConfig | PlainMessage<RuntimeConfig> | undefined): boolean {
    return proto3.util.equals(RuntimeConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeBuildpack
 */
export class BuildConfigRuntimeBuildpack extends Message<BuildConfigRuntimeBuildpack> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string context = 2;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigRuntimeBuildpack>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeBuildpack";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeBuildpack {
    return new BuildConfigRuntimeBuildpack().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeBuildpack | PlainMessage<BuildConfigRuntimeBuildpack> | undefined, b: BuildConfigRuntimeBuildpack | PlainMessage<BuildConfigRuntimeBuildpack> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeBuildpack, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeCmd
 */
export class BuildConfigRuntimeCmd extends Message<BuildConfigRuntimeCmd> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string base_image = 2;
   */
  baseImage = "";

  /**
   * @generated from field: string build_cmd = 3;
   */
  buildCmd = "";

  /**
   * @generated from field: bool build_cmd_shell = 4;
   */
  buildCmdShell = false;

  constructor(data?: PartialMessage<BuildConfigRuntimeCmd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeCmd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "build_cmd_shell", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeCmd {
    return new BuildConfigRuntimeCmd().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeCmd | PlainMessage<BuildConfigRuntimeCmd> | undefined, b: BuildConfigRuntimeCmd | PlainMessage<BuildConfigRuntimeCmd> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeCmd, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigRuntimeDockerfile
 */
export class BuildConfigRuntimeDockerfile extends Message<BuildConfigRuntimeDockerfile> {
  /**
   * @generated from field: neoshowcase.protobuf.RuntimeConfig runtime_config = 1;
   */
  runtimeConfig?: RuntimeConfig;

  /**
   * @generated from field: string dockerfile_name = 2;
   */
  dockerfileName = "";

  /**
   * @generated from field: string context = 3;
   */
  context = "";

  constructor(data?: PartialMessage<BuildConfigRuntimeDockerfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigRuntimeDockerfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_config", kind: "message", T: RuntimeConfig },
    { no: 2, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigRuntimeDockerfile {
    return new BuildConfigRuntimeDockerfile().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigRuntimeDockerfile | PlainMessage<BuildConfigRuntimeDockerfile> | undefined, b: BuildConfigRuntimeDockerfile | PlainMessage<BuildConfigRuntimeDockerfile> | undefined): boolean {
    return proto3.util.equals(BuildConfigRuntimeDockerfile, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigStaticCmd
 */
export class BuildConfigStaticCmd extends Message<BuildConfigStaticCmd> {
  /**
   * @generated from field: string base_image = 1;
   */
  baseImage = "";

  /**
   * @generated from field: string build_cmd = 2;
   */
  buildCmd = "";

  /**
   * @generated from field: bool build_cmd_shell = 3;
   */
  buildCmdShell = false;

  /**
   * @generated from field: string artifact_path = 4;
   */
  artifactPath = "";

  constructor(data?: PartialMessage<BuildConfigStaticCmd>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigStaticCmd";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "build_cmd_shell", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "artifact_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigStaticCmd {
    return new BuildConfigStaticCmd().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigStaticCmd | PlainMessage<BuildConfigStaticCmd> | undefined, b: BuildConfigStaticCmd | PlainMessage<BuildConfigStaticCmd> | undefined): boolean {
    return proto3.util.equals(BuildConfigStaticCmd, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildConfigStaticDockerfile
 */
export class BuildConfigStaticDockerfile extends Message<BuildConfigStaticDockerfile> {
  /**
   * @generated from field: string dockerfile_name = 1;
   */
  dockerfileName = "";

  /**
   * @generated from field: string context = 2;
   */
  context = "";

  /**
   * @generated from field: string artifact_path = 3;
   */
  artifactPath = "";

  constructor(data?: PartialMessage<BuildConfigStaticDockerfile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildConfigStaticDockerfile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "context", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "artifact_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildConfigStaticDockerfile {
    return new BuildConfigStaticDockerfile().fromJsonString(jsonString, options);
  }

  static equals(a: BuildConfigStaticDockerfile | PlainMessage<BuildConfigStaticDockerfile> | undefined, b: BuildConfigStaticDockerfile | PlainMessage<BuildConfigStaticDockerfile> | undefined): boolean {
    return proto3.util.equals(BuildConfigStaticDockerfile, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationConfig
 */
export class ApplicationConfig extends Message<ApplicationConfig> {
  /**
   * @generated from oneof neoshowcase.protobuf.ApplicationConfig.build_config
   */
  buildConfig: {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeBuildpack runtime_buildpack = 1;
     */
    value: BuildConfigRuntimeBuildpack;
    case: "runtimeBuildpack";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeCmd runtime_cmd = 2;
     */
    value: BuildConfigRuntimeCmd;
    case: "runtimeCmd";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigRuntimeDockerfile runtime_dockerfile = 3;
     */
    value: BuildConfigRuntimeDockerfile;
    case: "runtimeDockerfile";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigStaticCmd static_cmd = 4;
     */
    value: BuildConfigStaticCmd;
    case: "staticCmd";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.BuildConfigStaticDockerfile static_dockerfile = 5;
     */
    value: BuildConfigStaticDockerfile;
    case: "staticDockerfile";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ApplicationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "runtime_buildpack", kind: "message", T: BuildConfigRuntimeBuildpack, oneof: "build_config" },
    { no: 2, name: "runtime_cmd", kind: "message", T: BuildConfigRuntimeCmd, oneof: "build_config" },
    { no: 3, name: "runtime_dockerfile", kind: "message", T: BuildConfigRuntimeDockerfile, oneof: "build_config" },
    { no: 4, name: "static_cmd", kind: "message", T: BuildConfigStaticCmd, oneof: "build_config" },
    { no: 5, name: "static_dockerfile", kind: "message", T: BuildConfigStaticDockerfile, oneof: "build_config" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined, b: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined): boolean {
    return proto3.util.equals(ApplicationConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Website
 */
export class Website extends Message<Website> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string fqdn = 2;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 3;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 4;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 5;
   */
  https = false;

  /**
   * @generated from field: bool h2c = 6;
   */
  h2c = false;

  /**
   * @generated from field: int32 http_port = 7;
   */
  httpPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 8;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<Website>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Website";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "h2c", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Website {
    return new Website().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJsonString(jsonString, options);
  }

  static equals(a: Website | PlainMessage<Website> | undefined, b: Website | PlainMessage<Website> | undefined): boolean {
    return proto3.util.equals(Website, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateWebsiteRequest
 */
export class CreateWebsiteRequest extends Message<CreateWebsiteRequest> {
  /**
   * @generated from field: string fqdn = 1;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 2;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 3;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 4;
   */
  https = false;

  /**
   * @generated from field: bool h2c = 5;
   */
  h2c = false;

  /**
   * @generated from field: int32 http_port = 6;
   */
  httpPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 7;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<CreateWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "h2c", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined, b: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(CreateWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteWebsiteRequest
 */
export class DeleteWebsiteRequest extends Message<DeleteWebsiteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined, b: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.PortPublication
 */
export class PortPublication extends Message<PortPublication> {
  /**
   * @generated from field: int32 internet_port = 1;
   */
  internetPort = 0;

  /**
   * @generated from field: int32 application_port = 2;
   */
  applicationPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.PortPublicationProtocol protocol = 3;
   */
  protocol = PortPublicationProtocol.TCP;

  constructor(data?: PartialMessage<PortPublication>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.PortPublication";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "internet_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "application_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "protocol", kind: "enum", T: proto3.getEnumType(PortPublicationProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PortPublication {
    return new PortPublication().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PortPublication {
    return new PortPublication().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PortPublication {
    return new PortPublication().fromJsonString(jsonString, options);
  }

  static equals(a: PortPublication | PlainMessage<PortPublication> | undefined, b: PortPublication | PlainMessage<PortPublication> | undefined): boolean {
    return proto3.util.equals(PortPublication, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Application
 */
export class Application extends Message<Application> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 3;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 4;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.DeployType deploy_type = 5;
   */
  deployType = DeployType.RUNTIME;

  /**
   * @generated from field: bool running = 6;
   */
  running = false;

  /**
   * @generated from field: neoshowcase.protobuf.Application.ContainerState container = 7;
   */
  container = Application_ContainerState.MISSING;

  /**
   * @generated from field: string current_commit = 8;
   */
  currentCommit = "";

  /**
   * @generated from field: string want_commit = 9;
   */
  wantCommit = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 10;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_at = 11;
   */
  updatedAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 12;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.Website websites = 13;
   */
  websites: Website[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 14;
   */
  portPublications: PortPublication[] = [];

  /**
   * @generated from field: repeated string owner_ids = 15;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<Application>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Application";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "deploy_type", kind: "enum", T: proto3.getEnumType(DeployType) },
    { no: 6, name: "running", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "container", kind: "enum", T: proto3.getEnumType(Application_ContainerState) },
    { no: 8, name: "current_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "want_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "created_at", kind: "message", T: Timestamp },
    { no: 11, name: "updated_at", kind: "message", T: Timestamp },
    { no: 12, name: "config", kind: "message", T: ApplicationConfig },
    { no: 13, name: "websites", kind: "message", T: Website, repeated: true },
    { no: 14, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
    { no: 15, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Application {
    return new Application().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJsonString(jsonString, options);
  }

  static equals(a: Application | PlainMessage<Application> | undefined, b: Application | PlainMessage<Application> | undefined): boolean {
    return proto3.util.equals(Application, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Application.ContainerState
 */
export enum Application_ContainerState {
  /**
   * @generated from enum value: MISSING = 0;
   */
  MISSING = 0,

  /**
   * @generated from enum value: STARTING = 1;
   */
  STARTING = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: EXITED = 3;
   */
  EXITED = 3,

  /**
   * @generated from enum value: ERRORED = 4;
   */
  ERRORED = 4,

  /**
   * @generated from enum value: UNKNOWN = 5;
   */
  UNKNOWN = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Application_ContainerState)
proto3.util.setEnumType(Application_ContainerState, "neoshowcase.protobuf.Application.ContainerState", [
  { no: 0, name: "MISSING" },
  { no: 1, name: "STARTING" },
  { no: 2, name: "RUNNING" },
  { no: 3, name: "EXITED" },
  { no: 4, name: "ERRORED" },
  { no: 5, name: "UNKNOWN" },
]);

/**
 * @generated from message neoshowcase.protobuf.CreateApplicationRequest
 */
export class CreateApplicationRequest extends Message<CreateApplicationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 2;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 3;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 4;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest websites = 5;
   */
  websites: CreateWebsiteRequest[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 6;
   */
  portPublications: PortPublication[] = [];

  /**
   * @generated from field: bool start_on_create = 7;
   */
  startOnCreate = false;

  constructor(data?: PartialMessage<CreateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config", kind: "message", T: ApplicationConfig },
    { no: 5, name: "websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
    { no: 6, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
    { no: 7, name: "start_on_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined, b: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(CreateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest
 */
export class UpdateApplicationRequest extends Message<UpdateApplicationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string ref_name = 3;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 4;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest new_websites = 5;
   */
  newWebsites: CreateWebsiteRequest[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.DeleteWebsiteRequest delete_websites = 6;
   */
  deleteWebsites: DeleteWebsiteRequest[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.PortPublication port_publications = 7;
   */
  portPublications: PortPublication[] = [];

  /**
   * @generated from field: repeated string owner_ids = 8;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<UpdateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config", kind: "message", T: ApplicationConfig },
    { no: 5, name: "new_websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
    { no: 6, name: "delete_websites", kind: "message", T: DeleteWebsiteRequest, repeated: true },
    { no: 7, name: "port_publications", kind: "message", T: PortPublication, repeated: true },
    { no: 8, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined, b: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableDomain
 */
export class AvailableDomain extends Message<AvailableDomain> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: repeated string exclude_domains = 2;
   */
  excludeDomains: string[] = [];

  /**
   * @generated from field: bool auth_available = 3;
   */
  authAvailable = false;

  constructor(data?: PartialMessage<AvailableDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exclude_domains", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "auth_available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDomain {
    return new AvailableDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDomain | PlainMessage<AvailableDomain> | undefined, b: AvailableDomain | PlainMessage<AvailableDomain> | undefined): boolean {
    return proto3.util.equals(AvailableDomain, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableDomains
 */
export class AvailableDomains extends Message<AvailableDomains> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.AvailableDomain domains = 1;
   */
  domains: AvailableDomain[] = [];

  constructor(data?: PartialMessage<AvailableDomains>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableDomains";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "message", T: AvailableDomain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDomains {
    return new AvailableDomains().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDomains {
    return new AvailableDomains().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDomains {
    return new AvailableDomains().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDomains | PlainMessage<AvailableDomains> | undefined, b: AvailableDomains | PlainMessage<AvailableDomains> | undefined): boolean {
    return proto3.util.equals(AvailableDomains, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailablePort
 */
export class AvailablePort extends Message<AvailablePort> {
  /**
   * @generated from field: int32 start_port = 1;
   */
  startPort = 0;

  /**
   * @generated from field: int32 end_port = 2;
   */
  endPort = 0;

  /**
   * @generated from field: neoshowcase.protobuf.PortPublicationProtocol protocol = 3;
   */
  protocol = PortPublicationProtocol.TCP;

  constructor(data?: PartialMessage<AvailablePort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailablePort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "end_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "protocol", kind: "enum", T: proto3.getEnumType(PortPublicationProtocol) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailablePort {
    return new AvailablePort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailablePort {
    return new AvailablePort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailablePort {
    return new AvailablePort().fromJsonString(jsonString, options);
  }

  static equals(a: AvailablePort | PlainMessage<AvailablePort> | undefined, b: AvailablePort | PlainMessage<AvailablePort> | undefined): boolean {
    return proto3.util.equals(AvailablePort, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailablePorts
 */
export class AvailablePorts extends Message<AvailablePorts> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.AvailablePort available_ports = 1;
   */
  availablePorts: AvailablePort[] = [];

  constructor(data?: PartialMessage<AvailablePorts>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailablePorts";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "available_ports", kind: "message", T: AvailablePort, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailablePorts {
    return new AvailablePorts().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailablePorts {
    return new AvailablePorts().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailablePorts {
    return new AvailablePorts().fromJsonString(jsonString, options);
  }

  static equals(a: AvailablePorts | PlainMessage<AvailablePorts> | undefined, b: AvailablePorts | PlainMessage<AvailablePorts> | undefined): boolean {
    return proto3.util.equals(AvailablePorts, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVar
 */
export class ApplicationEnvVar extends Message<ApplicationEnvVar> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: bool system = 3;
   */
  system = false;

  constructor(data?: PartialMessage<ApplicationEnvVar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "system", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined, b: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVar, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVars
 */
export class ApplicationEnvVars extends Message<ApplicationEnvVars> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationEnvVar variables = 1;
   */
  variables: ApplicationEnvVar[] = [];

  constructor(data?: PartialMessage<ApplicationEnvVars>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVars";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "message", T: ApplicationEnvVar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined, b: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVars, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Artifact
 */
export class Artifact extends Message<Artifact> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: int64 size = 2;
   */
  size = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 3;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp deleted_at = 4;
   */
  deletedAt?: NullTimestamp;

  constructor(data?: PartialMessage<Artifact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Artifact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "size", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "created_at", kind: "message", T: Timestamp },
    { no: 4, name: "deleted_at", kind: "message", T: NullTimestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Artifact {
    return new Artifact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Artifact {
    return new Artifact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Artifact {
    return new Artifact().fromJsonString(jsonString, options);
  }

  static equals(a: Artifact | PlainMessage<Artifact> | undefined, b: Artifact | PlainMessage<Artifact> | undefined): boolean {
    return proto3.util.equals(Artifact, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ArtifactContent
 */
export class ArtifactContent extends Message<ArtifactContent> {
  /**
   * @generated from field: string filename = 1;
   */
  filename = "";

  /**
   * @generated from field: bytes content = 2;
   */
  content = new Uint8Array(0);

  constructor(data?: PartialMessage<ArtifactContent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ArtifactContent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "filename", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "content", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactContent {
    return new ArtifactContent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactContent {
    return new ArtifactContent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactContent {
    return new ArtifactContent().fromJsonString(jsonString, options);
  }

  static equals(a: ArtifactContent | PlainMessage<ArtifactContent> | undefined, b: ArtifactContent | PlainMessage<ArtifactContent> | undefined): boolean {
    return proto3.util.equals(ArtifactContent, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetOutputRequest
 */
export class GetOutputRequest extends Message<GetOutputRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * Leave empty to default to now
   *
   * @generated from field: google.protobuf.Timestamp before = 2;
   */
  before?: Timestamp;

  constructor(data?: PartialMessage<GetOutputRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetOutputRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "before", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOutputRequest {
    return new GetOutputRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOutputRequest | PlainMessage<GetOutputRequest> | undefined, b: GetOutputRequest | PlainMessage<GetOutputRequest> | undefined): boolean {
    return proto3.util.equals(GetOutputRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationOutput
 */
export class ApplicationOutput extends Message<ApplicationOutput> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  /**
   * @generated from field: string log = 2;
   */
  log = "";

  constructor(data?: PartialMessage<ApplicationOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
    { no: 2, name: "log", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined, b: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined): boolean {
    return proto3.util.equals(ApplicationOutput, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetOutputResponse
 */
export class GetOutputResponse extends Message<GetOutputResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationOutput outputs = 1;
   */
  outputs: ApplicationOutput[] = [];

  constructor(data?: PartialMessage<GetOutputResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetOutputResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outputs", kind: "message", T: ApplicationOutput, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOutputResponse {
    return new GetOutputResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOutputResponse {
    return new GetOutputResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOutputResponse {
    return new GetOutputResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOutputResponse | PlainMessage<GetOutputResponse> | undefined, b: GetOutputResponse | PlainMessage<GetOutputResponse> | undefined): boolean {
    return proto3.util.equals(GetOutputResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetOutputStreamRequest
 */
export class GetOutputStreamRequest extends Message<GetOutputStreamRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: google.protobuf.Timestamp after = 2;
   */
  after?: Timestamp;

  constructor(data?: PartialMessage<GetOutputStreamRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetOutputStreamRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "after", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOutputStreamRequest {
    return new GetOutputStreamRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOutputStreamRequest | PlainMessage<GetOutputStreamRequest> | undefined, b: GetOutputStreamRequest | PlainMessage<GetOutputStreamRequest> | undefined): boolean {
    return proto3.util.equals(GetOutputStreamRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Build
 */
export class Build extends Message<Build> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  /**
   * @generated from field: neoshowcase.protobuf.Build.BuildStatus status = 3;
   */
  status = Build_BuildStatus.QUEUED;

  /**
   * @generated from field: google.protobuf.Timestamp queued_at = 4;
   */
  queuedAt?: Timestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp started_at = 5;
   */
  startedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp updated_at = 6;
   */
  updatedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp finished_at = 7;
   */
  finishedAt?: NullTimestamp;

  /**
   * @generated from field: bool retriable = 8;
   */
  retriable = false;

  /**
   * @generated from field: neoshowcase.protobuf.Artifact artifact = 9;
   */
  artifact?: Artifact;

  constructor(data?: PartialMessage<Build>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Build";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(Build_BuildStatus) },
    { no: 4, name: "queued_at", kind: "message", T: Timestamp },
    { no: 5, name: "started_at", kind: "message", T: NullTimestamp },
    { no: 6, name: "updated_at", kind: "message", T: NullTimestamp },
    { no: 7, name: "finished_at", kind: "message", T: NullTimestamp },
    { no: 8, name: "retriable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "artifact", kind: "message", T: Artifact },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Build {
    return new Build().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJsonString(jsonString, options);
  }

  static equals(a: Build | PlainMessage<Build> | undefined, b: Build | PlainMessage<Build> | undefined): boolean {
    return proto3.util.equals(Build, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Build.BuildStatus
 */
export enum Build_BuildStatus {
  /**
   * @generated from enum value: QUEUED = 0;
   */
  QUEUED = 0,

  /**
   * @generated from enum value: BUILDING = 1;
   */
  BUILDING = 1,

  /**
   * @generated from enum value: SUCCEEDED = 2;
   */
  SUCCEEDED = 2,

  /**
   * @generated from enum value: FAILED = 3;
   */
  FAILED = 3,

  /**
   * @generated from enum value: CANCELLED = 4;
   */
  CANCELLED = 4,

  /**
   * @generated from enum value: SKIPPED = 5;
   */
  SKIPPED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Build_BuildStatus)
proto3.util.setEnumType(Build_BuildStatus, "neoshowcase.protobuf.Build.BuildStatus", [
  { no: 0, name: "QUEUED" },
  { no: 1, name: "BUILDING" },
  { no: 2, name: "SUCCEEDED" },
  { no: 3, name: "FAILED" },
  { no: 4, name: "CANCELLED" },
  { no: 5, name: "SKIPPED" },
]);

/**
 * @generated from message neoshowcase.protobuf.BuildLog
 */
export class BuildLog extends Message<BuildLog> {
  /**
   * @generated from field: bytes log = 1;
   */
  log = new Uint8Array(0);

  constructor(data?: PartialMessage<BuildLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildLog {
    return new BuildLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJsonString(jsonString, options);
  }

  static equals(a: BuildLog | PlainMessage<BuildLog> | undefined, b: BuildLog | PlainMessage<BuildLog> | undefined): boolean {
    return proto3.util.equals(BuildLog, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoriesResponse
 */
export class GetRepositoriesResponse extends Message<GetRepositoriesResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Repository repositories = 1;
   */
  repositories: Repository[] = [];

  constructor(data?: PartialMessage<GetRepositoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositories", kind: "message", T: Repository, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined, b: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationsResponse
 */
export class GetApplicationsResponse extends Message<GetApplicationsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Application applications = 1;
   */
  applications: Application[] = [];

  constructor(data?: PartialMessage<GetApplicationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "applications", kind: "message", T: Application, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined, b: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined): boolean {
    return proto3.util.equals(GetApplicationsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetSystemPublicKeyResponse
 */
export class GetSystemPublicKeyResponse extends Message<GetSystemPublicKeyResponse> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  constructor(data?: PartialMessage<GetSystemPublicKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetSystemPublicKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemPublicKeyResponse | PlainMessage<GetSystemPublicKeyResponse> | undefined, b: GetSystemPublicKeyResponse | PlainMessage<GetSystemPublicKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemPublicKeyResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationIdRequest
 */
export class ApplicationIdRequest extends Message<ApplicationIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApplicationIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined, b: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined): boolean {
    return proto3.util.equals(ApplicationIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.BuildIdRequest
 */
export class BuildIdRequest extends Message<BuildIdRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<BuildIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildIdRequest {
    return new BuildIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BuildIdRequest | PlainMessage<BuildIdRequest> | undefined, b: BuildIdRequest | PlainMessage<BuildIdRequest> | undefined): boolean {
    return proto3.util.equals(BuildIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ArtifactIdRequest
 */
export class ArtifactIdRequest extends Message<ArtifactIdRequest> {
  /**
   * @generated from field: string artifact_id = 1;
   */
  artifactId = "";

  constructor(data?: PartialMessage<ArtifactIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ArtifactIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "artifact_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ArtifactIdRequest {
    return new ArtifactIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ArtifactIdRequest | PlainMessage<ArtifactIdRequest> | undefined, b: ArtifactIdRequest | PlainMessage<ArtifactIdRequest> | undefined): boolean {
    return proto3.util.equals(ArtifactIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetBuildsResponse
 */
export class GetBuildsResponse extends Message<GetBuildsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Build builds = 1;
   */
  builds: Build[] = [];

  constructor(data?: PartialMessage<GetBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: Build, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetBuildsResponse {
    return new GetBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetBuildsResponse | PlainMessage<GetBuildsResponse> | undefined, b: GetBuildsResponse | PlainMessage<GetBuildsResponse> | undefined): boolean {
    return proto3.util.equals(GetBuildsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.SetApplicationEnvVarRequest
 */
export class SetApplicationEnvVarRequest extends Message<SetApplicationEnvVarRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<SetApplicationEnvVarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SetApplicationEnvVarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined, b: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined): boolean {
    return proto3.util.equals(SetApplicationEnvVarRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RetryCommitBuildRequest
 */
export class RetryCommitBuildRequest extends Message<RetryCommitBuildRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  constructor(data?: PartialMessage<RetryCommitBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RetryCommitBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined, b: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined): boolean {
    return proto3.util.equals(RetryCommitBuildRequest, a, b);
  }
}

