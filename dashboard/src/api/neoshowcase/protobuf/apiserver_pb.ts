// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file neoshowcase/protobuf/apiserver.proto (package neoshowcase.protobuf, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Empty, Message, proto3 } from "@bufbuild/protobuf";
import { NullTimestamp } from "./null_pb.js";

/**
 * @generated from enum neoshowcase.protobuf.BuildType
 */
export enum BuildType {
  /**
   * @generated from enum value: RUNTIME = 0;
   */
  RUNTIME = 0,

  /**
   * @generated from enum value: STATIC = 1;
   */
  STATIC = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(BuildType)
proto3.util.setEnumType(BuildType, "neoshowcase.protobuf.BuildType", [
  { no: 0, name: "RUNTIME" },
  { no: 1, name: "STATIC" },
]);

/**
 * @generated from enum neoshowcase.protobuf.ApplicationState
 */
export enum ApplicationState {
  /**
   * @generated from enum value: IDLE = 0;
   */
  IDLE = 0,

  /**
   * @generated from enum value: DEPLOYING = 1;
   */
  DEPLOYING = 1,

  /**
   * @generated from enum value: RUNNING = 2;
   */
  RUNNING = 2,

  /**
   * @generated from enum value: ERRORED = 3;
   */
  ERRORED = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ApplicationState)
proto3.util.setEnumType(ApplicationState, "neoshowcase.protobuf.ApplicationState", [
  { no: 0, name: "IDLE" },
  { no: 1, name: "DEPLOYING" },
  { no: 2, name: "RUNNING" },
  { no: 3, name: "ERRORED" },
]);

/**
 * @generated from enum neoshowcase.protobuf.AuthenticationType
 */
export enum AuthenticationType {
  /**
   * @generated from enum value: OFF = 0;
   */
  OFF = 0,

  /**
   * @generated from enum value: SOFT = 1;
   */
  SOFT = 1,

  /**
   * @generated from enum value: HARD = 2;
   */
  HARD = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(AuthenticationType)
proto3.util.setEnumType(AuthenticationType, "neoshowcase.protobuf.AuthenticationType", [
  { no: 0, name: "OFF" },
  { no: 1, name: "SOFT" },
  { no: 2, name: "HARD" },
]);

/**
 * @generated from message neoshowcase.protobuf.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool admin = 3;
   */
  admin = false;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Repository
 */
export class Repository extends Message<Repository> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string url = 3;
   */
  url = "";

  /**
   * @generated from field: string auth_method = 4;
   */
  authMethod = "";

  constructor(data?: PartialMessage<Repository>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Repository";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "auth_method", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Repository {
    return new Repository().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Repository {
    return new Repository().fromJsonString(jsonString, options);
  }

  static equals(a: Repository | PlainMessage<Repository> | undefined, b: Repository | PlainMessage<Repository> | undefined): boolean {
    return proto3.util.equals(Repository, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthBasic
 */
export class CreateRepositoryAuthBasic extends Message<CreateRepositoryAuthBasic> {
  /**
   * @generated from field: string username = 1;
   */
  username = "";

  /**
   * @generated from field: string password = 2;
   */
  password = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthBasic>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthBasic";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthBasic {
    return new CreateRepositoryAuthBasic().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined, b: CreateRepositoryAuthBasic | PlainMessage<CreateRepositoryAuthBasic> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthBasic, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryAuthSSH
 */
export class CreateRepositoryAuthSSH extends Message<CreateRepositoryAuthSSH> {
  /**
   * @generated from field: string ssh_key = 1;
   */
  sshKey = "";

  constructor(data?: PartialMessage<CreateRepositoryAuthSSH>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryAuthSSH";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ssh_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryAuthSSH {
    return new CreateRepositoryAuthSSH().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined, b: CreateRepositoryAuthSSH | PlainMessage<CreateRepositoryAuthSSH> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryAuthSSH, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateRepositoryRequest
 */
export class CreateRepositoryRequest extends Message<CreateRepositoryRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string url = 2;
   */
  url = "";

  /**
   * @generated from oneof neoshowcase.protobuf.CreateRepositoryRequest.auth
   */
  auth: {
    /**
     * @generated from field: google.protobuf.Empty none = 3;
     */
    value: Empty;
    case: "none";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthBasic basic = 4;
     */
    value: CreateRepositoryAuthBasic;
    case: "basic";
  } | {
    /**
     * @generated from field: neoshowcase.protobuf.CreateRepositoryAuthSSH ssh = 5;
     */
    value: CreateRepositoryAuthSSH;
    case: "ssh";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateRepositoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateRepositoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "none", kind: "message", T: Empty, oneof: "auth" },
    { no: 4, name: "basic", kind: "message", T: CreateRepositoryAuthBasic, oneof: "auth" },
    { no: 5, name: "ssh", kind: "message", T: CreateRepositoryAuthSSH, oneof: "auth" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateRepositoryRequest {
    return new CreateRepositoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined, b: CreateRepositoryRequest | PlainMessage<CreateRepositoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateRepositoryRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationConfig
 */
export class ApplicationConfig extends Message<ApplicationConfig> {
  /**
   * @generated from field: bool use_mariadb = 1;
   */
  useMariadb = false;

  /**
   * @generated from field: bool use_mongodb = 2;
   */
  useMongodb = false;

  /**
   * @generated from field: string base_image = 3;
   */
  baseImage = "";

  /**
   * @generated from field: string dockerfile_name = 4;
   */
  dockerfileName = "";

  /**
   * @generated from field: string artifact_path = 5;
   */
  artifactPath = "";

  /**
   * @generated from field: string build_cmd = 6;
   */
  buildCmd = "";

  /**
   * @generated from field: string entrypoint_cmd = 7;
   */
  entrypointCmd = "";

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 8;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<ApplicationConfig>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationConfig";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "use_mariadb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "use_mongodb", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "artifact_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "entrypoint_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationConfig {
    return new ApplicationConfig().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined, b: ApplicationConfig | PlainMessage<ApplicationConfig> | undefined): boolean {
    return proto3.util.equals(ApplicationConfig, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationConfigRequest
 */
export class UpdateApplicationConfigRequest extends Message<UpdateApplicationConfigRequest> {
  /**
   * @generated from field: string base_image = 1;
   */
  baseImage = "";

  /**
   * @generated from field: string dockerfile_name = 2;
   */
  dockerfileName = "";

  /**
   * @generated from field: string artifact_path = 3;
   */
  artifactPath = "";

  /**
   * @generated from field: string build_cmd = 4;
   */
  buildCmd = "";

  /**
   * @generated from field: string entrypoint_cmd = 5;
   */
  entrypointCmd = "";

  /**
   * @generated from field: neoshowcase.protobuf.AuthenticationType authentication = 6;
   */
  authentication = AuthenticationType.OFF;

  constructor(data?: PartialMessage<UpdateApplicationConfigRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationConfigRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "base_image", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dockerfile_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "artifact_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "build_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "entrypoint_cmd", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "authentication", kind: "enum", T: proto3.getEnumType(AuthenticationType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationConfigRequest {
    return new UpdateApplicationConfigRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationConfigRequest {
    return new UpdateApplicationConfigRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationConfigRequest {
    return new UpdateApplicationConfigRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationConfigRequest | PlainMessage<UpdateApplicationConfigRequest> | undefined, b: UpdateApplicationConfigRequest | PlainMessage<UpdateApplicationConfigRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationConfigRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Website
 */
export class Website extends Message<Website> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string fqdn = 2;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 3;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 4;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 5;
   */
  https = false;

  /**
   * @generated from field: int32 http_port = 6;
   */
  httpPort = 0;

  constructor(data?: PartialMessage<Website>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Website";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Website {
    return new Website().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Website {
    return new Website().fromJsonString(jsonString, options);
  }

  static equals(a: Website | PlainMessage<Website> | undefined, b: Website | PlainMessage<Website> | undefined): boolean {
    return proto3.util.equals(Website, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateWebsiteRequest
 */
export class CreateWebsiteRequest extends Message<CreateWebsiteRequest> {
  /**
   * @generated from field: string fqdn = 1;
   */
  fqdn = "";

  /**
   * @generated from field: string path_prefix = 2;
   */
  pathPrefix = "";

  /**
   * @generated from field: bool strip_prefix = 3;
   */
  stripPrefix = false;

  /**
   * @generated from field: bool https = 4;
   */
  https = false;

  /**
   * @generated from field: int32 http_port = 5;
   */
  httpPort = 0;

  constructor(data?: PartialMessage<CreateWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fqdn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path_prefix", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "strip_prefix", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "https", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "http_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWebsiteRequest {
    return new CreateWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined, b: CreateWebsiteRequest | PlainMessage<CreateWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(CreateWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.DeleteWebsiteRequest
 */
export class DeleteWebsiteRequest extends Message<DeleteWebsiteRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteWebsiteRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.DeleteWebsiteRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteWebsiteRequest {
    return new DeleteWebsiteRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined, b: DeleteWebsiteRequest | PlainMessage<DeleteWebsiteRequest> | undefined): boolean {
    return proto3.util.equals(DeleteWebsiteRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Application
 */
export class Application extends Message<Application> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 3;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 4;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.BuildType build_type = 5;
   */
  buildType = BuildType.RUNTIME;

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationState state = 6;
   */
  state = ApplicationState.IDLE;

  /**
   * @generated from field: string current_commit = 7;
   */
  currentCommit = "";

  /**
   * @generated from field: string want_commit = 8;
   */
  wantCommit = "";

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 9;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.Website websites = 10;
   */
  websites: Website[] = [];

  /**
   * @generated from field: repeated string owner_ids = 11;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<Application>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Application";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "build_type", kind: "enum", T: proto3.getEnumType(BuildType) },
    { no: 6, name: "state", kind: "enum", T: proto3.getEnumType(ApplicationState) },
    { no: 7, name: "current_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "want_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "config", kind: "message", T: ApplicationConfig },
    { no: 10, name: "websites", kind: "message", T: Website, repeated: true },
    { no: 11, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Application {
    return new Application().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Application {
    return new Application().fromJsonString(jsonString, options);
  }

  static equals(a: Application | PlainMessage<Application> | undefined, b: Application | PlainMessage<Application> | undefined): boolean {
    return proto3.util.equals(Application, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableDomain
 */
export class AvailableDomain extends Message<AvailableDomain> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: bool available = 2;
   */
  available = false;

  constructor(data?: PartialMessage<AvailableDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "available", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDomain {
    return new AvailableDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDomain {
    return new AvailableDomain().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDomain | PlainMessage<AvailableDomain> | undefined, b: AvailableDomain | PlainMessage<AvailableDomain> | undefined): boolean {
    return proto3.util.equals(AvailableDomain, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.AvailableDomains
 */
export class AvailableDomains extends Message<AvailableDomains> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.AvailableDomain domains = 1;
   */
  domains: AvailableDomain[] = [];

  constructor(data?: PartialMessage<AvailableDomains>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.AvailableDomains";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "message", T: AvailableDomain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AvailableDomains {
    return new AvailableDomains().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AvailableDomains {
    return new AvailableDomains().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AvailableDomains {
    return new AvailableDomains().fromJsonString(jsonString, options);
  }

  static equals(a: AvailableDomains | PlainMessage<AvailableDomains> | undefined, b: AvailableDomains | PlainMessage<AvailableDomains> | undefined): boolean {
    return proto3.util.equals(AvailableDomains, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVar
 */
export class ApplicationEnvVar extends Message<ApplicationEnvVar> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: bool system = 3;
   */
  system = false;

  constructor(data?: PartialMessage<ApplicationEnvVar>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVar";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "system", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVar {
    return new ApplicationEnvVar().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined, b: ApplicationEnvVar | PlainMessage<ApplicationEnvVar> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVar, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationEnvVars
 */
export class ApplicationEnvVars extends Message<ApplicationEnvVars> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.ApplicationEnvVar variables = 1;
   */
  variables: ApplicationEnvVar[] = [];

  constructor(data?: PartialMessage<ApplicationEnvVars>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationEnvVars";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "message", T: ApplicationEnvVar, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationEnvVars {
    return new ApplicationEnvVars().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined, b: ApplicationEnvVars | PlainMessage<ApplicationEnvVars> | undefined): boolean {
    return proto3.util.equals(ApplicationEnvVars, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationBuildArtifact
 */
export class ApplicationBuildArtifact extends Message<ApplicationBuildArtifact> {
  /**
   * @generated from field: string url = 1;
   */
  url = "";

  constructor(data?: PartialMessage<ApplicationBuildArtifact>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationBuildArtifact";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationBuildArtifact {
    return new ApplicationBuildArtifact().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationBuildArtifact {
    return new ApplicationBuildArtifact().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationBuildArtifact {
    return new ApplicationBuildArtifact().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationBuildArtifact | PlainMessage<ApplicationBuildArtifact> | undefined, b: ApplicationBuildArtifact | PlainMessage<ApplicationBuildArtifact> | undefined): boolean {
    return proto3.util.equals(ApplicationBuildArtifact, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationOutput
 */
export class ApplicationOutput extends Message<ApplicationOutput> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  constructor(data?: PartialMessage<ApplicationOutput>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationOutput";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationOutput {
    return new ApplicationOutput().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined, b: ApplicationOutput | PlainMessage<ApplicationOutput> | undefined): boolean {
    return proto3.util.equals(ApplicationOutput, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.Build
 */
export class Build extends Message<Build> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  /**
   * @generated from field: neoshowcase.protobuf.Build.BuildStatus status = 3;
   */
  status = Build_BuildStatus.BUILDING;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp started_at = 4;
   */
  startedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp updated_at = 5;
   */
  updatedAt?: NullTimestamp;

  /**
   * @generated from field: neoshowcase.protobuf.NullTimestamp finished_at = 6;
   */
  finishedAt?: NullTimestamp;

  /**
   * @generated from field: bool retriable = 7;
   */
  retriable = false;

  constructor(data?: PartialMessage<Build>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.Build";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "status", kind: "enum", T: proto3.getEnumType(Build_BuildStatus) },
    { no: 4, name: "started_at", kind: "message", T: NullTimestamp },
    { no: 5, name: "updated_at", kind: "message", T: NullTimestamp },
    { no: 6, name: "finished_at", kind: "message", T: NullTimestamp },
    { no: 7, name: "retriable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Build {
    return new Build().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Build {
    return new Build().fromJsonString(jsonString, options);
  }

  static equals(a: Build | PlainMessage<Build> | undefined, b: Build | PlainMessage<Build> | undefined): boolean {
    return proto3.util.equals(Build, a, b);
  }
}

/**
 * @generated from enum neoshowcase.protobuf.Build.BuildStatus
 */
export enum Build_BuildStatus {
  /**
   * @generated from enum value: BUILDING = 0;
   */
  BUILDING = 0,

  /**
   * @generated from enum value: SUCCEEDED = 1;
   */
  SUCCEEDED = 1,

  /**
   * @generated from enum value: FAILED = 2;
   */
  FAILED = 2,

  /**
   * @generated from enum value: CANCELLED = 3;
   */
  CANCELLED = 3,

  /**
   * @generated from enum value: QUEUED = 4;
   */
  QUEUED = 4,

  /**
   * @generated from enum value: SKIPPED = 5;
   */
  SKIPPED = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(Build_BuildStatus)
proto3.util.setEnumType(Build_BuildStatus, "neoshowcase.protobuf.Build.BuildStatus", [
  { no: 0, name: "BUILDING" },
  { no: 1, name: "SUCCEEDED" },
  { no: 2, name: "FAILED" },
  { no: 3, name: "CANCELLED" },
  { no: 4, name: "QUEUED" },
  { no: 5, name: "SKIPPED" },
]);

/**
 * @generated from message neoshowcase.protobuf.BuildLog
 */
export class BuildLog extends Message<BuildLog> {
  /**
   * @generated from field: string output = 1;
   */
  output = "";

  constructor(data?: PartialMessage<BuildLog>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.BuildLog";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "output", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BuildLog {
    return new BuildLog().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BuildLog {
    return new BuildLog().fromJsonString(jsonString, options);
  }

  static equals(a: BuildLog | PlainMessage<BuildLog> | undefined, b: BuildLog | PlainMessage<BuildLog> | undefined): boolean {
    return proto3.util.equals(BuildLog, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetRepositoriesResponse
 */
export class GetRepositoriesResponse extends Message<GetRepositoriesResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Repository repositories = 1;
   */
  repositories: Repository[] = [];

  constructor(data?: PartialMessage<GetRepositoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetRepositoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repositories", kind: "message", T: Repository, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRepositoriesResponse {
    return new GetRepositoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined, b: GetRepositoriesResponse | PlainMessage<GetRepositoriesResponse> | undefined): boolean {
    return proto3.util.equals(GetRepositoriesResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationsResponse
 */
export class GetApplicationsResponse extends Message<GetApplicationsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Application applications = 1;
   */
  applications: Application[] = [];

  constructor(data?: PartialMessage<GetApplicationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "applications", kind: "message", T: Application, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationsResponse {
    return new GetApplicationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined, b: GetApplicationsResponse | PlainMessage<GetApplicationsResponse> | undefined): boolean {
    return proto3.util.equals(GetApplicationsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetSystemPublicKeyResponse
 */
export class GetSystemPublicKeyResponse extends Message<GetSystemPublicKeyResponse> {
  /**
   * @generated from field: string public_key = 1;
   */
  publicKey = "";

  constructor(data?: PartialMessage<GetSystemPublicKeyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetSystemPublicKeyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "public_key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetSystemPublicKeyResponse {
    return new GetSystemPublicKeyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetSystemPublicKeyResponse | PlainMessage<GetSystemPublicKeyResponse> | undefined, b: GetSystemPublicKeyResponse | PlainMessage<GetSystemPublicKeyResponse> | undefined): boolean {
    return proto3.util.equals(GetSystemPublicKeyResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CreateApplicationRequest
 */
export class CreateApplicationRequest extends Message<CreateApplicationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string repository_id = 2;
   */
  repositoryId = "";

  /**
   * @generated from field: string ref_name = 3;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.BuildType build_type = 4;
   */
  buildType = BuildType.RUNTIME;

  /**
   * @generated from field: neoshowcase.protobuf.ApplicationConfig config = 5;
   */
  config?: ApplicationConfig;

  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest websites = 6;
   */
  websites: CreateWebsiteRequest[] = [];

  /**
   * @generated from field: bool start_on_create = 7;
   */
  startOnCreate = false;

  constructor(data?: PartialMessage<CreateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CreateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repository_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "build_type", kind: "enum", T: proto3.getEnumType(BuildType) },
    { no: 5, name: "config", kind: "message", T: ApplicationConfig },
    { no: 6, name: "websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
    { no: 7, name: "start_on_create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateApplicationRequest {
    return new CreateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined, b: CreateApplicationRequest | PlainMessage<CreateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(CreateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.UpdateApplicationRequest
 */
export class UpdateApplicationRequest extends Message<UpdateApplicationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string ref_name = 3;
   */
  refName = "";

  /**
   * @generated from field: neoshowcase.protobuf.UpdateApplicationConfigRequest config = 4;
   */
  config?: UpdateApplicationConfigRequest;

  /**
   * @generated from field: repeated neoshowcase.protobuf.CreateWebsiteRequest new_websites = 5;
   */
  newWebsites: CreateWebsiteRequest[] = [];

  /**
   * @generated from field: repeated neoshowcase.protobuf.DeleteWebsiteRequest delete_websites = 6;
   */
  deleteWebsites: DeleteWebsiteRequest[] = [];

  /**
   * @generated from field: repeated string owner_ids = 7;
   */
  ownerIds: string[] = [];

  constructor(data?: PartialMessage<UpdateApplicationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.UpdateApplicationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "ref_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "config", kind: "message", T: UpdateApplicationConfigRequest },
    { no: 5, name: "new_websites", kind: "message", T: CreateWebsiteRequest, repeated: true },
    { no: 6, name: "delete_websites", kind: "message", T: DeleteWebsiteRequest, repeated: true },
    { no: 7, name: "owner_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateApplicationRequest {
    return new UpdateApplicationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined, b: UpdateApplicationRequest | PlainMessage<UpdateApplicationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateApplicationRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.ApplicationIdRequest
 */
export class ApplicationIdRequest extends Message<ApplicationIdRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<ApplicationIdRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.ApplicationIdRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApplicationIdRequest {
    return new ApplicationIdRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined, b: ApplicationIdRequest | PlainMessage<ApplicationIdRequest> | undefined): boolean {
    return proto3.util.equals(ApplicationIdRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationBuildsResponse
 */
export class GetApplicationBuildsResponse extends Message<GetApplicationBuildsResponse> {
  /**
   * @generated from field: repeated neoshowcase.protobuf.Build builds = 1;
   */
  builds: Build[] = [];

  constructor(data?: PartialMessage<GetApplicationBuildsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationBuildsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "builds", kind: "message", T: Build, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationBuildsResponse {
    return new GetApplicationBuildsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationBuildsResponse {
    return new GetApplicationBuildsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationBuildsResponse {
    return new GetApplicationBuildsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationBuildsResponse | PlainMessage<GetApplicationBuildsResponse> | undefined, b: GetApplicationBuildsResponse | PlainMessage<GetApplicationBuildsResponse> | undefined): boolean {
    return proto3.util.equals(GetApplicationBuildsResponse, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationBuildRequest
 */
export class GetApplicationBuildRequest extends Message<GetApplicationBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<GetApplicationBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationBuildRequest {
    return new GetApplicationBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationBuildRequest {
    return new GetApplicationBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationBuildRequest {
    return new GetApplicationBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationBuildRequest | PlainMessage<GetApplicationBuildRequest> | undefined, b: GetApplicationBuildRequest | PlainMessage<GetApplicationBuildRequest> | undefined): boolean {
    return proto3.util.equals(GetApplicationBuildRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.GetApplicationBuildLogRequest
 */
export class GetApplicationBuildLogRequest extends Message<GetApplicationBuildLogRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<GetApplicationBuildLogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.GetApplicationBuildLogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetApplicationBuildLogRequest {
    return new GetApplicationBuildLogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetApplicationBuildLogRequest {
    return new GetApplicationBuildLogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetApplicationBuildLogRequest {
    return new GetApplicationBuildLogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetApplicationBuildLogRequest | PlainMessage<GetApplicationBuildLogRequest> | undefined, b: GetApplicationBuildLogRequest | PlainMessage<GetApplicationBuildLogRequest> | undefined): boolean {
    return proto3.util.equals(GetApplicationBuildLogRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.SetApplicationEnvVarRequest
 */
export class SetApplicationEnvVarRequest extends Message<SetApplicationEnvVarRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  /**
   * @generated from field: string value = 3;
   */
  value = "";

  constructor(data?: PartialMessage<SetApplicationEnvVarRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.SetApplicationEnvVarRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetApplicationEnvVarRequest {
    return new SetApplicationEnvVarRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined, b: SetApplicationEnvVarRequest | PlainMessage<SetApplicationEnvVarRequest> | undefined): boolean {
    return proto3.util.equals(SetApplicationEnvVarRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.CancelBuildRequest
 */
export class CancelBuildRequest extends Message<CancelBuildRequest> {
  /**
   * @generated from field: string build_id = 1;
   */
  buildId = "";

  constructor(data?: PartialMessage<CancelBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.CancelBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "build_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CancelBuildRequest {
    return new CancelBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined, b: CancelBuildRequest | PlainMessage<CancelBuildRequest> | undefined): boolean {
    return proto3.util.equals(CancelBuildRequest, a, b);
  }
}

/**
 * @generated from message neoshowcase.protobuf.RetryCommitBuildRequest
 */
export class RetryCommitBuildRequest extends Message<RetryCommitBuildRequest> {
  /**
   * @generated from field: string application_id = 1;
   */
  applicationId = "";

  /**
   * @generated from field: string commit = 2;
   */
  commit = "";

  constructor(data?: PartialMessage<RetryCommitBuildRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "neoshowcase.protobuf.RetryCommitBuildRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "application_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RetryCommitBuildRequest {
    return new RetryCommitBuildRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined, b: RetryCommitBuildRequest | PlainMessage<RetryCommitBuildRequest> | undefined): boolean {
    return proto3.util.equals(RetryCommitBuildRequest, a, b);
  }
}

