// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/admindb"
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/dbmanager"
	"github.com/traPtitech/neoshowcase/pkg/interface/grpc"
	"github.com/traPtitech/neoshowcase/pkg/interface/repository"
	"github.com/traPtitech/neoshowcase/pkg/usecase"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewServer(c2 Config) (*Server, error) {
	config := c2.DB
	db, err := admindb.New(config)
	if err != nil {
		return nil, err
	}
	artifactRepository := repository.NewArtifactRepository(db)
	applicationRepository := repository.NewApplicationRepository(db)
	availableDomainRepository := repository.NewAvailableDomainRepository(db)
	buildRepository := repository.NewBuildRepository(db)
	environmentRepository := repository.NewEnvironmentRepository(db)
	gitRepositoryRepository := repository.NewGitRepositoryRepository(db)
	storageConfig := c2.Storage
	storage, err := provideStorage(storageConfig)
	if err != nil {
		return nil, err
	}
	mariaDBConfig := c2.MariaDB
	mariaDBManager, err := dbmanager.NewMariaDBManager(mariaDBConfig)
	if err != nil {
		return nil, err
	}
	mongoDBConfig := c2.MongoDB
	mongoDBManager, err := dbmanager.NewMongoDBManager(mongoDBConfig)
	if err != nil {
		return nil, err
	}
	containerLogger, err := provideContainerLogger(c2)
	if err != nil {
		return nil, err
	}
	controllerServiceClientConfig := c2.Controller
	controllerServiceClient := grpc.NewControllerServiceClient(controllerServiceClientConfig)
	apiServerService := usecase.NewAPIServerService(artifactRepository, applicationRepository, availableDomainRepository, buildRepository, environmentRepository, gitRepositoryRepository, storage, mariaDBManager, mongoDBManager, containerLogger, controllerServiceClient)
	publicKeys, err := provideRepositoryPublicKey(c2)
	if err != nil {
		return nil, err
	}
	apiServiceHandler := grpc.NewAPIServiceServer(apiServerService, publicKeys)
	userRepository := repository.NewUserRepository(db)
	authHeader := c2.AuthHeader
	authInterceptor := grpc.NewAuthInterceptor(userRepository, authHeader)
	mainGatewayServer := provideGatewayServer(c2, apiServiceHandler, authInterceptor)
	server := &Server{
		appServer: mainGatewayServer,
		db:        db,
	}
	return server, nil
}
