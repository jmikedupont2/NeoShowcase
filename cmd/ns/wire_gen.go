// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"fmt"
	"github.com/fsouza/go-dockerclient"
	"github.com/google/wire"
	"github.com/leandro-lugaresi/hub"
	"github.com/traPtitech/neoshowcase/pkg/domain/web"
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/admindb"
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/backend/dockerimpl"
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/backend/k8simpl"
	"github.com/traPtitech/neoshowcase/pkg/infrastructure/eventbus"
	"github.com/traPtitech/neoshowcase/pkg/interface/broker"
	"github.com/traPtitech/neoshowcase/pkg/interface/grpc"
	"github.com/traPtitech/neoshowcase/pkg/interface/handler"
	"github.com/traPtitech/neoshowcase/pkg/interface/repository"
	"github.com/traPtitech/neoshowcase/pkg/usecase"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

import (
	_ "github.com/go-sql-driver/mysql"
)

// Injectors from wire.go:

func NewWithDocker(c2 Config) (*Server, error) {
	hubHub := hub.New()
	bus := eventbus.NewLocal(hubHub)
	config := c2.DB
	db, err := admindb.New(config)
	if err != nil {
		return nil, err
	}
	gitrepositoryRepository := repository.NewGitrepositoryRepository(db)
	gitPushWebhookService := usecase.NewGitPushWebhookService(gitrepositoryRepository)
	webhookReceiverHandler := handler.NewWebhookReceiverHandler(bus, gitPushWebhookService)
	router := &Router{
		wr: webhookReceiverHandler,
	}
	webConfig := provideWebServerConfig(router)
	server := web.NewServer(webConfig)
	builderServiceClientConfig := c2.Builder
	builderServiceClientConn, err := grpc.NewBuilderServiceClientConn(builderServiceClientConfig)
	if err != nil {
		return nil, err
	}
	staticSiteServiceClientConfig := c2.SSGen
	staticSiteServiceClientConn, err := grpc.NewStaticSiteServiceClientConn(staticSiteServiceClientConfig)
	if err != nil {
		return nil, err
	}
	client, err := docker.NewClientFromEnv()
	if err != nil {
		return nil, err
	}
	ingressConfDirPath := _wireIngressConfDirPathValue
	backend, err := dockerimpl.NewDockerBackend(client, bus, ingressConfDirPath)
	if err != nil {
		return nil, err
	}
	builderServiceClient := grpc.NewBuilderServiceClient(builderServiceClientConn)
	builderEventsBroker, err := broker.NewBuilderEventsBroker(builderServiceClient, bus)
	if err != nil {
		return nil, err
	}
	applicationRepository := repository.NewApplicationRepository(db)
	staticSiteServiceClient := grpc.NewStaticSiteServiceClient(staticSiteServiceClientConn)
	dockerImageRegistryString := provideImageRegistry(c2)
	dockerImageNamePrefixString := provideImagePrefix(c2)
	appDeployService := usecase.NewAppDeployService(backend, staticSiteServiceClient, dockerImageRegistryString, dockerImageNamePrefixString, db)
	appBuildService := usecase.NewAppBuildService(applicationRepository, builderServiceClient, dockerImageRegistryString, dockerImageNamePrefixString)
	continuousDeploymentService := usecase.NewContinuousDeploymentService(bus, applicationRepository, appDeployService, appBuildService)
	mainServer := &Server{
		webserver:           server,
		db:                  db,
		builderConn:         builderServiceClientConn,
		ssgenConn:           staticSiteServiceClientConn,
		backend:             backend,
		bus:                 bus,
		builderEventsBroker: builderEventsBroker,
		cdService:           continuousDeploymentService,
	}
	return mainServer, nil
}

var (
	_wireIngressConfDirPathValue = dockerimpl.IngressConfDirPath("/opt/traefik/conf")
)

func NewWithK8S(c2 Config) (*Server, error) {
	hubHub := hub.New()
	bus := eventbus.NewLocal(hubHub)
	config := c2.DB
	db, err := admindb.New(config)
	if err != nil {
		return nil, err
	}
	gitrepositoryRepository := repository.NewGitrepositoryRepository(db)
	gitPushWebhookService := usecase.NewGitPushWebhookService(gitrepositoryRepository)
	webhookReceiverHandler := handler.NewWebhookReceiverHandler(bus, gitPushWebhookService)
	router := &Router{
		wr: webhookReceiverHandler,
	}
	webConfig := provideWebServerConfig(router)
	server := web.NewServer(webConfig)
	builderServiceClientConfig := c2.Builder
	builderServiceClientConn, err := grpc.NewBuilderServiceClientConn(builderServiceClientConfig)
	if err != nil {
		return nil, err
	}
	staticSiteServiceClientConfig := c2.SSGen
	staticSiteServiceClientConn, err := grpc.NewStaticSiteServiceClientConn(staticSiteServiceClientConfig)
	if err != nil {
		return nil, err
	}
	restConfig, err := rest.InClusterConfig()
	if err != nil {
		return nil, err
	}
	clientset, err := kubernetes.NewForConfig(restConfig)
	if err != nil {
		return nil, err
	}
	backend, err := k8simpl.NewK8SBackend(bus, clientset)
	if err != nil {
		return nil, err
	}
	builderServiceClient := grpc.NewBuilderServiceClient(builderServiceClientConn)
	builderEventsBroker, err := broker.NewBuilderEventsBroker(builderServiceClient, bus)
	if err != nil {
		return nil, err
	}
	applicationRepository := repository.NewApplicationRepository(db)
	staticSiteServiceClient := grpc.NewStaticSiteServiceClient(staticSiteServiceClientConn)
	dockerImageRegistryString := provideImageRegistry(c2)
	dockerImageNamePrefixString := provideImagePrefix(c2)
	appDeployService := usecase.NewAppDeployService(backend, staticSiteServiceClient, dockerImageRegistryString, dockerImageNamePrefixString, db)
	appBuildService := usecase.NewAppBuildService(applicationRepository, builderServiceClient, dockerImageRegistryString, dockerImageNamePrefixString)
	continuousDeploymentService := usecase.NewContinuousDeploymentService(bus, applicationRepository, appDeployService, appBuildService)
	mainServer := &Server{
		webserver:           server,
		db:                  db,
		builderConn:         builderServiceClientConn,
		ssgenConn:           staticSiteServiceClientConn,
		backend:             backend,
		bus:                 bus,
		builderEventsBroker: builderEventsBroker,
		cdService:           continuousDeploymentService,
	}
	return mainServer, nil
}

// wire.go:

var commonSet = wire.NewSet(web.NewServer, usecase.NewGitPushWebhookService, usecase.NewAppBuildService, usecase.NewAppDeployService, usecase.NewContinuousDeploymentService, repository.NewApplicationRepository, repository.NewGitrepositoryRepository, broker.NewBuilderEventsBroker, eventbus.NewLocal, admindb.New, handlerSet,
	provideWebServerConfig,
	provideImagePrefix,
	provideImageRegistry, hub.New, grpc.NewBuilderServiceClientConn, grpc.NewStaticSiteServiceClientConn, grpc.NewBuilderServiceClient, grpc.NewStaticSiteServiceClient, wire.FieldsOf(new(Config), "Builder", "SSGen", "DB"), wire.Struct(new(Router), "*"), wire.Bind(new(web.Router), new(*Router)), wire.Struct(new(Server), "*"),
)

func New(c2 Config) (*Server, error) {
	switch c2.GetMode() {
	case ModeDocker:
		return NewWithDocker(c2)
	case ModeK8s:
		return NewWithK8S(c2)
	default:
		return nil, fmt.Errorf("unknown mode: %s", c2.Mode)
	}
}
